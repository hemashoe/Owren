post_id'post_id'title'description'source_link'body'image'images
0'719814'Как так получилось, что техподдержка занялась самопиаром внутри компании'Оказалось, что когда пользователи вас любят, они творят меньше дичи. Точнее, даже не так. Сначала они начинают рассказывать вам, что их парит. И это помогает заранее убирать целые, как образно...'https://habr.com/ru/post/719814/'"Сама задача

— А у меня процессор не работает!

— О, отлично! Сейчас я вам расскажу, какой запрос куда написать. Значит, заходите в…

ЦУП

Работа дальше

И так мы постепенно подобрались к пиару

Собрали инструкции и выложили в вики, чтобы всё было покрыто.

Собрали все источники данных в один интерфейс (ЦУП), чтобы нам было удобно быстро диагностировать.

Автоматизировали все повторяющиеся действия.

Автоматизировали по RPA всё то, что не автоматизировалось в лоб. Ну пусть не совсем всё: мы с роботизацией ещё в начале пути, и у нас много чего впереди.

Пришли в каналы к пользователям и слушаем их там, чтобы им было удобно.

От решения проблем перешли к профилактике.

А чтобы делать хорошую профилактику, занялись пиаром внутри компании.

Оказалось, что когда пользователи вас любят, они творят меньше дичи.Точнее, даже не так. Сначала они начинают рассказывать вам, что их парит. И это помогает заранее убирать целые, как образно выражаются некоторые специалисты со стажем, «clusterfuck-проблемы».Мы сервисдеск банка, и у нас типовые задачи: где-то ночью в Петропавловске-Камчатском зажевало бумагу в принтере, где-то бухгалтерия сделала «ой, оно само», где-то надо присвоить или забрать права в систему и так далее.Началось с того, что мы как-то сели и решили делать генеральную уборку и автоматизировать то, что легко автоматизируется. Тогда это казалось задачей на пару недель (ну ладно, на месяц). Плюс была гипотеза, что если начать разговаривать с пользователями как-то более системно, то они расскажут что-то интересное. Одним из шагов стало то, что мы развернули прямо пиар-работу. Выяснилось, что если рассказывать внутри компании о работе поддержки, то её начинают больше любить и понимать. И есть прямая связь между силами, потраченными на хорошие отношения с публикой, и количеством и качеством тикетов.Можете называть это проактивным подходом.Короче, рекомендую.По сути, задач было две: автоматизация рутины и через это — улучшение отношений с пользователем. У нас много метрик, и там часть — про само решение проблемы, а часть — про сервис. Если вы отлично решаете проблему, но издеваетесь над конечным пользователем, то это ему почему-то не нравится, и он считает такую работу очень плохой. Короче, надо было быть хорошими или хотя бы нормальными в сервисе тоже.Чтобы вы понимали, что такое «нормальный сервис», просто отмечу, что если вы конченый отморозок, то KPI по норме регистрации обращений можно очень сильно поднять, если делать так:То есть обращение создаётся, показатель растёт, а дальше пользователь пишет тикет уже письменный, KPI соблюдается, всё в шоколаде. Только это не шоколад.Нужно было быть реально полезными, а не хакать KPI. И мы пришли к осознанию того, что нам нужно работать над увеличением FCR (количество проблем, решённых прямо во время первого обращения, например, во время первого звонка). Оно будет определяться степенью автоматизации и уровнем загруженности поддержки, то есть очередью. Сейчас мы стремимся к тому, чтобы была нулевая очередь. Когда в очереди — 10 обращений, все новые решаются быстро: за полтора-два часа.Чтобы улучшить сервис, нужна автоматизация. Чтобы меньше работать, тоже нужна автоматизация. Идеальное состояние сотрудника поддержки — сон в ожидании обращений. Мы чертовски ленивые, поэтому всё же пришлось собраться и поработать над автоматизацией.Для начала сделали сервис «Карточка пользователя», или Центр Управления Полётами (ЦУП) — место, куда собирается вся информация про пользователя, чтобы при каждом звонке не выяснять, что там за операционка, сколько у него памяти, что это за пользователь и т. п. Заодно надо смотреть, есть ли сейчас массовые проблемы и так далее. Собрали в одно место всё это:1 — это поиск пользователя в AD. 2 — если есть массовая ошибка, то информацию из нашей ITSM мы выводим сюда. 3 — выводим историю обращений пользователя за последнюю пару месяцев, чтобы сразу понимать, с чем и когда он к нам недавно приходил, и не задавать глупых вопросов.Вот данные о его компьютере (судя по всему, это тонкий клиент одного из отделений):Как использовать? Вот, например, позвонил пользователь. Мы спросили у него фамилию, далее смотрим, не истёк ли пароль, когда он менялся в последний раз, говорим: «%username%, у вас такой-то компьютер, верно?» — смотрим характеристики ПК, пробегаем глазами по списку его последних обращений.Как правило, с помощью данных действий можно сразу отсечь львиную долю дополнительных вопросов и ряд потенциальных проблем, например, со свободным местом на жёстком диске. Видим, что пользователь подключён из VPN и жалуется, что не открывается определённый ресурс. Понимаем, что, скорее всего, проблема в том, что закрыт доступ к ресурсу из VPN, и далее отрабатываем эту гипотезу. Если другая проблема — можем скинуть инструкцию. Если после описания проблемы мы понимаем, что пользователь в состоянии решить свой вопрос самостоятельно, то договариваемся с ним и отправляем инструкцию.Собственно, в разделе «Инструкции» есть таковые на все случаи жизни. Мы же всё равно всё описываем, так что всё это можно нарезать на кусочки и отправлять пользователю на почту.Вот так это выглядит:А вот и сама вики пользователей, откуда мы подтягиваем инструкции.Вот главная страница пользовательской вики:Главное в такой вики — нормальный поиск и нормальная навигация. Сейчас в ней около 100 человек в день. Я хочу верить, что это около 100 проактивно решённых тикетов.Обычные действия в таких ситуациях — это шаблонизация всего что только можно. Пример — те же роли сотрудников. Когда кто-то выходит на вакансию, ему накатывается всё нужное ему ПО по его ролевой модели. Есть магазин приложений: приходит в него человек, наклацал, что ему нужно из доступного под его роль, — поставилось. Причём всё это делается, не создавая обращения. Всё это заняло чуточку больше времени, чем мы хотели бы, но получилось очень удобно.Потом надо идти за пользователями. Мы тут живём по SAFe (это один из аджайл-фреймворков), а аджайл — это что-то такое про близость к бизнесу. Для себя мы это поняли так: надо приходить за пользователем, чтобы было удобно ему, а не нам. Точнее, нам будет удобно за счёт интеграции, а ему — за счёт того, что мы общаемся там, где удобно. Создаём новые каналы связи, присутствуем в мессенджерах — получаем открытость и всё такое.Оттуда же пришла история с кросс-функциональными командами и центрами компетенций. Предполагается, что лучшая организация — это самоорганизация, поэтому внутри саппорта мы создали центр компетенций, клубы по интересам. Есть направления автоматизации, веб-разработки, разработки на Питоне. Они объединяются по интересам, и дальше мы мотивируем на изучение материалов и разработку в основном в свободное время. Это классические гильдии.Потом — проблем-менеджмент. Это когда вы лечите не симптомы, а корневую проблему. Мы уделяем внимание проблем-менеджменту, опираясь на инцидент-менеджмент. Выявляем паттерны, повторяющиеся инциденты, работаем с обратной связью, чтобы выяснить проблему и устранить её. Вот, например, раз в два дня в Комсомольске-на-Амуре пользователь ставит тикет на то, что у него не работает принтер. Мы это уже видим в ЦУПе, тикет повторяющийся. Начинаем разбираться. У нас есть техспециалисты на местах, мы работаем со всей Россией. Приезжает такой выездной админ, вытащит бумажку, запустит принтер, уйдёт. Потом — опять. Может быть, ролики кривые. Но его руководитель может быть не в курсе, система ещё долго способна на автопилоте решать отдельные тикеты. В итоге мы видим инцидент, ищем проблему, дальше подключаем всех участников процесса и пытаемся понять. Потом проблема уходит, а с ней уходят ещё десятки возможных обращений.Или вот есть процесс, связанный с выдачей неименных карт. Смотрим инциденты по данным картам за определённые периоды, замечаем повторяющиеся ошибки. Сходили к сопровождению системы, выяснили, почему они могут возникать, сходили в бизнес, посмотрели, каким образом что предшествует, какая модель поведения при этом в ПО. В большинстве случаев проблема — из-за некорректного поведения в системе. Написали большую инструкцию, провели обучение. Передали в бэк-офис функционал по сопровождению таких инцидентов.В общем, мы всеми силами предупреждаем возникновение других таких инцидентов.Дальше нужна ещё роботизация рутинных операций — это когда всё то, что не поддаётся автоматизации классической, закрывается записанным скриптом, эмулирующим действия живого пользователя. То есть со всеми заходами в разные системы, вводом пароля из восьми звёздочек, копипаста и так далее.Лояльность пользователей важна. Но при этом PR в саппорте — это крайне противоестественно. Тем не менее мы всё же запилили «Клуб друзей ТП». Там состоит много руководителей. По сути, это что-то вроде новостного канала, где можно посмотреть сообщения об изменениях в наших процессах. Мы там рассказываем, что и как происходит, а пользователи, которые это всё читают, несут дальше в бизнес информацию, которую мы передаём.Проще говоря, когда про вас ничего не знают — это хорошо. Особенно в банке. Но когда про вас знают и рассказывают нужные вещи — это ещё лучше.В общем, наш бложек внутри компании вдруг стал важным инструментом, и прямо заметно, как он работает. Тоже рекомендую.Следующая пиарная штука — опросники. Оказывается, что можно отправлять раз в квартал всей компании опросник, всё ли в порядке, ничего ли не беспокоит. Это что-то вроде расширенного сбора обратной связи в целом, а не по конкретным вопросам. Дальше главное — возвращаться по всем странностям и разбираться. И в наш клуб писать тоже, что там нашлось. Когда люди видят, что мы реагируем, это всех радует, и они дальше стараются нам помогать. Из интересного недавнего, например, была жалоба на то, что условно по 12-м числам пользователь ночью не может подключиться к своему компьютеру. Стали копать, и оказалось, что есть некий нюанс с принудительной установкой обновлений и перезагрузкой. Поправили групповые политики, и проблема ушла. Страдал в итоге не один человек, а сразу сотня, но сказать решил только один, для остальных это был такой закон природы.Кстати, про неформальность. Как я уже писал выше, мы пришли туда, где удобно пользователям. В какой-то момент оказалось, что пользователям удобнее всего не заходить в корпоративные системы, а писать в «Телеграм» кому-то о своей проблеме. В итоге сделали даже двух чат-ботов с интеграциями, и они в человеческой форме выспрашивают всё нужное для тикета. Инцидент создаётся почти как в чате с человеком, только это не человек. Но пользователям явно удобнее, чем в ITSM.Очень важно оставаться вежливыми и добрыми. У вежливости есть две формы: когда вас выслушали, поблагодарили по скрипту и вежливо, но послали. Или когда реально попытались понять, что действительно болит у пользователя, не были формалистами. Здесь, например, важно на отслушивании разговоров (а мы слушаем диалоги для контроля) оценивать стремление не просто отделаться от пользователя, а решить корневую причину. То есть понять проблематику, докопаться до сути и устранить причину.Из метрик просто отмечу, что FCR увеличили в 10 честных раз, сейчас это около 30 %. Тикет создаётся во время обращения и тут же закрывается. Это решение болей на лету, тут помогают и ЦУП, и то, что мы заранее снимаем кучу повторяющихся проблем, и то, что у нас есть скрипты на типовые действия, и много чего ещё. Один разработчик нам даже написал, что мы самый быстрый сервисдеск. Ему всего за 1 час 15 минут решили крупный инцидент, а такого в банках он до этого не видел. В целом у нас тикет на первой линии закрывается за три с половиной часа с момента регистрации. Причём медиана там где-то в районе полутора-двух часов, потому что на среднее очень влияют противные длинные тикеты, которых меньшинство.Что сделали ещё раз:Вот примерно так логичные причинно-следственные связи привели к тому, что мы теперь тоже своего рода пиарщики."'https://habrastorage.org/webt/qw/4l/if/qw4liftxelc4bgjhdzqhhd_tbtq.png'"['https://habrastorage.org/r/w32/getpro/habr/avatars/b1e/9f7/20f/b1e9f720f86759a1075fa30855e28af3.jpg', 'https://habrastorage.org/r/w1560/webt/qw/4l/if/qw4liftxelc4bgjhdzqhhd_tbtq.png', 'https://habrastorage.org/r/w1560/webt/o6/hw/we/o6hwweukgsz63-cfch9kli468z0.png', 'https://habrastorage.org/r/w1560/webt/km/lc/vr/kmlcvrtvhmrzozywauzgbyu9n-w.png', 'https://habrastorage.org/r/w1560/webt/ed/-z/y7/ed-zy7mquxxy3omzbax0pjkkxdq.png', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/getpro/habr/avatars/b1e/9f7/20f/b1e9f720f86759a1075fa30855e28af3.jpg', 'https://habrastorage.org/getpro/habr/branding/9d6/818/500/9d681850083c50d3576c820c1fdc2fa5.png', 'https://habrastorage.org/r/w1560/webt/hv/cd/r-/hvcdr-lgg5_xjtynxsmut4cyxp4.png', 'https://habrastorage.org/webt/qw/4l/if/qw4liftxelc4bgjhdzqhhd_tbtq.png', 'https://habrastorage.org/r/w1560/webt/3n/o-/m1/3no-m1b_o1o6vvx5jlahima5dn8.png', 'https://habrastorage.org/r/w1560/webt/k7/j8/uw/k7j8uwjlii7gjaeyztki-9kggmq.png', 'https://habrastorage.org/r/w1560/webt/sq/ct/vq/sqctvqxltghzwtbhuix5m7xr8ua.png', 'https://habrastorage.org/getpro/habr/company/925/624/96f/92562496fbd9f8eb942509449cfbf977.png']"
1'719912'Просим бота написать бота'В этой статье хочу поделиться интересным опытом работы с ChatGPT, в рамках которого был написан телеграм-бот на языке Python, использующий API OpenAI для получения ответов на запросы. Началось все с...'https://habr.com/ru/post/719912/'"В этой статье хочу поделиться интересным опытом работы с ChatGPT, в рамках которого

был написан телеграм-бот на языке Python, использующий API OpenAI для

получения ответов на запросы.

Началось все с того, что я захотел зарегистрировать себе аккаунт на OpenAI и понять, кто такой этот ваш ChatGPT. Немного танцев с бубном, и желаемая цель была достигнута. Бот понравился, но возникали некоторые неудобства из-за доступа по VPN. Тогда у меня появилась идея создать телеграм-бота, который будет отправлять запросы в API OpenAI и возвращать ответы.

Я потратил следующий час на чтение документации по API OpenAI, но моя лень оказалась более находчивой, и я решил дать ChatGPT задание написать бота самостоятельно.

Что из этого вышло:

Начало киберпанка

Текст ТЗ для ChatGPT Приветствую, мой дорогой! У меня для тебя задание: написать

телеграм-бота на Python, который будет отправлять запросы в API OpenAI и

возвращать ответы. Для работы с API телеграм давай использовать

библиотеку telebot Телеграм-бот должен иметь два обработчика команд - /start и /help. Текст ответа на команды может быть любым. Бот должен немедленно отправлять ответ о том, что запрос принят в работу, при получении запроса от клиента. Когда бот получает запрос от пользователя, необходимо вызвать мето create у класса Completion с использованием библиотеки OpenAI. В качестве параметров задаем модель text-davinci-003 и max_tokens = 3500. Затем мы получаем ответ от API OpenAI и возвращаем его пользователю.

ChatGPT получил от нас задание и принялся за работу. Стоит отметить, что предоставленный код, будет использован без изменений и рефакторинга.

Вот сгенерированный им код:

import telebot import openai import os # устанавливаем ключ API OpenAI из переменной окружения openai.api_key = os.environ.get(""OPENAI_API_KEY"") # создаем экземпляр телеграм бота bot = telebot.TeleBot('YOUR_TOKEN') # создаем обработчик команд @bot.message_handler(commands=['start']) def start(message): bot.reply_to(message, ""Привет! Я бот, который может помочь вам с OpenAI API."") @bot.message_handler(commands=['help']) def help(message): bot.reply_to(message, ""Вы можете отправлять запросы в OpenAI API через меня. Просто напишите мне свой запрос и я отправлю его на обработку."") # создаем обработчик сообщений @bot.message_handler(func=lambda message: True) def echo(message): bot.reply_to(message, ""Запрос принят в работу."") try: response = openai.Completion.create( engine=""text-davinci-003"", prompt=message.text, max_tokens=3500 ) bot.reply_to(message, response.choices[0].text) except: bot.reply_to(message, ""Произошла ошибка при обработке вашего запроса."") # запускаем телеграм бота bot.polling()

Немного поправляем этот участок кода bot = telebot.TeleBot('YOUR_TOKEN') , чтобы значение тянулось из переменных окружения.

Первое сообщение боту

Вуаля! Буквально одна правка и все работает. Но мы хотим продолжить беседу про дождь и уточнить еще некоторых моментов, и получаем что-то странное.

Продолжаем беседу про дождь, но не упомянем о нем явно

Проблема здесь заключается в том, что бот не способен учитывать контекст разговора, поскольку каждое новое сообщение отправляется в API отдельно. Просмотрев документацию, я понял, что здесь нет явного решения этой проблемы. (Если я не прав, поправьте меня, пожалуйста).

Поэтому я принял решение делать костыль. Нам нужно завести какой-то кеш и хранить информацию в нем. Мы можем условно разбить кеш на два уровня: один будет храниться в базе данных, а другой - в рантайме.

С учетом этой информации, мы готовы внести некоторые изменения в исходное ТЗ.

Текст ТЗ №2 для бота Задача требует внести изменения в код бота, чтобы он мог сохранять

контекст предыдущих сообщений пользователей и использовать его при

отправке запросов в API OpenAI. Для хранения контекста необходимо использовать как массив, так и баз данных SQLite. Бот должен сначала пытаться получить информацию о контексте из массива. При этом массив должен быть очищен через 10 минут. Если контекст не найден в массиве или время его хранения истекло, бот должен обратиться к базе данных. Важно предусмотреть возможность оповещения пользователя в случае возникновения ошибок. Таким образом, необходимо внести соответствующие изменения в код бота, чтобы он мог работать с контекстом сообщений пользователей и обеспечивать безопасное хранение данных. В этом же тексте боту отправляем наш существующий код, чтобы он его переписал.

Получаем от бота такой вот такой результат:

import telebot import openai import os import sqlite3 from datetime import datetime, timedelta # устанавливаем ключ API OpenAI из переменной окружения openai.api_key = os.environ.get(""OPENAI_API_KEY"") # создаем экземпляр телеграм бота bot = telebot.TeleBot(os.environ.get(""TG_API_KEY"")) # создаем подключение к базе данных conn = sqlite3.connect(""example.db"", check_same_thread=False) # создаем таблицу в базе данных для хранения контекста with conn: cur = conn.cursor() cur.execute(""CREATE TABLE IF NOT EXISTS context (user_id TEXT, message TEXT, timestamp TEXT)"") # задаем интервал, через который массив с контекстом будет очищаться CONTEXT_CACHE_INTERVAL = timedelta(minutes=10) # словарь, в котором будут храниться последние запросы пользователя context_cache = {} # создаем обработчик команд @bot.message_handler(commands=['start']) def start(message): bot.reply_to(message, ""Привет! Я бот, который может помочь вам с OpenAI API."") @bot.message_handler(commands=['help']) def help(message): bot.reply_to(message, ""Вы можете отправлять запросы в OpenAI API через меня. Просто напишите мне свой запрос и я отправлю его на обработку."") # создаем обработчик сообщений @bot.message_handler(func=lambda message: True) def echo(message): # смотрим, есть ли контекст в кэше if message.chat.id in context_cache and datetime.now() - context_cache[message.chat.id]['timestamp'] <= CONTEXT_CACHE_INTERVAL: context = context_cache[message.chat.id]['message'] else: # если контекста в кэше нет, ищем его в базе данных with conn: cur = conn.cursor() cur.execute(""SELECT message FROM context WHERE user_id = ? ORDER BY timestamp DESC LIMIT 1"", (str(message.chat.id),)) row = cur.fetchone() context = row[0] if row else """" bot.reply_to(message, ""Запрос принят в работу."") try: response = openai.Completion.create( engine=""text-davinci-003"", prompt=context + message.text, max_tokens=3500 ) bot.reply_to(message, response.choices[0].text) # сохраняем контекст в кэше и базе данных with conn: cur = conn.cursor() cur.execute(""INSERT INTO context (user_id, message, timestamp) VALUES (?, ?, ?)"", (str(message.chat.id), context + message.text, datetime.now().strftime(""%Y-%m-%d %H:%M:%S""))) conn.commit() context_cache[message.chat.id] = {'message': context + message.text, 'timestamp': datetime.now()} except Exception as e: bot.reply_to(message, f""Произошла ошибка при обработке вашего запроса: {str(e)}"") # запускаем телеграм бота bot.polling()

Программа успешно запущена, и мы проверяем наличие базы данных с тремя столбцами. Мы продолжаем общаться с ботом на тему дождя и видим, что он начал выглядеть как разговор с искусственным интеллектом, а не просто как с генератором рандомных текстов.

Вопрос про дождь с контекстом

К сожалению, такое решение может иметь побочный эффект. Если вы ведете продолжительную беседу на разные темы, то есть риск, что бот может ответить на все ваши предыдущие вопросы, даже если последнее сообщение не имело к ним никакого отношения. Хотя этот эффект не всегда наблюдается.

Побочный эффект от костылей

Это происходит потому, что мы передаем в запросе текущий запрос вместе с контекстом. А контекст может содержать большое количество информации, которая не имеет отношения к текущему запросу. Мы можем очищать контекст каждый раз, но такой подход может быть неэффективным. Возможно, стоит добавить отдельную команду на клиентскую сторону, которая будет очищать контекст.

response = openai.Completion.create( engine=""text-davinci-003"", prompt=context + message.text, max_tokens=3500 )

Мы продолжаем вести непринужденную беседу с ботом, как вдруг получаем ошибку: Произошла ошибка при обработке вашего запроса: This model's maximum context length is 4097 tokens, however you requested 4654 tokens (1154 in your prompt; 3500 for the completion). Please reduce your prompt; or completion length.

Это происходит из-за ограничения на количество символов в запросе, которое установлено в API OpenAI. А мы еще тут контекст копим в кэше. Поэтому все также можно попросить бота исправить ошибку, и он дает нам такой код:

@bot.message_handler(commands=['drop_cache']) @restricted_access def drop_cache(message): user_id = message.from_user.id conn = get_conn() cursor = conn.cursor() cursor.execute('DELETE FROM context WHERE user_id=?', (user_id,)) hot_cache.clear() conn.commit() bot.send_message(user_id, ""Cache dropped."")

Здесь мы очищаем кеш для конкретного user_id, чтобы уложиться в ограничения api.

В итоге мы получаем рабочее решение. Его можно дальше улучшать и настраивать. Исходный код бота доступен здесь."'https://habr.com/share/publication/719912/7e789ca5433b280957ad9d44241a4aab/'"['https://habrastorage.org/r/w780q1/getpro/habr/upload_files/998/005/89f/99800589ff74f09c08a9193c386ebd3c.jpg', 'https://mc.yandex.ru/watch/24049213', 'https://habr.com/share/publication/719912/7e789ca5433b280957ad9d44241a4aab/', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/ce8/0e3/cec/ce80e3cecc54d219e4fed9170574ff96.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/159/3f4/16c/1593f416c5acb28d110393396bea33d3.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/f93/a04/008/f93a040084954cc78abfaffe9100008b.jpg']"
2'719908'WPF: контролы лишенные внешнего вида и неразрешимая задача выбора конфигурации темплейта'Мне последнее время приходится заниматься интерфейсом приложения для анализа данных, визуальным представлением данных на разных слоях анализа, а также навигацией по слоям и...'https://habr.com/ru/post/719908/'"Мне последнее время приходится заниматься интерфейсом приложения для анализа данных, визуальным представлением данных на разных слоях анализа, а также навигацией по слоям и по данным. Соответственно, пришлось разбираться c новомодным WPF, который продвигает концепцию реализующую возможность параллельной (независимой) работы дизайнеров, занимающихся внешним видом приложения и разработчиков, реализующих поведение приложения. Дизайнер, конечно, из меня не очень (мягко говоря), а вот с реализованной концепцией программирования внешнего вида элементов управления в приложениях, мне, кажется, удалось разобраться. Собственно, вот этим пониманием некоторых аспектов концепции я и хочу поделиться, в том числе для того, чтобы расширить это понимание по результатам критики и/или обсуждения.

Возможно, кому‑то будет интересно сравнить то, что предлагает WPF, с концепциями реализованными в JavaFX.

Откуда берутся проблемы при работе с визуальными библиотеками

Одной из главных проблем освоения разработчиками библиотеки визуальных элементов является то, что, зачастую, разработчики хотят, чтобы библиотека «угадала» их представление о том, как должен выглядеть и как должен работать тот или иной элемент визуального интерфейса. Соответственно, разработчики, как пользователи библиотеки, оказываются не готовы, что вместо того, чтобы искать готовые компоненты, надо научиться создавать их самому в парадигме того инструментария и тех концепций, которые реализованы в библиотеке.

Для разработки собственных визуальных представлений для десктопных задач навигации по инженерным данным мы выбрали технологии WPF. Собственно, у нас не было большого выбора, поскольку проект реализуется под Windows, и большая часть кода выполнена на C#. По результатам того, что уже сделано, можно вполне уверенно сказать, что, несмотря на некоторые трудности освоения технологии WPF в начале, мы совершенно не разочаровались в ней. Более того, функциональность и возможности WPF поражают воображение, и это, зачастую, является причиной одной очень парадоксальной, как мне кажется, проблемы. Каждая конкретная задача визуализации, компоновки, использования комбинации визуальных управляющих элементов (контролов) имеет чуть ли не десятки решений, выбрать из которых одно, самое лучшее, кажется, не представляется возможным.

В заголовок я вынес только упоминание WPF темплейтов, но на самом деле разнообразие возможностей, с которым приходится сталкиваться, касается любых WPF сущностей и всех их комбинаций, это темплейты, стили, тригеры, визуальные состояния, поведения, анимации, трансформации, это из того чего мне довелось касаться, но я думаю это не полный список.

Актуальность технологии

Так же как язык С незаменим для разработки и обновления компонентов ядра операционной системы, так и WPF теперь не заменим (как мне кажется) для разработки визуального оформления — фронтенда операционной системы. Я даже не постесняюсь предположить, что WPF и XAML станут такой же бессмертной технологией, по крайней мере, в Windows, как и язык С на уровне ядра операционной системы.

Можно привести большой список как проприетарных, так и OpenSource проектов, которые используют и развивают WPF технологии, успешно выпускают обновления и составляют планы на будущее относительно WPF. Для примера:

DevExpress

Telerik

Xceed

caliburn.micro

Но все вышеперечисленное — это общие слова — давайте рассмотрим практические примеры, которые демонстрируют, чем же достигается невообразимое количество возможностей, которое предоставляет WPF для разработки визуальных интерфейсов и составляющих их визуальных элементов, и справедливо ли такое утверждение в принципе.

Контролы лишенные внешнего вида

Наверно мало кто обращает внимание, что, во времена господства WinForm, все кнопки в основном были прямоугольными. А вот чтобы создать какую‑то особенную кастомную кнопку, надо было искать особенную визуальную библиотеку. WPF решает проблему определения формы кнопки и любого контрола, и даже целого окна кардинально и, видимо, навсегда.

Дополнение про «навсегда» здесь не означает, что не будет какой‑то новой технологии или фреймворка, или <‑придумайте свое название чего→ которые сделают процесс определения формы контрола более эффективным в каком‑то смысле. Слово «Навсегда» здесь означает, что эта проблема один раз уже решена, и вряд ли в ближайшей перспективе можно будет придумать какой‑то принципиально новый способ решения этой проблемы. Тем более что мы видим, что и в экосистеме вокруг Java, например, предлагается во многом похожая технология JavaFX.

Тут надо сделать одно пояснение относительно определения «лишенный внешнего вида» элемент. Элемент создается и предоставляется с внешним видом по умолчанию — то есть вы можете его сразу использовать с тем внешним видом, с которым он изначально разработан — концепция предоставляет вам возможность изменять внешний вид по своему усмотрению. Отсутствие внешнего вида надо понимать именно в том смысле, что вы не всегда знаете, с каким исходным внешним видом элемент был создан.

Давайте же посмотрим, каким образом эта проблема управления формой и компоновкой контрола решается в WPF на примере из учебника по WPF.

На рисунке приведен классический пример управления внешним видом элемента выбора цвета.

Мы видим две реализации объекта одного C# класса! Важно обратить внимание, что визуальный объект в красной рамке (сверху на двух картинках) и визуальный объект в черной рамке с желтым фоном (снизу) — это совершенно идентичные объекты одного C# класса (типа).

В этом примере демонстрируются возможности управления внешним видом специально созданного элемента выбора цвета. Цвет управляется‑настраивается с помощью ползунков для количества красной, зеленой и синей составляющих цвета с демонстрацией результирующего цвета в специальном сегменте внутри этого пользовательского контрола.

Пример явно демонстрирует разные аспекты компоновки, формы, внутреннего содержания элемента которыми можно управлять:

Форма сегмента отображения цвета изменилась с прямоугольной на круглую;

Расположение ползунков изменилось с горизонтального на вертикальное;

Были добавлены подписи для ползунков;

Цвет и фона, ширина и цвет рамки.

Каким же образом происходит такое изменение внешнего вида визуального элемента или как подменить описание внешнего вида элемента?

Дело в том, что в WPF реализована концепция разделения на два типа кода:

один из которых — C#‑код — реализует логику работы визуального элемента и/или его функциональность,

а второй — XAML‑код — реализует описание внешнего вида‑способ рисования визуального компонента,

причем это разделение достигается самым, наверно, радикальным способом — описание внешнего вида пишется на другом языке, на декларативном языке XAML. Для создания элементов, лишенных внешнего вида, такое описание внешнего вида включает в себя все визуальные составляющие, такие как:

цвета (фона, под‑элемента, …),

линии,

геометрические фигуры,

низкоуровневые визуальные элементы входящие в состав, такие как текст, рамки,

геометрия взаимного расположения элементов.

Далее это описание внешнего вида выносится в так называемый темплейт (template) — шаблон, который можно понимать как конфигурацию или даже сборку составляющих примитивных‑библиотечных визуальных элементов, которые формируют законченное сложное изображение контрола.

Создание особенной кастомной кнопки

Пусть нам нужно некоторое особенное оформление для кнопки как на рисунке:

Кастомная кнопка в обычном состоянии Кастомная кнопка с наведенным курсором мыши

Тут надо отметить, что слово «создание» звучит, конечно, разочаровывающе, для такой, в общем то, рутинной работы, как создание кнопки, хоть она и трижды кастомная. Но дело в том, что для WPF это не совсем корректное слово в этом контексте. Мы же не собираемся менять логику работы кнопки — она также должна отрабатывать нажатие мышью и передавать соответствующее событие в код для обработки. В данном случае нам нужно только изменить внешний вид кнопки, и как мы уже отметили выше, для WPF это отдельная задача, которая никак не затрагивает исполняющий класс этого визуального объекта.

Чтобы обычная кнопка стала выглядеть по‑особенному, как мы видим на рисунке, надо следующим образом переопределить ее стандартный темплейт, просто перечислив вот таким образом те рисованные объекты, из которых она теперь будет состоять:

<ControlTemplate TargetType=""Button""> <Grid Width=""{TemplateBinding Width}"" Height=""{TemplateBinding Height}"" ClipToBounds=""True""> <!-- Outer Rectangle with rounded corners. --> <Rectangle x:Name=""outerRectangle"" HorizontalAlignment=""Stretch"" VerticalAlignment=""Stretch"" Stroke=""{TemplateBinding Background}"" RadiusX=""20"" RadiusY=""20"" StrokeThickness=""5"" Fill=""Transparent"" /> <!-- Inner Rectangle with rounded corners. --> <Rectangle x:Name=""innerRectangle"" HorizontalAlignment=""Stretch"" VerticalAlignment=""Stretch"" Stroke=""Transparent"" StrokeThickness=""20"" Fill=""{TemplateBinding Background}"" RadiusX=""20"" RadiusY=""20"" /> <!-- Present Content (text) of the button. --> <DockPanel Name=""myContentPresenterDockPanel""> <ContentPresenter x:Name=""myContentPresenter"" Margin=""20"" Content=""{TemplateBinding Content }"" TextBlock.Foreground=""Black"" /> </DockPanel> </Grid> <ControlTemplate.Triggers> <Trigger Property=""IsMouseOver"" Value=""True""> <Setter Property=""Background"" Value=""Red""/> </Trigger> </ControlTemplate.Triggers> </ControlTemplate>

Здесь мы видим, например, что приходится применять тригер, чтобы кнопка реагировала на попадание курсора мыши (событие IsMouseOver ) и перерисовывалась с красным цветом фона ( Background ).

Где найти кнопку с пиктограммой и с текстом

На Хабре есть целая статья посвященная этой «проблеме» создания кастомизированной кнопки:

WPF: 4 варианта кнопки с иконкой и текстом

Суть в том, что WPF позволяет определить чуть ли не десятки способов добавления иконки‑пиктограммы на кнопку. Например, автор указанной статьи описывает шесть таких способов, достаточно сильно ограничивая себя в том, что считать способом добавления иконки на кнопку.

Вот так вот могут выглядеть кнопки «ОК» и «Cancel», созданные на WPF:

Что называется, найдите хоть одно отличие от кнопок из WinForms.

Конечно, визуально невозможно заметить, что, для эксперимента, я еще и изменил темплейт кнопки «Cancel», и она теперь сделана на основе библиотечного объекта StackPanel, тогда как исходный темплейт, использованный для кнопки «ОК», собран на основе тоже библиотечного объекта Grid.

Исходный темплейт для кнопки «ОК»:

<DataTemplate> <Grid> <Image Source=""{Binding Path=(local:EyeCandy.Image), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}"" HorizontalAlignment=""Left"" Margin=""8,0,0,0"" Height=""16"" Width=""16"" /> <TextBlock Text=""{TemplateBinding Content}"" HorizontalAlignment=""Center"" /> </Grid> </DataTemplate> Альтернативный темплейт для кнопки «Cancel»: <DataTemplate> <StackPanel Orientation=""Horizontal"" HorizontalAlignment=""Left"" Width=""101""> <Image Source=""{Binding Path=(local:EyeCandy.Image), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}"" Height=""16"" Width=""16"" HorizontalAlignment=""Left"" /> <TextBlock Text=""Cancel"" HorizontalAlignment=""Center"" Margin=""22,0,0,0""/> </StackPanel> </DataTemplate>

Вы можете задать вопрос: зачем же нужно такое разнообразие, когда мне (нам) достаточно простой кнопки с иконкой? Ответ не заставит себя ждать: WPF спроектирован для того, чтобы снять ограничения на реализацию любого уникального пользовательского интерфейса, да(!) эти дополнительные возможности по кастомизации стандартных контролов и разработке новых делают разработку UI более сложной хотя бы потому, что теперь надо хоть немножко понимать эту новую концепцию с новым языком XAML. Да! Система WPF более сложная для понимания, но эта сложность позволяет получить практически неограниченные возможности для построения уникальных визуальных представлений. При этом код для более сложных решений будет значительно компактнее, чем код для такого же визуального представления, написанный в старой парадигме. Вот эти новые возможности и оптимизация более сложных, зачастую даже условно невозможных решений, в рамках старой парадигмы с лихвой окупают повышение порога вхождения в использование технологии WPF."'https://habrastorage.org/getpro/habr/upload_files/b9c/550/32a/b9c55032a57694aad67b57be1e4fecb8.png'"['https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/b9c/550/32a/b9c55032a57694aad67b57be1e4fecb8.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/058/fc5/aab/058fc5aab925cdd73d204c775d4ca16d.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/6bd/db3/43d/6bddb343d3b0d23959ce2592584dc938.png', 'https://habrastorage.org/getpro/habr/upload_files/b9c/550/32a/b9c55032a57694aad67b57be1e4fecb8.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/aa0/f4f/e3d/aa0f4fe3d5bbfcc9011cdd8af6a7cbce.png']"
3'719906'Гасить ипотеку досрочно или инвестировать? Разбираемся, как не оказаться без денег и без квартиры'Кто-то говорит, что ипотека – это жуткая переплата банку, и ее нужно закрывать всеми силами как можно скорее. А кто-то, наоборот – что это дешевый кредит, который лучше не гасить, а направить эти...'https://habr.com/ru/post/719906/'"Кто-то говорит, что ипотека – это жуткая переплата банку, и ее нужно закрывать всеми силами как можно скорее. А кто-то, наоборот – что это дешевый кредит, который лучше не гасить, а направить эти деньги на инвестиции (в STONKS). В этой статье мы попробуем понять, каким образом лучше подходить к гашению ипотеки, и что там может пойти не так.

Это моя квартира в Екатеринбурге, которую я купил в ипотеку в 2013 году. Она не имеет никакого отношения к статье – просто я решил проиллюстрировать текст ее фотками из ностальгических соображений =)

Иногда читатели присылают мне в личку всякие разные вопросы про финансы, а я пытаюсь дать на них короткий и разумный ответ. В этот раз получилось не очень коротко – поэтому я решил оформить ответ в небольшую заметку.

Павел спрашивает: «Имею ипотеку под 7,2%. Есть отдельно финансовая подушка на накопительном счете (пока под 7,5% дают). Имея ипотеку, стоит ли все доступные средства с доходов (з/п) вкладывать в нее, чтобы погасить как можно скорее? Либо, может, стоит гасить минимальным платежом, а свободные средства начинать инвестировать пассивно? Не очень понятен такой момент: с одной стороны на ипотеку ежедневно начисляется % , с другой – сумма кредита обесценивается из-за инфляции».

C чисто финансовой точки зрения, иметь долгосрочную ипотеку с зафиксированным невысоким процентом (а 7,2% по российским меркам не особо высоко) – это хорошо. Прямо сейчас можно, например, открыть банковский вклад на год под 8,0–8,5% (лучше в пределах страховой суммы АСВ 1,4 млн рублей, конечно). И гособлигации ОФЗ с погашением через 1–2 года дадут примерно такую же доходность. Вот этот один процентный пункт разницы между ипотечной ставкой и доступной ставкой доходности – это, можно сказать, «бесплатный бонус» от непогашения ипотеки.

Правда, с получаемого дохода вам придется еще и платить НДФЛ 13%, что несколько снижает возможность «арбитражной» игры на разнице в ставках. Но и это в ряде случаев не является проблемой. Во-первых, если это ваша первая купленная квартира в жизни – то вы имеете право на налоговый вычет в том числе по ипотечным процентам (в общей сумме набежавших процентов не более 3 млн рублей). Во-вторых, если инвестировать через ИИС, то можно еще и нивелировать налог с инвестиционного дохода.

С ностальгией вспоминаю отвязные караоке-вечеринке в моей Екб-хате с экраном во всю стену – всё-таки, съемное жилье в ряде случаев имеет недостатки (труднее всё сделать прямо под себя)

Но это всё рассуждения первого порядка – а они не столь важны, как более хитрые последствия второго порядка. Дело в том, что российская ипотека имеет одно важное качество – она дает вам асимметричную опциональность. У вас всегда есть возможность в случае чего погасить кредит досрочно или перекредитоваться под более низкую ставку. А вот у банка возможности отказать вам в досрочном погашении, либо принудительно «пересадить» вас на более высокий процент, отсутствует. И это очень ценно для вас!

Грубо говоря: процентные ставки в экономике могут идти либо вверх, либо вниз. Если через год рыночный уровень ставок в России будет, ну, например, 20% годовых – вы будете очень рады, что не гасили свою ипотеку (ведь можно будет на достаточно консервативных вложениях зарабатывать в разы больше зафиксированной у вас ставки). Если же вдруг случится удивительное, и ставки упадут до ~4% (было такое в 2020-м, если помните) – то вы сможете просто частично загасить имеющимися деньгами свою «дорогую» ипотеку, а то и вообще перекредитовать ее под более низкую ставку. Короче, оба варианта развития событий для вас являются, в общем-то, неплохими.

Текущий уровень ключевой ставки 7,5% для России по историческим меркам является не особо высоким

Но это всё финансы и математика. В реальной жизни важна еще и психология: многие люди от нависшего над ними кредита испытывают существенный дискомфорт. Если этот дискомфорт настолько силен, что вы буквально «кушать не можете» – то, может быть, имеет смысл наплевать на расчеты и просто гасить ипотеку ускоренными темпами.

«Маржин колл» по ипотеке: страшный сон любого заемщика

Выше я рассматривал вопрос «гасить ли досрочно ипотеку?» с точки зрения наиболее безрисковых альтернативных стратегий – когда ты вместо досрочного погашения кредита кладешь деньги на банковский депозит в пределах суммы страхования АСВ, или покупаешь короткие государственные облигации ОФЗ. Но кто-то предлагает пойти еще дальше – долгосрочно инвестировать средства во что-то более рискованное (и, соответственно, более доходное).

Давайте тут сделаем шаг немного в сторону и вспомним, что сама покупка квартиры в ипотеку – это уже, по сути, инвестирование с плечом. Вы приобретаете актив в виде недвижимости (Кийосаки, даже не начинай!) за счет займа в рублях – это не то чтобы концептуально сильно отличается от покупки с плечом каких-нибудь акций Газпрома через вашего брокера.

Хотя, нет: одно важное отличие есть. В случае с акциями, если их стоимость резко упадет и начнет приближаться к объему взятых в долг у брокера денег (то есть, плеча) – то брокер объявит вам «маржин колл». Это означает требование «либо довнеси свежих денег в погашение долга, чтобы мне было не так очково, – либо я принудительно продам твои акции, из полученных денег погашу твой долг, ну а ты уж там довольствуйся оставшимся кукишем». Margin call – весьма неприятная штука, короче.

Типичные будни трейдеров акциями с плечом

Так вот, хорошая новость: в ипотеке нет маржин коллов! Пока вы исправно платите ежемесячные взносы, даже если на рынке недвижимости случился коллапс, и ваша ипотечная квартира внезапно стала стоить почти как оставшаяся сумма непогашенного долга – то банк не имеет права сказать «так, что-то мне страшненько стало, ну-ка быстро гаси половину задолженности досрочно – а не то я конфискую жилплощадь!».

Получается, ипотечник защищен от всяких там поползновений банка в большинстве случаев, кроме одного – когда он по каким-то причинам перестает вносить ежемесячные платежи по ипотеке. И вот тут-то и кроется потенциальная засада с идеей «буду долгосрочно инвестировать вместо погашения ипотеки».

Представьте, что Павел (герой нашего вопроса) с ипотекой под 7,2% годовых решил вместо досрочного погашения кредита вложиться в надежные ОФЗ на 20 лет под 11,5% внутри ИИС (а что – и ставка повыше, и срок как раз с ипотекой совпадает!). А через год экономика РФ захворала, Павел потерял работу и доход, финансовая подушка быстро исчерпалась – так что он теперь не может платить по ипотеке. Ставка процента в экономике резко подросла, и долгосрочные облигации в моменте просели почти в два раза (они отрастут обратно, но небыстро) – их продажа для совершения ипотечных платежей будет означать фиксацию убытка. А если перестать платить – то банк принудительно продаст квартиру по текущим просевшим ценам (кризис же, ну), так что после гашения остатка долга денег для Павла не останется.

Вот и получится, что Павел просто заплатил первоначальный взнос по ипотеке и все предыдущие платежи «в никуда» – ничего не получив в итоге взамен. Можно сказать – почти что маржин колл вышел!

Мем смешной, ситуация страшная

Отдельно отмечу: я не хочу сказать, что долгосрочно инвестировать вместо погашения ипотеки ни в коем случае нельзя. Просто неплохо бы понимать риски такого решения. И, конечно, не забывать про важность надежной и пухлой финансовой подушки!

Резюме: делаем выводы

Я бы не стал досрочно гасить ипотеку, если:

Ставка по кредиту зафиксирована на долгий срок на низком уровне (ниже текущих ставок по банковским депозитам, или просто близко к историческим минимумам процентных ставок в стране).

Текущая инфляция существенно превышает ставку по кредиту, и ваши доходы в целом плюс-минус растут на уровне не сильно ниже инфляции.

У вас «льготная» околонулевая ставка (типа 0,1%) – то есть, вы фактически сразу переплатили застройщику/банку за объект существенно выше рыночной цены. Досрочное погашение в такой ситуации будет означать, что вы как бы «подарили» им эти деньги зря.

Вы накопили внушительную финансовую подушку и уверены, что сможете гасить из нее ипотечные платежи без всяких проблем при любом раскладе как минимум в течение года.

Досрочное гашение кредита, вероятно, вам подходит, если:

Ставка по кредиту зафиксирована на высоком уровне – по крайней мере, выше текущих ставок по депозитам. Вообще, если ставки снизились с того момента, как вы брали ипотеку – неплохо бы в любом случае обсудить с банком вопрос рефинансирования вашего кредита под более низкий процент.

У вас образовался дисбаланс между валютой кредита и валютой текущих доходов, из которых вы его гасите. См. истории валютных ипотечников, которые в начале 2010-х брали долларовые кредиты «потому что по ним низкая ставка и платеж ниже», а в 2014 году обнаружили, что после резкого обесценения рубля гасить их они уже не могут.

Вы не можете противостоять искушению тратить любые свободные деньги на счете – так что сбережения, не направленные на погашение ипотеки, скорее всего будут просто потрачены на что-то не сильно важное.

Сама мысль о нависшем над вам кредите причиняет вам сильные душевные страдания и беспокойство.

Я в итоге свою ипотеку загасил досрочно через несколько лет просто потому, что мне так было поспокойнее – и с чувством выполненного долга продолжил разрисовывать висящий на стене вайтборд

Фактор, который слабо влияет на решение о погашении ипотеки:

Сколько времени осталось до конца срока ипотеки. Часто встречающийся тезис «гасить ипотеку досрочно выгодно именно в самом начале срока, когда большая часть платежей приходится на проценты» – это миф. Выгодность здесь будет зависеть в первую очередь от доходности, которую вам может принести альтернативное вложение капитала, а не от срока.

Если материал оказался для вас полезным – буду благодарен за подписку на мой ТГ-канал RationalAnswer про разумные подходы к личным финансам и инвестициям."'https://habrastorage.org/getpro/habr/upload_files/baf/0c4/ac1/baf0c4ac16ded81665c3b6b4d988673c.jpg'"['https://habrastorage.org/getpro/habr/upload_files/baf/0c4/ac1/baf0c4ac16ded81665c3b6b4d988673c.jpg', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/baf/0c4/ac1/baf0c4ac16ded81665c3b6b4d988673c.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/600/ae7/882/600ae78824e71050558a8dd7375c0044.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/535/1f1/379/5351f1379136211d75c3d483a013653d.png', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/a15/b3c/bbc/a15b3cbbc9776bc3b3f36efa8ab93ce6.jpg', 'https://habrastorage.org/r/w32/getpro/habr/avatars/e54/688/8ae/e546888aed94c31b9d15b7fa3d86f381.jpg', 'https://habrastorage.org/getpro/habr/avatars/e54/688/8ae/e546888aed94c31b9d15b7fa3d86f381.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/3c6/fba/221/3c6fba221ce2a71a55564c9c9640bfe4.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/15c/335/7ae/15c3357ae5ea482beeabd857312bdf2d.jpg']"
4'719902'Боевой прокси-сервер Squid 5.2 с нуля ч.2'Настройка файла конфигурации Squid Произведем базовую настройку, открываем /etc/squid/squid.conf # Аутентификация Kerberos auth_param negotiate program /usr/lib/squid/negotiate_kerberos_auth -k...'https://habr.com/ru/post/719902/'"Настройка файла конфигурации Squid

Произведем базовую настройку, открываем /etc/squid/squid.conf

# Аутентификация Kerberos

auth_param negotiate program /usr/lib/squid/negotiate_kerberos_auth -k /etc/squid/squid.keytab -s proxy_k@YOURDOMAIN.RU

auth_param negotiate children 160 startup=0 idle=1

auth_param negotiate keep_alive off

# Интерфейсы прокси сервера

http_port 192.168.10.100:3128

http_port 127.0.0.1:3128

# В ACL добавляем

acl auth proxy_auth REQUIRED # Доступ всем прошедшим авторизацию

acl localnet src 192.168.10.1/24 # Подсеть компании

# HTTP Access (Доступ всем прошедшим аутентификацию)

http_access allow auth

# Cache (Настройки кэша)

cache_mem 1024 MB

maximum_object_size_in_memory 512 KB

cache_dir ufs /var/spool/squid 2048 16 256

maximum_object_size 4 MB

access_log daemon:/var/log/squid/access.log squid

logfile_rotate 31

На этом этапе прокси уже будет работать, но никаких настроек по доступам и скоростям мы не произвели. Сохраняем файл squid.conf.

Выполняем команду squid -k reconfigurate . Проверяем.

На компьютере из сети компании в настройках прокси сервера указываем адрес нашего сервера:

HTTP/proxy_comp@yourdomain.com

Порт: 3128

Заходим в браузер на виндовой машине и проверяем доступы к сайтам.

Смотрим логи авторизации в /var/log/squid/cache.log

И логи доступов к сайтам в /var/log/squid/access.log"'https://habrastorage.org/getpro/habr/upload_files/708/8ad/d65/7088add65babd941a611a211d113d8dc.PNG'"['https://habrastorage.org/getpro/habr/upload_files/708/8ad/d65/7088add65babd941a611a211d113d8dc.PNG', 'https://mc.yandex.ru/watch/24049213']"
5'719896'Боевой прокси-сервер Squid 5.2 с нуля'Всем привет. Появилась необходимость сменить в компании старичка Squid 3.5 с NTLM на FreeBSD, трудящегося с лохматых годов, так как как он не управлял скоростями и функционал работал криво. Было...'https://habr.com/ru/post/719896/'"Всем привет. Появилась необходимость сменить в компании старичка Squid 3.5 с NTLM на FreeBSD, трудящегося с лохматых годов, так как как он не управлял скоростями и функционал работал криво. Было решено ставить Squid 5.2 с авторизацией по Kerberos на Ubuntu 22.04. Конфиг от 3.5 не подходит для 5 версии, поэтому все писалось с нуля. Для удобства чтения настройка будет разбита не несколько статей:

Серверная часть и настройка авторизации Kerberos (Active Directory) Настройка файла конфигурации Squid Настройка доступов и скоростей

Немного теории для тех, кто вообще не знает, что это и с чем ""едят"" кальмара..

Гугл говорит нам замысловато..

Squid — программный пакет, реализующий функцию кэширующего прокси-сервера для протоколов HTTP, FTP, Gopher и HTTPS. Разработан сообществом как программа с открытым исходным кодом. Все запросы выполняет как один неблокируемый процесс ввода-вывода.

Для новичка может быть вообще ничего непонятно. Проще говоря прокси-сервер встраивается между конечным сайтом и пользователем. Кэширует данные с сайтов, «режет» скорость и позволяет правильно распределить нагрузки на интернет-канал, предоставляет или наоборот закрывает доступы к разным сайтам, например соц.сетям, магазинам и т.п., чтобы ничего не отвлекало наших сотрудников от выполнения их обязанностей 😊

Hidden text Постарался все максимально объяснить с разных сторон, чтобы было понятно даже человеку, который делает это впервые. Надеюсь знания окажутся полезными.

Обозначения:

yourdomain.com – вместо этого подставляйте свой домен.

user-px – пользователь от которого запускается squid.

proxy_comp - имя прокси сервера в DNS.

proxy_k – пользователь для Squid в Active Directory.

dc01 – Active Directory 1 сервер.

dc02 - Active Directory 2 сервер (может и не быть в компании).

192.168.10.100 – сервер прокси (у вас будет свой).

192.168.10.1 – шлюз (у вас будет свой).

192.168.10.9 - DNS (у вас будет свой).

192.168.10.10 – DNS (у вас будет свой).

192.168.10.222 - IP нашего админского компа.

Переходим к базовой настройке сервера Ubuntu 22.04

Устанавливаем актуальную версию Ubuntu server LTS отсюда:

https://ubuntu.com/download/server

Настраиваем статический ip адрес в sudo vim /etc/netplan/00-installer-config.yaml

Листинг:

# This is the network config written by 'subiquity'

network:

ethernets:

ens192:

addresses:

- 192.168.10.100/24

gateway4: 192.168.10.1

nameservers:

addresses:

- 192.168.1.10

- 192.168.1.11

search:

- yourdomain.com

version: 2

Настраиваем синхронизацию времени с доменом:

Устанавливаем клиент

apt-get install ntp

В файле /etc/ntp.conf комментируем все строки с серверами и добавляем свой сервер Active Directory:

server dc01.yourdomain.com

server dc02.yourdomain.com

В конец файла дописать:

interface ignore wildcard

interface listen eth1

Сохранить файл и перезапустить службу ntp:

service ntp restart

Далее обновляем пакеты и устанавливаем squid

sudo apt update

sudo apt install squid

По завершению проверяем работу службы

sudo systemctl status squid

Создаем пользователя и пароль, от которого будет запускаться squid, и все права на файлы предоставляем ему.

sudo useradd user-px

chown user-px:user-px /etc/squid/*

chmod 640 /etc/squid/*

И ставим squid в автозагрузку

systemctl enable squid

На DNS-сервере делаем соответствующую А запись:

IP и имя сервера, на котором будет крутиться прокси, порт указываем 3128

Настраиваем авторизацию через Active Directory (Kerberos)

Так как все пользователи распределены по ролям, squid будет проверять вхождение пользователя в определенную группу из AD и на основании неё выдавать доступ. Чтобы это реализовать нам нужно получить доступ к AD. Приступим..

Создаем в AD пользователя, под которым Squid будет авторизовываться для получения списка пользователей и групп. Имя пользователя указывайте своё.

Обязательно ставьте галки

Запретить смену пароля пользователем

Срок действия пароля не ограничен

Заходим на сервер AD (dc01) и в командной строке от имени Администратора пишем:

ktpass -princ HTTP/mydomain.com@MYDOMAIN.COM /mapuser proxy_k /pass ""ПарольОтУчеткиProxy_k"" /out C:\squid.keytab /ptype KRB5_NT_PRINCIPAL /mapop set

Регистр очень важен! В целом во всем проекте все может ничерта не работать, а оказывается где-то неверный регистр..

Получившийся файл переносим с Active Directory на наш прокси сервер в директорию /etc/squid

Предоставляем пользователю, от которого запускается служба Squid права на файл.

chown user-px:user-px /etc/squid/squid.keytab

chmod 640 /etc/squid/squid.keytab

Устанавливаем пакет для поддержки аутентификации:

apt-get install krb5-user

При установке вводите домен ЗАГЛАВНЫМИ буквами.

Делаем копию файла /etc/krb5.conf и открываем его.

Вносим правки:

[libdefaults]

default_realm = YOURDOMAIN.RU

default_keytab_name = /etc/squid/squid.keytab

[realms]

MASTESOFT.LOCAL = {

kdc = dc01.yourdomain.com

kdc = dc02.yourdomain.com

admin_server = dc01.yourdomain.com

default_domain = yourdomain.com

}

[domain_realm]

.yourdomain.com = YOURDOMAIN.RU

yourdomain.com = YOURDOMAIN.RU

Сохраняем файл и проверяем работу.

kinit -kV -p HTTP/proxy_comp.yourdomain.com

Получили сообщение об успешной аутентификации.

Удаляем билет командой.

Kdestroy

Настройка файлов для аутентификации по Kerberos и подготовка сервера закончена."'https://habrastorage.org/getpro/habr/upload_files/53b/dad/fd4/53bdadfd43e0f8d8ddf0ef8c6a1ba6c9.png'"['https://habrastorage.org/getpro/habr/upload_files/50c/668/0ea/50c6680ea3b79d64a81908ba74020710.PNG', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/getpro/habr/upload_files/5a0/57e/4f8/5a057e4f8d4cf1a3638a982d57d418b0.PNG', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/53b/dad/fd4/53bdadfd43e0f8d8ddf0ef8c6a1ba6c9.png', 'https://habrastorage.org/getpro/habr/upload_files/da8/eb9/059/da8eb9059b54a544bd57243f1d8c192a.PNG', 'https://habrastorage.org/getpro/habr/upload_files/53b/dad/fd4/53bdadfd43e0f8d8ddf0ef8c6a1ba6c9.png', 'https://habrastorage.org/getpro/habr/upload_files/238/163/782/238163782d7ca83773e7031cc8f1b91c.PNG']"
6'719888'Разработка кросплатформенного приложения на Qt с использованием нейросетей, обученных на tensorflow'Раз уж Вы заинтересовались данной статьёй, то ожидается, что Вы умеете программировать на с++ с использованием библиотеки Qt и разрабатывать нейросети на Python c использованием библиотеки...'https://habr.com/ru/post/719888/'"Раз уж Вы заинтересовались данной статьёй, то ожидается, что Вы умеете программировать на с++ с использованием библиотеки Qt и разрабатывать нейросети на Python c использованием библиотеки tensorflow.

Соответственно остаётся только понять как использовать обученные Вами нейросетевые модели в Qt проектах.

А сделать нужно следующее:

Скачать и откомпилировать для нужной платформы tensorflow

Скачать и откомпилировать для нужной платформы opencv

Скачать android SDK и настроить Qt для работы с ним

В pro файле Qt указать местоположение директории с заголовочными файлами и сами откомпилированные библиотеки

Написать программу

Скачать и откомпилировать для нужной платформы tensorflow

Скачать исходные коды можно с официального сайта.

Для этого в папке, в которой Вы планируете хранить проекты, выполните (в консоли, конечно) git clone https://github.com/tensorflow/tensorflow.git и командой

git checkout branch_name выберите нужную версию tensorflow.

Для компиляции tensorflow Вам понадобится bazel. Но каждая версия tensorflow требует своей версии basel. Чтобы не париться самому с версиями, стоит установить bazelisk. Для чего скачиваем бинарник с https://github.com/bazelbuild/bazelisk/releases, переименовываем в bazelisk и кладём в системную папку с программами, например в /usr/local/bin (для linux), после чего в командах компиляции вместо bazel пишем bazelisk.

Есть два варианта использования tensorflow:

используя оригинальный tensorflow

используя tensorflow lite

Оригинальный tensorflow

Плюсы:

Использование оригинального файла сохранения модели

Возможность обучать модель

Минусы:

Сложный интерфейс. Тут именно tensorflow без keras, то есть Вы оперируете не понятиями модель, слой, а понятиями вычислительный граф, вычислительная операция

Огромный размер библиотеки около 300 MB

Нет настроек для компиляции под мобильные ОС

Tensorflow lite

Плюсы:

Простой интерфейс, хоть и не такой как keras

Маленький размер библиотеки - несколько мегабайт

Есть настройки компиляции под мобильные ОС

Минусы:

Необходимость преобразовывать формат "".h5"" в формат "".tflite"" (делается одной командой на python).

Могут поддерживаться не все операции (в моей модели таких не было).

Компиляция библиотеки под оригинальный tensorflow

Для компиляции необходимо выполнить следующие команды:

Устанавливаем protobuf:

git clone https://github.com/protocolbuffers/protobuf.git cd protobufgit checkout 3.9.x ./autogen.sh ./confugure make -j$(nproc) sudo make install sudo ldconfig git clone https://github.com/tensorflow/tensorflowcd tensorflow git checkout r2.7 git clone https://github.com/abseil/abseil-cpp.git ln -s abseil-cpp/absl ./absl/

Добавить googleprotobuf*; в tensorflow/tensorflow/tf_version_script.lds

После чего:

./confugure bazelisk build --jobs=10 --verbose_failures -c opt --config=monolithic //tensorflow:libtensorflow_cc.so



Следует отметить, что версия protobuf должна соответствовать версии tensorflow. Я нашёл соответствие по выдаваемой при компиляции tensorflow ошибке.

Компиляция библиотеки под tensorflow lite

Для компиляции необходимо выполнить следующие команды:

git clone https://github.com/tensorflow/tensorflow cd tensorflow git checkout r2.7 ./confugure bazelisk build -c opt --config=android_arm64 --config=monolithic //tensorflow/lite:libtensorflowlite.so



./confugure в интерактивном режиме настроит сборку, если настройка для компиляции под android, Вам потребуется указать местоположение Android NDK, которую вы скачали в составе Android studio.

Здесь android_arm64 - настройки для компиляции под 64 битную версию android.

Замените на android_arm для компиляции под 32 битную версию android.

Уберите --config=android_arm64 для компиляции под ту ОС, в которой Вы ведёте разработку.

Ссылка по теме на официальный сайт https://www.tensorflow.org/lite/android/development

После компиляции появится директория bazel-bin, в которой скомпилированная библиотека будет находится в директории tensorflow/lite

В pro файле проекта на Qt для android следует добавить следующие строки:

INCLUDEPATH += ""Путь к папке с tensorflow""

INCLUDEPATH += ""Путь к папке с tensorflow""/bazel-bin/

INCLUDEPATH += ""Путь к папке с tensorflow""/bazel-tensorflow/external

INCLUDEPATH += ""Путь к папке с tensorflow""/bazel-bin/external/flatbuffers/_virtual_includes/flatbuffers

LIBS += -L""Путь к папке с tensorflow""/bazel-bin/tensorflow/lite -ltensorflowlite

Скачать и откомпилировать для нужной платформы opencv

Выполнить git clone https://github.com/opencv/opencv.git

Перейти на нужную версию git checkout ""Ветка"", для каждой версии opencv есть ветка.

Рядом с директорией opencv создать директорию, например opencv_build, в которой для каждой платформы создать свою директорию.

В директории opencv_build для платформы Android 64 создавать скрипты следующего содержания, заменяя

""Папка куда будет вестись компиляция под конкретную ОС""

""Папка с конкретной версией android NDK""

""Папка с результатом сборки"",

Вашими названиями папок.

# !/bin/bash cd ""Папка куда будет вестись компиляция под конкретную ОС"" rm -R * PATH=$PATH:""Папка с конкретной версией android NDK""/toolchains/llvm/prebuilt/linux-x86_64/bin export ANDROID_HOME=""Папка с SDK"" export ANDROID_SDK_ROOT=""Папка с SDK"" export CMAKE_CONFIG_GENERATOR=""Unix Makefiles"" cmake -DCMAKE_BUILD_TYPE=Debug -DANDROID_NATIVE_API_LEVEL=lastest -DANDROID_ABI=arm64-v8a -DCMAKE_BUILD_TYPE=Debug -G""$CMAKE_CONFIG_GENERATOR"" -DANDROID_ARM_NEON=ON -DANDROID_STL=c++_static -DBUILD_ANDROID_PROJECTS:BOOL=ON -DBUILD_opencv_world:BOOL=OFF -DBUILD_PERF_TESTS:BOOL=OFF -DBUILD_TESTS:BOOL=OFF -DBUILD_DOCS:BOOL=OFF -DWITH_CUDA:BOOL=ON -DBUILD_EXAMPLES:BOOL=OFF -DENABLE_PRECOMPILED_HEADERS=OFF -DWITH_IPP=ON -DWITH_MSMF=ON -DOPENCV_ENABLE_NONFREE:BOOL=ON -DWITH_OPENEXR=OFF -DWITH_CAROTENE=ON \-DINSTALL_CREATE_DISTRIB=ON -DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules -DCMAKE_TOOLCHAIN_FILE=""Папка с конкретной версией android NDK""/build/cmake/android.toolchain.cmake ../../opencv make -j16 cmake --install . --prefix ""Папка с результатом сборки""

Для 32-битной Android платформы нужно arm64-v8a заменить на armeabi-v7a

Для desktop платформы скрипт будет следующий:

#!/bin/bash cd ""Папка куда будет вестись компиляция под конкретную ОС"" rm -R * cmake ../../opencv make -j16 cmake --install . --prefix ""Папка с результатом сборки""

В pro файле проекта следует добавить для desktop следующее:

INCLUDEPATH += ""Папка с результатом сборки""/include/opencv4 LIBS += -L""Папка с результатом сборки""/lib \ -lopencv_dnn \ -lopencv_videoio \ -lopencv_objdetect \ -lopencv_calib3d \ -lopencv_imgcodecs \ -lopencv_features2d \ -lopencv_flann \ -lopencv_imgproc \ -lopencv_core

В pro файле проекта следует добавить для android следующее:

OPENCV_ANDROID = ""Папка с результатом сборки"" INCLUDEPATH += ""$$OPENCV_ANDROID/sdk/native/jni/include"" LIBS += -lmediandkcontains(ANDROID_TARGET_ARCH,armeabi-v7a){ LIBS += \ -L""$$OPENCV_ANDROID/sdk/native/3rdparty/libs/$$ANDROID_TARGET_ARCH"" \ -ltbb \ -lIlmImf } LIBS += \ -L""$$OPENCV_ANDROID/sdk/native/libs/$$ANDROID_TARGET_ARCH"" \ -L""$$OPENCV_ANDROID/sdk/native/staticlibs/$$ANDROID_TARGET_ARCH"" \ -L""$$OPENCV_ANDROID/sdk/native/3rdparty/libs/$$ANDROID_TARGET_ARCH"" \ -lade \ -littnotify \ -llibjpeg-turbo \ -llibwebp \ -llibpng \ -llibtiff \ -llibopenjp2 \ -lquirc \ -ltegra_hal \ -lopencv_dnn \ -lopencv_objdetect \ -lopencv_calib3d \ -lopencv_imgcodecs \ -lopencv_features2d \ -lopencv_flann \ -lopencv_imgproc \ -lopencv_core \ -lopencv_videoio \ -lcpufeatures \ -llibprotobuf \ ANDROID_EXTRA_LIBS = $$OPENCV_ANDROID/sdk/native/libs/arm64-v8a/libopencv_java4.so

Так же для компиляции под desktop tensorflow необходим flatbuffers

Установим его в систему глобально следующими командами:

git clone https://github.com/google/flatbuffers.git cmake -G ""Unix Makefiles"" -DCMAKE_BUILD_TYPE=Release make sudo make install sudo ldconfig

Вы можете установить flatbuffers локально заменив

sudo make install

cmake --install . --prefix ""Папка с результатом сборки"",

а затем с помощью INCLUDEPATH += и LIBS += добавить к проекту Qt

Разработка ПО

Здесь я опишу работу с tensorflow lite

Для работы с tensorflow lite преобразуем модель в его формат:

pred_center_model.save('pred_center_model_full') converter = tf.lite.TFLiteConverter.from_saved_model('pred_center_model_full') # path to the SavedModel directory tflite_model = converter.convert() # Save the model. with open('pred_center_model2.tflite', 'wb') as f: f.write(tflite_model)

Теперь подключим необходимые библиотеки:

#include <opencv2/opencv.hpp> #include ""tensorflow/lite/interpreter.h"" #include ""tensorflow/lite/kernels/register.h"" #include ""tensorflow/lite/c/c_api_types.h""

Теперь загрузим модель:

std::unique_ptr<tflite::FlatBufferModel> m_model; tflite::ops::builtin::BuiltinOpResolver resolver; std::unique_ptr<tflite::Interpreter> interpreter; m_model = tflite::FlatBufferModel::BuildFromFile(""путь к модели""); tflite::InterpreterBuilder builder(*m_model, resolver); TfLiteStatus tatus = builder(&interpreter); interpreter->AllocateTensors();

Если status == kTfLiteOk, то можем выполнять инференс модели.

К сожалению, я не нашёл как получить размерности входного и выходного слоя из самой модели, поэтому их нужно просто знать. В данном примере вход берётся видеофрейм cv:Mat , выходом же будет массив из 9 чисел (вероятностей конкретного класса).

// загружаем данные на входной слой сonst size_t DATA_SIZE 224*224*3 float* input = interpreter->typed_input_tensor<float>(0); auto *from_data = (uint8_t*)frame.data;. copy(from_data, from_data + DATA_SIZE, input); // делаем инференс auto status = interpreter->Invoke(); // разбираем данные с выходного слоя float* output = interpreter->typed_output_tensor<float>(0); if (status == kTfLiteOk) { auto size = 9; int max_idx {0}; float max = output[0]; static const vector<string> emo_names = {""злость"", ""презрение"", ""отвращение"", ""страх"", ""радость"", ""норма"", ""печаль"", ""удивление"", ""неуверенность""}; vector<string> emotions; for (int i = 0; i < size; ++i) { float curr_val = output[i]; if (curr_val > 0.2) emotions.push_back(emo_names[i]); if (curr_val > max) { max_idx = i; max = curr_val; } } return emotions; } else return {""predict error""};

Очень часто распознавать требуется кадры из видеопотока веб камеры или камеры смартфона, что программно одно и тоже. Захват можно делать либо средствами opencv, либо средствами Qt. Делать захват средствами opencv заманчиво, так как с полученным кадром можно удобно делать множество операций, например, вырезать заданную область, но у меня так и не получилось заставить работать захват через opencv под android. Поэтому я сделал захват и вывод видео-потока средствами Qt, а преобразования кадров средствами opencv. Так работает под все платформы.

Для захвата камеры нужно создать 3 объекта:

QScopedPointer<QCamera> m_camera; QVideoSink *m_video_sink{new QVideoSink{this}}; QMediaCaptureSession m_captureSession;

После чего выбрать камеру (например, камеру по умолчанию) и связать данные объекты:

m_camera.reset(QMediaDevices::defaultVideoInput()); m_captureSession.setCamera(m_camera.data()); m_camera->start(); m_captureSession.setVideoSink(m_video_sink);

После чего периодически опрашивать видеопоток и преобразовывать изображение в cv:Mat:

m_curr_image = m_video_sink->videoFrame().toImage(); m_frame = QImage2Mat(m_curr_image);

Вот функции преобразования из QImage в cv::Mat и обратно:

using namespace cv; QImage Mat2QImage(cv::Mat const& src) { cv::Mat temp; // make the same cv::Mat cvtColor(src, temp, COLOR_BGR2RGBA); // cvtColor Makes a copt, that what i need QImage dest((const uchar *) temp.data, temp.cols, temp.rows, temp.step, QImage::Format_RGB32); dest.bits(); // enforce deep copy, see documentation // of QImage::QImage ( const uchar * data, int width, int height, Format format ) return dest; } cv::Mat QImage2Mat(QImage const& src) { cv::Mat tmp(src.height(),src.width(),CV_8UC4,(uchar*)src.bits(),src.bytesPerLine()); cv::Mat result; // deep copy just in case (my lack of knowledge with open cv) cvtColor(tmp, result, COLOR_RGBA2BGR); return result; }

Кроме своих моделей полезно использовать чужие, уже обученные, например, в opencv встроена модель детекции лиц cv::dnn::Net, вот пример:

auto prepared_frame = cv::dnn::blobFromImage(frame, 1.0, Size(300,300), Scalar(104.0, 177.0, 123.0)); m_face_detect_model.setInput(prepared_frame); Mat output = m_face_detect_model.forward(); const int SHIFT = 7; using currTp = Vec<float,SHIFT>; auto it = output.begin<currTp>(); while(it != output.end<currTp>()) { currTp pred = *it; if (pred[2] < 0.5) break; int x = pred[3]*m_img_width; int y = pred[4]*m_img_height; int width = (pred[5] - pred[3])*m_img_width; int height = (pred[6] - pred[4])*m_img_height; coords.push_back(Rect{x, y, width, height}); it+=SHIFT; }

Правда под Android модели opencv у меня работали крайне неэффективно, раз в 40 хуже, чем обученные мной tensorflow модели. Если кто-то знает как это исправить пишите, буду рад.

Tensorflow предоставляет кучу готовых, обученных моделей компьютерного зрения в проекте mediapipe и под python их можно удобно использовать, но под с++ планируется, что Вы интегрируетесь в mediapipe, а не наоборот, так как планируется, что если Вы используете с++, то Вам необходим минимальный объём приложения.

Идея mediapipe заключается в том, что пишется текстовый файл в специальном формате, в котором описывается путь данных от ввода, например, с камеры, до вывода на экран устройства этот файл подаётся на вход программе, реализующей общий код приложения. Если какое-то преобразование не существует в mediapipe, то пишется класс наследуемый от mediapipe::CalculatorBase, в котором реализуется данное преобразование. Подробнее можно прочитать по ссылке. Но это уже тема отдельной статьи.

Вот ссылка на готовый проект

В нём есть ветки с разными реализациями."'https://habr.com/share/publication/719888/4ecbfba1a7f6c78a64259ea930aab09c/'"['https://habr.com/share/publication/719888/4ecbfba1a7f6c78a64259ea930aab09c/', 'https://mc.yandex.ru/watch/24049213']"
7'719886'Укрощение строптивых: как управлять конфликтами по-русски'Давайте признаем, после ковида мы все стали эмоциональнее, вспыльчивее и, кажется, что глупее (я сужу по себе, но есть исследование Lancet ), дополнительно фоном происходит стрессовая информационная...'https://habr.com/ru/post/719886/'"Давайте признаем, после ковида мы все стали эмоциональнее, вспыльчивее и, кажется, что глупее (я сужу по себе, но есть исследование Lancet), дополнительно фоном происходит стрессовая информационная накачка от СМИ и все это в конечном итоге выливается в конфликты. Тема эта не новая, однако я не могу пройти мимо не указав на то, как тяжело ложится американская ментальность, пронизывающая все статьи об управлении персоналом на российский быт разработчиков.

Определимся с объектами и субъектами нашего исследования:

- объект: конфликт;

- субъекты конфликта: сторона А(видимо прав), сторона Б(видимо не прав), конфликтолог (руководитель, которому не повезло начитаться об управлении конфликтами).

Существующая методология предписывает конфликтологу выдать сотрудникам А и Б обратную связь, аккуратно внедрившись в понимание сути спора.

Для постановки задач или выдачи критики сотрудникам принято строить диалог методом бургера. Cуть метода: чтобы не обидеть человека ему выдается критика обрамленная словами по следующему шаблону:

- cлой лести;

- пилюля критики;

- предложение исправиться, к которому, в идеале, субъект критики отнесется как к своему собственному решению;

Пример бургерной постановки задачи сотруднику:

-ты гениальный программист;

и при этом форматируешь tab'ами проект, в котором с 1986 года все кодили пробелами;

я бы хотел, чтобы ты обновил в ноушене наши соглашения о форматировании и уведомил об этом всех субподрядчиков, но может быть есть какое-то иное решение?

- я могу не форматировать табами!

Заметим, у методологии есть проблемы и без российских реалий:

Конфликтолог выступает в роли гуру, непредвзятого судьи в конфликте, но для этого надо обладать или харизмой, или авторитетом для А и Б в теме спора. Иначе это выглядит как праздное любопытство, и мало того - внезапно можно стать стороной конфликта: если спорщики запускают в компании дезинформацию о позиции руководителя, распространяют слухи, то по результату, несмотря на изначально нейтральную позицию, конфликтолог в конфликте погрязнет полностью. В угоду равенству и братству конфликтолог не ищет виновного в споре, для толерантности конфликт вообще называют 'ситуацией', а ведь на самом деле блеймсторминг - это не плохо. В инженерии, часто кто-то из спорящих все-таки прав и это зачастую вычислимо: навскидку можно предложить оценить позиции через риск-менеджмент последствий действий по плану сотрудника А и сотрудника Б (см. Вяткин В. Н. Риск-менеджмент) или же предложить применение математики равновесия по Нэшу, если есть материальная выгода в сути спора. Обрабатываемый спорщик может отказаться от бургера, мало того, если у сотрудников А и Б широкий кругозор, они будут знать о технике бургера и вот тут уже гуру оказывается в нелепом положении, ведь с позиции кормящегося в бургер можно сыграть в обратную сторону: либо размотав его на составляющие, спросить почему не хватило смелости сказать напрямую, либо бесконечно затягивая выдачу ""своего"" решения, которое жаждет услышать гуру.

От себя скажу, побывав во всех ролях и конфликта и выдачи обратной связи, применение практик ""эффективной фасилитации"" к тому, кто о техниках в курсе, воспринимается им, как халтурное отношение к тематике озвучиваемой проблемы, диалог с конфликтологом идёт словно с ботом. Управление по этим книжкам идёт очень странно, мне кажется я нашел этому объяснение: вся суть в культуре популярности на западе, неосторожно уязвив коллегу в его социальном рейтинге, вы получаете невероятный спектр спецэффектов с истериками, методика рассчитана на сглаживание последствий этого социокультурного феномена, вместо рационализации в достижении цели управления.

И что же делать?

Из того что работало у меня на практике в инженерной среде - соберите зубы в кулак и будьте честными, опишите свою мотивацию(ипотека) и условия, в которых принимаете решение(трое детей), в 90% случаев последовательная аргументация приводит к успеху, если за вами правда. Бургер работает на студентах курса до третьего."'https://habrastorage.org/getpro/habr/upload_files/006/2ce/aad/0062ceaad4c582af94c1ee18d1bc3821.jpeg'"['https://habrastorage.org/getpro/habr/upload_files/006/2ce/aad/0062ceaad4c582af94c1ee18d1bc3821.jpeg', 'https://mc.yandex.ru/watch/24049213']"
8'719884'Трассировка кабельной линии по дну водоема'После завершения строительства линий связи от подрядчика, как правило, всегда проблема добиться качественной исполнительной документации. Документация с которой мне приходилось сталкиваться по долгу...'https://habr.com/ru/post/719884/'"После завершения строительства линий связи от подрядчика, как правило, всегда проблема добиться качественной исполнительной документации. Документация с которой мне приходилось сталкиваться по долгу службы представляла собой очень печальное зрелище. Очерченная линия с примерной привязкой к местности очень не информативна, когда нужно найти кабельную линию хотя бы с точностью в 1 метр. Как следствие куча времени тратится на поиски места залегания проложенной кабельной линии.

Задача усложняется если кабель проложен по дну водоема. Есть такой способ прокладки ВОЛС, когда кабель укладывают на дно и постепенно погружается в ил, где потом работает годами.

И вот настал день, когда этот самый водоем решили осушить, почистить и углубить дно. Не нужно рассказывать, что такие работы проводятся с применением спецтехники и повреждения кабельной линии было не избежать.

Без трассировки линии связи не обойтись. В этот процесс входит измерение глубины залегания кабеля и его местонахождения. Поскольку кабель много лет лежит в илистом дне трасса виляет из стороны в стороны, а глубина везде разная. Поэтому для более точных результатов трассировки вешки приходилось ставить гораздо чаще, чем обычно.

Первый сюрприз не заставил себя долго ждать. Много всего интересного можно найти на дне водоемов и к сожалению это не клад, а оптическая муфта. Она то и будет отправной точкой нашей трассировки.

Трассоискатель ПОИСК-410 Мастер, незаменимый прибор для этих дел.

Прибор состоит из двух частей: генератора и приемника. У него есть два режима работы: активный и пассивный. Все просто активный режим с подключением генератора, а пассивный без подключения. Мы будем использовать активный режим, такой способ самый точный. Итак подключим генератор к кабельной линии. Поскольку мы имеем дело с оптическим бронированным кабелем, подключение произведем к броне. По кабелю потечет переменный ток, который создаст магнитное поле и трассо-дефектоискатель уловит его.

На картинке генератор ГК-310А-2 производства СвязьПрибор

Трассоискатель

При поиске кабельной трассы надо ориентироваться на показания дисплея и характерный звук, который указывает на минимум и максимум магнитного поля, созданного в броне кабеля.

Из инструкции прибора ПОИСК 410 СВЯЗЬПРИБОР

Немного теории.

Прямое подключение к кабельной линии залог успешной трассировки. При заземлении на другом конце кабельной линии уровень сигнала самый высокий.

Если обратить внимание на картинку выше, то увидим, что максимальный уровень сигнала будет именно в тот момент, когда мы окажемся непосредственно над кабелем. Звуковой индикатор на приборе известит нас об этом событии.

Очень важно!!!

Правильное подключение генератора к кабелю равно успешному поиску. Если в кабеле не будет тока, который создаст магнитное поле, то кабеля вам не найти, как бы вы не старались.

Чтобы организовать контур для распространения сигнала, нужно вывести броню на щиток заземления на дальнем конце кабеля, а также подключить землю к разъему на генераторе.

Вывод брони на щиток заземления на дальнем конце кабеля.

Схема подключения генератора.

В общем цепь должна приобрести такой вид: красный разъем на броню трассируемого кабеля, синий разъем на землю.

Искать кабель можно как по максимуму так и по минимуму сигнала. На дисплее выводится информации об уровне сигнала, глубине залегания, силе тока и уровне заряда аккумуляторной батареи. Кроме того есть шкала настройки чувствительности приемника.

Пиковые значения или даже сигнал «перегрузка» известят вас о том , что кабельная линия прямо под вами. Сигнал «перегрузка» возникает если выставлена большая чувствительность приемника.

Используя эти данные прямо над кабелем устанавливаем отметки (вешки). Они будут ориентирами для спецтехники при проведении земляных работ. Такие вешки показаны на фото.

Наш экспедиционный корпус к месту трассировки преодолел сложные грязевые преграды и в этом нам помогли надежные помощники в лице: УАЗ Патриот, УАЗ Буханка, УАЗ Фермер. Нас еще ждали препятствия на пути в дальнейшем, но суровый отечественный автопром с легкостью их преодолел и без помощи трактора.

Как говорится у нас в стране три вида погоды: грязь, грязь засохла и грязь замерзла! Наступило третье состояние, пришла зима. Именно зимой начались масштабные работы по очистке и углублению дна.

Трассировка закончена успешно. Кабельная линия осталась цела и невредима.

Ну а мы получили уникальный опыт по трассировке линии по дну водоема.

Надеюсь, вы дочитали до конца. Если у вас есть вопросы, дайте мне знать в комментариях."'https://habrastorage.org/getpro/habr/upload_files/5b1/213/a41/5b1213a4120c1daee5a69d11f3bbb60d.jpg'"['https://habrastorage.org/r/w1560/getpro/habr/upload_files/cdd/54f/f2a/cdd54ff2a54c953981c8f28e741bbf5b.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/46a/883/fb7/46a883fb7c9b96014e8539663432ec67.png', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/getpro/habr/upload_files/5b1/213/a41/5b1213a4120c1daee5a69d11f3bbb60d.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/738/b29/6a5/738b296a5bf5daadee1bfcf56f255393.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/e48/869/309/e488693093d7e32614653cc32b243266.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/404/60d/800/40460d8008d4af9d3fc53d051150d1b0.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/5fd/4fe/473/5fd4fe4737cad4a6724ccdff2290d6bc.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/443/32a/49f/44332a49f723d5c2a6c1cb7d5f57f9d9.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/c76/3eb/d9b/c763ebd9bbc00be370250fea25d47be1.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/abb/801/447/abb801447cad6c537fd44a27466f07e4.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/24e/3bc/541/24e3bc541118499d9fe336acc0af10c5.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/297/0a5/710/2970a57105e20058249cc78a633a5724.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/7d9/188/ca1/7d9188ca17127e9f7047c2b7547fbb67.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/bf9/270/d0f/bf9270d0f762a4d0acd8a1e1479a04a3.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/f0e/dcb/e54/f0edcbe548ca9d97ced6a18138a25e5e.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/a55/44b/ff8/a5544bff8c8be72b8d766a3093abf299.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/985/897/0f1/9858970f12917b125dd4059ade4d93b3.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/7e8/001/7f2/7e80017f24654c79a12f52f626d3deab.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/ea1/6b4/6b2/ea16b46b22bf20fbfb5d563a0e1ed0d7.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/ac7/482/0cb/ac74820cb2247505dea52dc88b48bbdb.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/ee1/64a/333/ee164a333b71b0537b79aa23a5216da3.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/8f7/2d3/344/8f72d3344d8b01feeb2190efe7b49983.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/164/39b/18a/16439b18a3113dd641c468b07fb12d65.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/484/17d/edf/48417dedf078c47831789b1daa545bd2.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/02b/689/84c/02b68984c37b0c2eb559fe4cd4a9cb1d.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/eb9/ed0/cae/eb9ed0cae94d41aca5d545bb19f3570e.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/f2f/d0a/3c3/f2fd0a3c315c2e3971eca28f2978acd9.png']"
9'719882'Как кастомизировать стандартные страницы ошибок'В процессе настройки нового веб-сервера, вы можете захотеть чтобы страницы ошибок отображались в красивом виде, вместо стандартного. Также иногда страницы ошибок должны быть в том же оформлении, что...'https://habr.com/ru/post/719882/'"В процессе настройки нового веб-сервера, вы можете захотеть чтобы страницы ошибок отображались в красивом виде, вместо стандартного. Также иногда страницы ошибок должны быть в том же оформлении, что и основной сайт и/или предоставлять пользователям какую-то дополнительную информацию, такую как, например, контакты, альтернативные способы решения возникшей проблемы или что-то иное.

Стандартный вид Ошибки 404 в Nginx

Для упрощения процесса, я создал небольшую утилиту (прямая ссылка на проект в GitHub), по сути Node.js скрипт, которая позволяет создавать статические страницы ошибок в собственном дизайне и со своими текстовыми сообщениями. По умолчанию, утилита содержит только один шаблон в минималистичном дизайне (с поддержкой доступности и адаптивности, на сколько это возможно в такой простой странице). Но если вас не устраивает такой дизайн, то вы можете с легкостью изменить его, путем создания собственного: со своими стилями, шрифтами, изображениями и текстами.

Пример страницы для Ошибки 404

Для возможности создания страниц на других языка, утилита позволяет использовать собственные языковые пакеты, включающие свои кастомные текстовые сообщения.

Для упрощения интеграции, утилита автоматически создает сниппет с конфигурацией веб сервера, который легко может быть добавлен в конфигурацию вашего веб сервера. На текущий момент сниппет создается только для Nginx. Другие виды серверов будут добавлены позже (в качестве альтернативы, вы можете создать Pull Request с таким улучшениями, либо оформить Feature Request).

Использование

В базовом сценарии использования, всё что требуется, это лишь склонировать себе на компьютер репозиторий проекта, установить зависимости Node.js, запустить команду сборки, скопировать полученный результат к себе на сервер и обновить конфигурацию сервера.

$ git clone git@github.com:sapachev/error-pages.git … $ npm install --production … $ npm run build … INFO: Start building process INFO: Flush build directory '/home/error-pages/dist' INFO: Compile pages from source data: • /home/error-pages/dist/400.html • /home/error-pages/dist/401.html • /home/error-pages/dist/403.html • /home/error-pages/dist/404.html • /home/error-pages/dist/410.html • /home/error-pages/dist/500.html • /home/error-pages/dist/502.html • /home/error-pages/dist/503.html • /home/error-pages/dist/504.html INFO: Compile web servers config snippets from source data: • /home/error-pages/dist/nginx-error-pages.conf INFO: Build Tailwind CSS styles INFO: Run 'INPUT=""/home/error-pages/themes/minimalistic/@assets/css/main.twnd.css"" OUTPUT=""/home/error-pages/dist/@assets/css/main.css"" npm run build:tailwind' command INFO: Tailwind CSS styles were built INFO: Copying assets to '/home/error-pages/dist/@assets' directory INFO: Building process was completed in 1.727s

Продвинутое использование

В дополнение к шагам базового сценария, вы можете улучшить скомпилированные страницы меняя части, из которых они собираются: шаблоны, стили, тексты, а также сниппеты конфигурации.

Основная конфигурация утилиты хранится в файле config.json в корневой папке, которую можно менять в соответствии со своими требованиями:

{ ""tailwind"": true, ""theme"": ""minimalistic"", ""locale"": ""en"" }

Шаблоны

Все шаблоны хранятся в папке themes , где стандартной темой является minimalistic , которую можно изменить или добавить новую. Каких-то особых требований к шаблонам страниц нет: каждый шаблон является обыкновенным HTML документом, с внедренными переменными, на месте которых будут текстовки из файлов локализации. Для обработки внедренных переменных используется библиотека mustache.js. Таким образом, если нужно реализовать какую-то особенную логику в своих шаблонах, то вы можете ознакомиться с документацией этой библиотеки для определения имеющихся возможностей шаблонизации.

После добавления своего шаблона, просто укажите его в файле конфигурации, чтобы скомпилировать страницы с его использованием.

Стили

Стилизация шаблонов базируется на фреймворке Tailwind CSS. С помощью этого фреймворка, можно быстро описывать стили страниц без необходимости писать отдельный CSS код. Точкой входа для стилей Tailwind должен быть файл themes/<name>/@assets/css/main.twnd.css . Из него в дальнейшем будет создан файл main.css , который содержит скомпилированные и минифицированные стили. В дополнение, можно настроить Tailwind с помощью создания кастомной конфигурации, расположенной в файле theme.tailwind.config.js в корне папки с темой, и описать в ней любые опции Tailwind. Полный список опций Tailwind доступен в документации самого Tailwind.

Однако, если по каким-то причинам использование Tailwind не требуется (например, стили уже описаны ранее в CSS), компиляцию стилей Tailwind можно отключить в основной конфигурации утилиты (файл config.json ). В этом случае шаг сборки стилей будет просто пропущен без какого-либо влияния на финальный результат.

Текстовые сообщения и Локализация

Все текстовые сообщения хранятся в JSON файлах, разделенных по признаку языка, и расположены в папке src . Каждая страница создается из соответствующего ей файла локализации вида <Код HTTP>.json ( <Код HTTP> – это число, соответствующее коду ошибки HTTP). Таким образом, если нужно создать страницу для кода, который еще не описан, то просто создайте соответствующий JSON файл, содержащий описание этого статуса в соответствующих свойствах.

Любой файл локализации может быть расширен любым количеством дополнительных свойств, которые вам нужно отобразить на странице. Для определения общих свойств, вы можете использовать файл common.json – свойства из этого файла будут применены к каждой странице.

Для локализации страниц, просто создайте новую папку в директории src , содержащую JSON файлы с текстами страниц. Создавая JSON файлы, вы можете описать любой набор HTTP кодов (например, только для 400-ых ошибок) – просто следуйте конвенции именования, и не забывайте выделять общие тексты в файл common.json .

Конфигурации сервера

В процессе работы, Утилита автоматически создаст сниппет для вашего сервера, который будет содержать лишь те страницы, которые были созданы. Данный сниппет будет содержать настройки обрабатываемых ошибок, и указывать на страницы, которые будут их представлять. Как было сказано ранее, на данный момент только Nginx поддерживается.

Для использования полученных страниц, остается только скопировать на сервер все файлы из папки dist и включить использование сниппета в уже существующей конфигурации сервера. В соответствии с шаблоном сниппета, все страницы должны быть расположены в папке /usr/share/nginx/html/error-pages . В случае если настройки в снипетта не подходят, то вы можете отредактировать шаблон сниппета в папке snippets . Так же как и для тем оформления, шаблоны конфигураций поддерживают mustache.js, тем позволяя реализовать в шаблоне любую логику (списки, условия и т.д.).

Сам по себе конфиг, я рекомендую располагать в папке /etc/nginx/snippets/ , а для его подключения использовать строчку конфигурации: include /etc/nginx/snippets/nginx-error-pages.conf; . Разумеется, это не более чем рекомендация, т.к. в реальности всё может быть иначе или сложнее.

Ниже приведен простой пример конфигурации веб-сервера с включенным в нее сниппетом кастомных ошибок:

server { server_name example.com; access_log /var/log/nginx/example.access.log; include /etc/nginx/snippets/nginx-error-pages.conf; location / { root /data/www; } }

Демо

Посмотреть как выглядят страницы ошибок можно на моем сайте по следующим ссылкам:

Сообщение об ошибках и запрос новых функций

Код утилиты нельзя назвать каким-то сложным, однако, несмотря на этот факт, все значимые части покрыты юнит-тестами. Впрочем, это не является гарантией отсутствия каких-либо ошибок, поэтому если вы столкнетесь с какими-то проблемами, то, пожалуйста, сообщите мне о них, через создание Issue в репозитории проекта: https://github.com/sapachev/error-pages/issues

Также приветствуется создание запросов новых функций, которые вы хотели бы увидеть в данной утилите.

Участие в разработке

Проект открыт для всех желающих, и если у вас есть идеи, а главное желание и возможности их реализовать, то с радостью рассмотрю их в виде Pull Request. Со своей стороны готов предоставить вам поддержку в реализации вашей задумки. Не стесняйтесь спрашивать меня о коде, и возможных решениях вашей идеи."'https://habrastorage.org/getpro/habr/upload_files/3ce/869/57d/3ce86957d97db58b6b6f476e9f17de0e.png'"['https://habrastorage.org/r/w1560/getpro/habr/upload_files/8d9/d23/525/8d9d235258fec1d7d9a6497cf9fc5e7c.png', 'https://habrastorage.org/r/w32/getpro/habr/avatars/dff/8c0/ac4/dff8c0ac4c9dfec1452cab7a4a88db1d.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/8a8/737/868/8a87378689e6102241cd16c598a085c7.png', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/getpro/habr/avatars/dff/8c0/ac4/dff8c0ac4c9dfec1452cab7a4a88db1d.jpg', 'https://habrastorage.org/getpro/habr/upload_files/3ce/869/57d/3ce86957d97db58b6b6f476e9f17de0e.png']"
10'719744'[Перевод] Руководство по возможностям языка Java версий 8-19'Вы можете использовать это руководство для получения практической информации о том, как найти и установить последнюю версию Java, понять различия между дистрибутивами Java (Adoptium, AdoptOpenJdk,...'https://habr.com/ru/post/719744/'"Вы можете использовать это руководство для получения практической информации о том, как найти и установить последнюю версию Java, понять различия между дистрибутивами Java (Adoptium, AdoptOpenJdk, OpenJDK, OracleJDK и т. д.), а также получить обзор функций языка Java, включая версии 8-19.

Примечание переводчика: 11 апреля 2021 г. был опубликован перевод Руководство по возможностям Java версий 8-16. Вашему вниманию предлагается обновленная версия руководства от 28 октября 2022 г.

Практическая информация

Для начала давайте рассмотрим некоторые распространенные практические вопросы, которые возникают у людей при попытке выбрать правильную версию Java для своего проекта.

TL; DR Мне нужна только ссылка для скачивания, и я знаю обо всем остальном. Куда мне следует идти?

Перейдите на сайт Adoptium , выберите последнюю версию Java, загрузите и установите ее. Затем вернитесь к этому руководству, чтобы, возможно, еще кое-что узнать о версиях Java.

TL;DR (англ. too long; didn't read — слишком длинно, не читал)

Какая последняя версия Java?

По состоянию на сентябрь 2022 года Java 19 является последней выпущенной версией Java.

В марте 2023 года за ней последует Java 20. Последней версией Java с долгосрочной поддержкой (LTS) является Java 17, выпущенная в сентябре 2021 года.

Какую версию Java следует использовать?

Новые версии Java теперь выходят каждые 6 месяцев. Таким образом, Java 20 запланирована на март 2023 года, Java 21 - на сентябрь 2023 года и так далее. В прошлом циклы выпуска Java были намного длиннее, до 3-5 лет. Данный график демонстрирует, это:

С таким количеством выходящих новых версий имеются следующие основные сценарии использования:

Унаследованные проекты в компаниях часто застряли на использовании Java 8 (см. раздел «Почему компании все еще застряли на Java 8?» ниже). Следовательно, вы также будете вынуждены использовать Java 8.

Некоторые устаревшие проекты даже застряли на Java 1.5 (выпущен в 2004 г.) или 1.6 (выпущен в 2006 г.) - извините, друзья, я вам сочувствую!

Если вы следите за тем, чтобы использовать самые последние IDE, фреймворки и инструменты сборки и начинаете новый проект, вы можете без колебаний использовать Java 17 (LTS) или даже последнюю версию Java 19.

Есть особая область разработки Android, где версия Java в основном застряла на Java 7 с определенным набором возможностей Java 8 . Или вы переходите на использование языка программирования Kotlin.

Почему компании все еще застряли на Java 8?

Существует целый ряд причин, по которым компании все еще придерживаются Java 8. Вот некоторые из них:

Инструменты сборки (Maven, Gradle и т. д.) и некоторые библиотеки изначально содержали ошибки с версиями Java > 8 и нуждались в обновлениях. Например, некоторые инструменты сборки, такие как Maven, выводили предупреждения об «рефлективном доступе» при сборке Java-проектов, которые просто «кажутся не готовыми», даже если сборки в порядке.

Вплоть до Java 8 вы в практически использовали сборки Oracle JDK, и вам не нужно было заботиться о лицензировании. Однако в 2019 году Oracle изменила схему лицензирования , что привело к тому, что Интернет сошел с ума от множества статей, в которых говорилось, что «Java больше не является бесплатной», - и последовала изрядная путаница. Однако на самом деле это не является проблемой, о которой вы узнаете в разделе «Дистрибутивы Java» этого руководства.

Некоторые компании придерживаются политики использования только LTS-версий и полагаются на поставщиков своих ОС, которые должны предоставить им эти сборки, что требует времени.

Подводя итог: у вас есть сочетание практических вопросов (обновление ваших инструментов, библиотек, фреймворков) и политических проблем.

Почему некоторые версии Java, например 8, также называются 1.8?

В версиях Java до 9 просто была другая схема именования. Так, Java 8 также может называться 1.8, Java 5 может называться 1.5 и т. д. Когда вы вводили команду java -version, с этими версиями вы получали следующий результат:

c:\Program Files\Java\jdk1.8.0_191\bin>java -version java version ""1.8.0_191"" (1) Java(TM) SE Runtime Environment (build 1.8.0_191-b12) Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)

Это просто означает Java 8. С переходом к основанным на времени выпускам с Java 9 схема именования также изменилась, и версии Java больше не имеют префикса 1.x. Теперь номер версии выглядит следующим образом:

c:\Program Files\Java\jdk11\bin>java -version openjdk version ""11"" 2018-09-25 (1) OpenJDK Runtime Environment 18.9 (build 11+28) OpenJDK 64-Bit Server VM 18.9 (build 11+28, mixed mode)

В чем разница между версиями Java? Должен ли я изучать какую-то конкретную версию?

Придя из других языков программирования с большими перерывами между выпусками, как, например, Python 2–3, вы можете задаться вопросом, применимо ли то же самое к Java.

В этом отношении Java является особенной, поскольку она имеет полную обратную совместимость. Это означает, что ваша программа на Java 5 или 8 гарантированно будет работать на виртуальной машине Java 8–19 — за некоторыми исключениями, о которых вам пока не нужно беспокоиться.

Очевидно, что это не работает, наоборот, скажем, ваша программа полагается на функции Java 19, которые просто недоступны в Java 8 JVM.

Это означает несколько вещей:

Вы не просто «выучите» конкретную версию Java, например 12.

Скорее, вы получите хорошую основу для всех языковых функций вплоть до Java 8. Это послужит хорошей базой.

А затем, из такого руководства, как это, вы можете узнать, какие дополнительные возможности появились в Java 9–19, и будете использовать их всегда, когда это возможно.

Каковы примеры этих новых возможностей новых версий Java?

Посмотрите раздел «Возможности Java 8-19» ниже.

Но, как правило: старые, более длинные циклы выпуска (3–5 лет, вплоть до Java 8) означали большое количество новых функций в каждом выпуске.

Шестимесячный цикл выпуска означает гораздо меньшее количество функций на один выпуск, поэтому вы можете быстро освоить языковые возможности Java 9–19.

В чем разница между JRE и JDK?

До сих пор мы говорили только о «Java». Но что именно означает «Java»?

Во-первых, необходимо различать JRE (Java Runtime Environment) и JDK (Java Development Kit).

Исторически сложилось так, что вы загружали только JRE, если вас интересовал только запуск программ на Java. JRE включает, помимо прочего, виртуальную машину Java (JVM) и инструмент командной строки «java».

Для разработки новых программ на Java необходимо было загрузить JDK. JDK включает в себя все, что есть в JRE, а также компилятор javac и несколько других инструментов, таких как javadoc (генератор документации Java) и jdb (отладчик Java).

Теперь, почему я говорю в прошедшем времени?

Вплоть до Java 8 веб-сайт Oracle предлагал JRE и JDK в качестве отдельных файлов загрузки, хотя JDK также всегда включал JRE в отдельной папке. В Java 9 это различие практически исчезло, и вы всегда загружаете JDK. Структура каталогов JDK также изменилась, так как в ней больше не было явной папки JRE.

Поэтому, несмотря на то что некоторые дистрибутивы (см. Раздел «Дистрибутивы Java») по-прежнему предлагают отдельную загрузку JRE, похоже, наметилась тенденция предлагать только JDK. Следовательно, с этого момента мы будем использовать Java и JDK как взаимозаменяемые понятия.

Как установить Java или JDK?

Пока не обращайте внимания на образы Java-Docker, оболочки .msi или пакеты для конкретной платформы. В конце концов, Java — это просто ZIP-файл, ни больше, ни меньше.

Поэтому все, что вам нужно сделать, чтобы установить Java на свой компьютер, — это разархивировать файл jdk-{5-19}.zip. Для этого даже не нужны права администратора.

Ваш распакованный файл Java будет выглядеть следующим образом:

Directory C:\dev\jdk-11 12.11.2019 19:24 <DIR> . 12.11.2019 19:24 <DIR> .. 12.11.2019 19:23 <DIR> bin 12.11.2019 19:23 <DIR> conf 12.11.2019 19:24 <DIR> include 12.11.2019 19:24 <DIR> jmods 22.08.2018 19:18 <DIR> legal 12.11.2019 19:24 <DIR> lib 12.11.2019 19:23 1.238 release

Магия происходит в каталоге /bin, который в Windows выглядит следующим образом:

Directory C:\dev\jdk-11\bin ... 12.11.2019 19:23 272.736 java.exe ... 12.11.2019 19:23 20.832 javac.exe ...

Поэтому все, что вам нужно сделать, это разархивировать этот файл и поместить каталог /bin в переменную PATH, чтобы вы могли вызывать команду java из любого места.

Если вам интересно, установщики с графическим интерфейсом, такие как Oracle или Adoptium, выполняет для вас распаковку и изменение переменной PATH, вот и все.

Чтобы убедиться, что вы правильно установили Java, вы можете просто выполнить команду java -version. Если результат выглядит так, как показано ниже, вы готовы начать разработку.

openjdk version ""11"" 2018-09-25 OpenJDK Runtime Environment 18.9 (build 11+28) OpenJDK 64-Bit Server VM 18.9 (build 11+28, mixed mode)

Теперь остался один вопрос: откуда вам взять этот ZIP-файл с Java? Что подводит нас к теме дистрибутивов.

Дистрибутивы Java

Есть множество сайтов, предлагающих скачать Java (читай: JDK), и непонятно, «кто что предлагает и с какой лицензией». Этот раздел прольет на это некоторый свет.

Проект OpenJDK

Что касается исходного кода Java (читайте: исходного кода для вашего JRE / JDK), существует только один, находящийся на сайте проекта OpenJDK .

Однако это всего лишь исходный код, а не распространяемая сборка (представьте: ваш файл .zip со скомпилированной командой java для вашей конкретной операционной системы). Теоретически мы с вами могли бы создать сборку из этого исходного кода, назвать ее, скажем, MarcoJDK и начать ее распространять. Но нашему дистрибутиву не хватило бы сертификации, чтобы легально называть этот дистрибутив совместимым с Java SE.

Вот почему на практике есть несколько поставщиков, которые действительно создают эти сборки, получают их сертификацию (см. TCK ) и затем распространяют их.

И хотя поставщики не могут, скажем, удалить метод из класса String до выпуска новой сборки Java, они могут добавить брэндинг (ура!) или добавить некоторые другие утилиты (например, CLI), которые они считают полезными. Но в остальном исходный код одинаков для всех дистрибутивов Java.

Сборки OpenJDK (от Oracle) и OracleJDK

Одним из производителей, который собирает Java из исходников, является Oracle. Это приводит к появлению двух разных дистрибутивов Java, что поначалу может казаться очень запутанными.

Сборки OpenJDK от Oracle (!). Эти сборки бесплатны и не брендированы, но Oracle не будет выпускать обновления для более старых версий, скажем, Java 15, как только выйдет Java 16. OracleJDK , которая является фирменной, коммерческой сборкой, выпускаемая начиная с изменения лицензии в 2019 году. Это означает, что ее можно использовать бесплатно во время разработки, но вам придется заплатить Oracle при ее использовании в производственной среде. За это вы получаете более длительную поддержку, то есть все обновления дистрибутива и номер телефона, по которому можно позвонить, если с вашей JVM будут проблемы.

Исторически (до появления Java 8) между сборками OpenJDK и OracleJDK существовали фактические различия в исходных текстах, и можно было сказать, что OracleJDK был «лучше». Но на сегодняшний день обе версии практически одинаковы, с небольшими отличиями .

Впрочем все сводится к тому, требуется ли вам платная коммерческая поддержка (номер телефона) для используемой версии Java.

Eclipse Temurin от Adoptium (ранее AdoptOpenJDK)

В 2017 году группа членов Java User Group, разработчиков и поставщиков (Amazon, Microsoft, Pivotal, Redhat и другие) основала сообщество под названием AdoptOpenJDK. С августа 2021 года проект AdoptOpenJDK переехал в новый дом и теперь называется проектом Eclipse Adoptium .

Adoptium предоставляет бесплатные, надежные сборки OpenJDK, называемые Eclipse Temurin с более длительной доступностью/обновлениями для различных операционных систем, архитектур и версий.

Настоятельно рекомендую ее, если вы хотите установить Java.

Azul Zulu, Amazon Corretto, SAPMachine

Полный список сборок OpenJDK можно найти на сайте OpenJDK Wikipedia . Среди них Azul Zulu , Amazon Corretto , а также SapMachine и это лишь некоторые из имеющих. Проще говоря, различия сводятся к тому, что у вас есть различные варианты поддержки/ гарантии обслуживания.

Тем не менее, если вы, например, работаете на AWS, имеет смысл просто использовать их сборки Amazon Corretto OpenJDK, если они предлагают версию, которую вы хотите использовать.

Полный обзор дистрибутива OpenJDK

Рафаэль Винтерхальтер ( Rafael Winterhalter ) составил отличный список всех доступных сборок OpenJDK, включая их описания: ОС, архитектуру, лицензирование, окна поддержки и обслуживания.

Посмотрите его здесь: https://rafael.codes/openjdk/ .

Рекомендация

Повторим с еще раз, что в 2022 и 2023 годах, если у вас нет специфических требований, возьмите файл jdk.zip (.tar.gz/.msi/.pkg) с сайта https://adoptium.net (под названием Eclipse Temurin) или выберите пакет, предоставленный вашим поставщиком ОС/облака.

Возможности Java 8–19

Как уже упоминалось в самом начале этого руководства: практически все (не придирайтесь) функции языка Java 8 работают в Java 19. То же самое относится и ко всем другим версиям Java между ними.

Что в свою очередь означает, что знание всех языковых возможностей Java 8 служит очень хорошей базой в изучении Java, а все остальные версии (Java 9–19) в значительной степени дают дополнительные функции поверх этого базового уровня.

Вот краткий обзор того, что могут предложить конкретные версии:

- Java 8 -

Java 8 была массовым релизом, и вы можете найти список всех функций на веб-сайте Oracle . Однако здесь я хотел бы упомянуть два основных набора функций:

Возможности языка: лямбды и т. д.

До Java 8 всякий раз, когда вы хотели создать экземпляр, например, нового Runnable, вам приходилось писать анонимный внутренний класс следующим образом:

Runnable runnable = new Runnable(){ @Override public void run(){ System.out.println(""Hello world !""); } };

С лямбда-выражениями тот же код выглядит так:

Runnable runnable = () -> System.out.println(""Hello world two!"");

Вы также получили ссылки на методы, повторяющиеся аннотации, методы по умолчанию для интерфейсов и некоторые другие возможности языка.

Коллекции и потоки

В Java 8 вы также получили функциональный стиль операций для коллекций, также известный как Stream API. Быстрый пример:

List<String> list = Arrays.asList(""franz"", ""ferdinand"", ""fiel"", ""vom"", ""pferd"");

До появления Java 8, вам приходилось писать циклы for, чтобы что-то сделать с этим списком.

С помощью API Streams вы можете сделать следующее:

list.stream() .filter(name -> name.startsWith(""f"")) .map(String::toUpperCase) .sorted() .forEach(System.out::println);

Если вы хотите больше практики на Java 8

Очевидно, что в рамках данного руководства я могу только дать лишь краткий обзор каждого недавно добавленного метода Stream, Lambda или Optional в Java 8.

Если вам нужен более детальный, подробный основательный обзор, включая упражнения, вы можете ознакомиться с моим курсом по основным функциям Java 8 .

- Java 9 -

Java 9 также была довольно большой версией, с несколькими дополнениями:

Коллекции

Коллекции получили несколько новых вспомогательных методов для простого создания списков, наборов и карт.

List<String> list = List.of(""one"", ""two"", ""three""); Set<String> set = Set.of(""one"", ""two"", ""three""); Map<String, String> map = Map.of(""foo"", ""one"", ""bar"", ""two"");

Streams

Потоки получили несколько дополнений в виде методов takeWhile, dropWhile и iterate.

Stream<String> stream = Stream.iterate("""", s -> s + ""s"") .takeWhile(s -> s.length() < 10);

Optionals

Optionals получили метод ifPresentOrElse, которого очень не хватало.

user.ifPresentOrElse(this::displayAccount, this::displayLogin);

Интерфейсы

Интерфейсы получили private методы:

public interface MyInterface { private static void myPrivateMethod(){ System.out.println(""Yay, I am private!""); } }

Другие возможности языка

И пара других улучшений, таких как улучшенный оператор try-with-resources или расширения diamond оператора.

JShell

Наконец, в Java появилась оболочка, в которой вы можете опробовать простые команды и получить немедленные результаты.

% jshell | Welcome to JShell -- Version 9 | For an introduction type: /help intro jshell> int x = 10 x ==> 10

HTTPClient

В Java 9 появилась начальная предварительная версия нового HttpClient. До этого встроенная поддержка Http в Java была довольно низкоуровневой, и вам приходилось прибегать к использованию сторонних библиотек, таких как Apache HttpClient или OkHttp (кстати, отличные библиотеки!).

В Java 9 у Java появился собственный современный клиент, хотя и в режиме превью, что означает возможность его изменения в более поздних версиях Java.

Project Jigsaw: Модули Java и мультирелизные JAR-файлы

В Java 9 появилась система модулей Jigsaw , которая чем-то напоминает старую добрую спецификацию OSGI . В задачи данного руководства не входит подробное описание Jigsaw — посмотрите предыдущие ссылки, чтобы узнать больше.

Мультирелизные JAR-файлы позволили создать один файл .jar, который содержит различные классы для различных версий JVM. Таким образом, ваша программа может вести себя по-разному / использовать разные классы, например, при запуске на Java 8 и Java 10.

Если вам нужно больше практики в Java 9

Опять же, это всего лишь краткий обзор возможностей Java 9, и если вы хотите получить более подробные объяснения и упражнения, посмотрите курс основных функций Java 9.

- Java 10 -

В Java 10 было внесено несколько изменений, таких как сборка мусора и т. д. Но единственное реальное изменение, которое вы, как разработчик, скорее всего заметите, — это введение ключевого слова «var», также называемого выводом типа локальной переменной.

Вывод типа локальной переменной: ключевое слово var

// Pre-Java 10 String myName = ""Marco""; // With Java 10 var myName = ""Marco""

Похоже на Javascript, не так ли? Тем не менее, Java все еще строго типизирован и var применяется только к переменным внутри методов (спасибо, dpash , за то, что снова указали на это).

- Java 11 -

Java 11 также была несколько меньшей версией с точки зрения разработчика.

Строки и файлы

Строки и файлы получили несколько новых методов (здесь перечислены не все):

""Marco"".isBlank(); ""Mar

co"".lines(); ""Marco "".strip(); Path path = Files.writeString(Files.createTempFile(""helloworld"", "".txt""), ""Hi, my name is!""); String s = Files.readString(path);

Запуск исходных файлов

Начиная с Java 10, вы можете запускать исходные файлы Java без предварительной их компиляции. Это шаг к созданию сценариев.

ubuntu@DESKTOP-168M0IF:~$ java MyScript.java

Вывод типа локальной переменной (var) для лямбда-параметров

Заголовок говорит сам за себя:

(var firstName, var lastName) -> firstName + lastName

HttpClient

HttpClient из Java 9 в его окончательной, не предварительной версии.

Прочее

Flight Recorder (Регистратор полетов), сборщик мусора No-Op, Nashorn-Javascript-Engine объявлен deprecated (устаревшим) и т.д.

- Java 12 -

В Java 12 появилось несколько новых функций и исправлений , но единственные, о которых стоит упомянуть здесь, это поддержка Unicode 11 и предварительный просмотр нового выражения switch, о котором вы узнаете в следующем разделе.

- Java 13 -

Полный список возможностей можно найти здесь , но в основном вы получаете поддержку Unicode 12.1, а также две новые или улучшенные превью функции (могут быть изменены в будущем):

Switch выражение (Preview — предварительная версия)

Switch выражения теперь могут возвращать значение. И вы можете использовать синтаксис в стиле лямбда для своих выражений, без проблем с ошибками:

Старые операторы switch выглядели следующим образом:

switch(status) { case SUBSCRIBER: // code block break; case FREE_TRIAL: // code block break; default: // code block }

В то время как в Java 13 операторы switch могут выглядеть следующим образом:

boolean result = switch (status) { case SUBSCRIBER -> true; case FREE_TRIAL -> false; default -> throw new IllegalArgumentException(""something is murky!""); };

Многострочные строки (предварительная версия)

Наконец-то, вы можете сделать это на Java:

String htmlBeforeJava13 = ""<html>

"" + "" <body>

"" + "" <p>Hello, world</p>

"" + "" </body>

"" + ""</html>

""; String htmlWithJava13 = """""" <html> <body> <p>Hello, world</p> </body> </html> """""";

- Java 14 -

Switch выражения (стандарт)

Switch выражения, которые были превью функцией в версиях 12 и 13, теперь стандартизированы.

int numLetters = switch (day) { case MONDAY, FRIDAY, SUNDAY -> 6; case TUESDAY -> 7; default -> { String s = day.toString(); int result = s.length(); yield result; } };

Records (Записи - превью)

Теперь существуют классы Records (записей), которые помогают упростить задачу написания большого количества шаблонного кода на Java.

Посмотрите на этот класс до Java 14, который содержит только данные, (потенциально) геттеры/сеттеры, equals / hashcode, toString.

final class Point { public final int x; public final int y; public Point(int x, int y) { this.x = x; this.y = y; } } // реализация equals, hashCode, toString на основе состояния // ничего больше

С записями теперь это может быть записано следующим образом:

record Point(int x, int y) { }

Опять же, это предварительная версия, которая может быть изменена в будущих выпусках.

Полезные исключения NullPointerExceptions

Наконец, исключения NullPointerExceptions описывают, какая именно переменная имела значение NULL.

author.age = 35; --- Exception in thread ""main"" java.lang.NullPointerException: Cannot assign field ""age"" because ""author"" is null

Сопоставление с образцом для InstanceOf (предварительная версия)

Раньше вам приходилось приводить ваши объекты (выполнять cast) внутри instanceof, как это показано ниже:

if (obj instanceof String) { String s = (String) obj; // использование s }

Теперь вы можете сделать это, фактически отказавшись от приведения.

if (obj instanceof String s) { System.out.println(s.contains(""hello"")); }

Инструмент упаковки (инкубатор)

Существует инструмент jpackage (инкубатор), который позволяет упаковать ваше Java-приложение в пакеты для конкретной платформы, включая все необходимые зависимости.

Linux: deb и rpm

macOS: pkg и dmg

Windows: msi и exe

Сборщики мусора

Сборщик мусора Concurrent Mark Sweep (CMS) был удален, и был добавлен экспериментальный сборщик мусора Z.

- Java 15 -

Текстовые блоки / многострочные строки

Представленные в качестве экспериментальной функции в Java 13 (см. выше), многострочные тексты теперь готовы к использованию.

String text = """""" Lorem ipsum dolor sit amet, consectetur adipiscing \ elit, sed do eiusmod tempor incididunt ut labore \ et dolore magna aliqua.\ """""";

Запечатанные (sealed) классы - превью

Если вы когда-либо хотели иметь еще более жесткий контроль над тем, кому разрешено создавать подклассы ваших классов, теперь есть функция sealed .

public abstract sealed class Shape permits Circle, Rectangle, Square {...}

Это означает, что хотя класс является public , единственными классами, которым разрешено создавать подклассы, Shape , являются Circle , Rectangle и Square .

Записи и сопоставление с образцом

Функции Records и Pattern Matching из Java 14 (см. выше) все еще находятся на стадии предварительной версии и еще не доработаны.

Nashorn Javascript Engine

После того, как движок Nashorn Javascript Engine был объявлен устаревшим в Java 11, он был окончательно удален в JDK 15.

ZGC: готов к продакшн

Z Garbage Collector больше не обозначен как экспериментальный. Теперь он готов к использованию в продакшн.

- Java 16 -

Сопоставление шаблонов для instanceof

Вместо:

if (obj instanceof String) { String s = (String) obj; // например, s.substring(1) }

Теперь вы можете сделать следующее:

if (obj instanceof String s) { // Пусть сопоставление шаблонов сделает свою работу! // ... s.substring(1) }

Каналы сокетов Unix-домена

Теперь вы можете подключаться к сокетам Unix-домена (также поддерживаются macOS и Windows (10+).

socket.connect(UnixDomainSocketAddress.of( ""/var/run/postgresql/.s.PGSQL.5432""));

API стороннего компоновщика - превью

Планируемая замена JNI (Java Native Interface), позволяющая выполнять компоновку с нативными библиотеками (например, с библиотеками языка C).

Записи и сопоставление с образцом

Обе функции теперь готовы к продакшн и больше не отмечены in preview .

Запечатанные классы

Запечатанные классы (начиная с Java 15, см. выше) все еще находятся в предварительной версии.

- Java 17 -

Java 17 — это новая версия Java с долгосрочной поддержкой (LTS) после Java 11.

Сопоставление шаблонов для switch (предварительная версия)

Уже доступно на многих других языках:

public String test(Object obj) { return switch(obj) { case Integer i -> ""An integer""; case String s -> ""A string""; case Cat c -> ""A Cat""; default -> ""I don't know what it is""; }; }

Теперь вы можете передавать объекты в функции переключателя и проверять наличие определенного типа.

Запечатанные классы (завершена)

Функция, которая была представлена ​​в Java 15 в качестве предварительной версии, теперь завершена.

Резюме: если вы когда-либо хотели иметь еще более жесткий контроль над тем, кому разрешено создавать подклассы ваших классов, теперь у вас есть функция sealed .

public abstract sealed class Shape permits Circle, Rectangle, Square {...}

Это означает, что хотя класс Shape является публичным, единственными классами, которым разрешено создавать его подклассы являются Circle , Rectangle и Square .

API внешних функций и памяти (инкубатор)

Замена нативного интерфейса Java (JNI). Позволяет вызывать нативные функции и обращаться к памяти за пределами JVM. Пока это вызовы на C, но в будущем планируется поддержка дополнительных языков (таких как C++, Fortran).

Прекращение поддержки диспетчера безопасности

Начиная с Java 1.0, существовал менеджер безопасности. Теперь он устарел и будет удален в одной из будущих версий.

- Ява 18 -

UTF-8 по умолчанию

Если вы пытались, например, читать файлы без явного указания окончания символов, то в предыдущих версиях Java использовалась кодировка операционной системы (например, UTF-8 в Linux и macOS и Windows-1252 в Windows). В Java 18 она изменилась на UTF-8 по умолчанию.

Простой веб-сервер

Java 18 теперь поставляется с простейшим HTTP-сервером, с которого вы можете начать:

jwebserver

Подробнее о его возможностях можно узнать здесь .

Другие не столь захватывающие вещи/инкубационные возможности

Полный список и обзор смотрите в этой статье .

- Ява 19 -

В Java 19 добавлено несколько интересных функций, таких как Virtual Threads и новый Foreign Function & Memory API , а также структурированный параллелизм и Vector API , но все они находятся в режиме предварительного просмотра, поэтому могут быть изменены в следующих релизах.

Если вы хотите узнать об этих функциях и о том, что будет дальше, ознакомьтесь с этой статьей .

Заключение

К настоящему моменту у вас должно быть довольно хорошее представление о нескольких вещах:

Как установить Java, какую версию получить и где ее получить (подсказка: Adoptium).

Что такое дистрибутив Java, какие из них существуют и чем они отличаются.

В чем разница между конкретными версиями Java.

Обратная связь, исправления и ваш вклад всегда приветствуются! Просто оставьте комментарий внизу.

Спасибо за прочтение!

Благодарности"'https://habr.com/share/publication/719744/49624aa82277a43ddf6ca3fb4e4e5541/'"['https://habr.com/share/publication/719744/49624aa82277a43ddf6ca3fb4e4e5541/', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/18e/8b7/905/18e8b79052fd26efc540c264965643a7.png', 'https://mc.yandex.ru/watch/24049213']"
11'719862'Какая судьба у двухмерных материалов в России?'После открытия графена (двухмерной формы углерода) обнаружены более десяти веществ со схожей структурой (гексагональный нитрид бора, GaN и AlN, дихалькогениды переходных металлов и др.). Их...'https://habr.com/ru/post/719862/'"После открытия графена (двухмерной формы углерода) обнаружены более десяти веществ со схожей структурой (гексагональный нитрид бора, GaN и AlN, дихалькогениды переходных металлов и др.). Их физико‑химические свойства имеют огромный практический потенциал и частично уже используются в композиционных материалах, защитных покрытиях, биомедицинских датчиках, фармацевтике и еще примерно 40 отраслях.

В нашем обзоре обобщены результаты интеллектуальной деятельности (РИД) в РФ в области двухмерных материалов за последние 5 лет, пользуясь открытыми базами данных.

Изучение 2D‑веществ позволило открыть много важных и неожиданных явлений, а всеобщий интерес к таким системам подтверждается присуждением двух Нобелевских премий за последнее десятилетие: в 2010 г. Гейму и Новоселову за исследование графена и в 2016 г. Костерлицу и Таулесу за теорию топологических фазовых переходов (теория Березинского‑Костерлица‑Таулеса), важной составной частью которой является теория плавления двумерных кристаллических систем.

В частности, графен представляет собой двумерный металл, в котором электронный спектр имеет линейную дисперсию и описывается безмассовым дираковским гамильтонианом. Высокоскоростной транспорт электронов и их высокая подвижность (2,5·105 см2·В-1·с-1) делают графен привлекательным материалом для наноэлектроники, в особенности для высокочастотных применений. Его оптические (оптическое поглощение одним слоем ≈2,3%), термические (коэффициент теплопроводности 3000–5000 Вт∙м-1∙К-1) и механические свойства (модуль Юнга 1012 Па, собственная прочность на разрыв ~1,3·1011 Па) привлекательны для микро‑ и наномеханических систем, тонкопленочных транзисторов, прозрачных и проводящих композитов и электродов, гибкой и печатаемой оптоэлектроники и фотоники. Большая удельная площадь поверхности (до 2400 м2/г), химическая чистота (до 99,999%) и возможность изменения свойств присоединением различных функциональных молекул делают графен и его популярные производные — оксид графена и фторид графена — перспективными материалами для биотехнологии и медицины.

Исследования и разработки в 2018–2022 гг. велись и по грантам Федеральных фондов; в рамках региональных программ, в частности инновационным фондом Самарской области; по линии НИОКР отдельных вузов. Минпромторг РФ периодически заказывал НИР, например по теме «Мониторинг развития и внедрения технологий получения графена, его производных, других 2D‑кристаллов и производства изделий на основе 2D кристаллов в Российской Федерации и мире» у МГУ имени М.В. Ломоносова. Крупные предприятия с государственным участием реализовывали собственные программы НИОКР, например АО «Концерн „Созвездие“ (Воронеж), АО «НПП „Пульсар“ (Москва).

В России исследователи и разработчики графеновых материалов и изделий на их основе сконцентрированы примерно в 100 организациях.

О графене и его «братьях»

Принципиально, что графен имеет одноатомную толщину (рисунок 1).

Число атомов углерода в отдельной частице графена, площадь пластины, её форма, наличие дефектов и легирующих элементов, а также химическое состояние периферийных атомов углерода никак не регламентируется.

Рисунок 1: Схематичное изображение графена

Источник: на основе данных научно-технической литературы

На практике к графенам относят не только монослои и монослойные ленты, но и сдвоенные слои (bilayer), строенные слои (trilayer) и графеновые нано‑частицы (пакеты из 5–10 слоёв), которые часто называют многослойным графеном, МСГ (multilayer graphene) или графеновые нанопластины, ГНП (graphene nano plateles).

Недавно введён термин «аморфный графен». Он отличается от монокристаллического графена со строго равнобедренными шестигранными ячейками из атомов углерода тем, что его ячейки имеют 5, 6, 7 и даже 8 атомов углерода, а форма многогранников искривлена (рисунок 2).

Рисунок 2: Монокристаллический графен (слева)

и аморфный графен (справа)

Источник: Samsung Electronics

Аморфный графен имеет низкую электрическую проводимость, что расширяет возможные сферы его использования за пределы электроники.

В графене реализуются «релятивистские» уровни Ландау и «полуцелое» квантование холловской удельной проводимости. Известен эффект туннелирования в графене (прозрачность высоких барьеров).

Удельная проводимость графена никогда не падает ниже кванта проводимости независимо от дефектов и количества слоев.

Изучение графена методом электронной дифракции показало, что нормали к поверхности отклоняются от вертикали в среднем на 10º вследствие его волнистой поверхности.

Свойства разновидностей графена по мере искажения структуры в той или иной степени приближаются к свойствам графита. Граница между высокорасщепленными графитами и многослойными графенами точно не определена. Однако считается, что она находится вблизи числа 10 (пакет из 10 графеновых слоёв).

Типичные дефекты в однослойном графене представлены на рисунке 3.

Рисунок 3: Дефекты в однослойном графене типа «вакансия»,

«топологический дефект Стоуна-Уэльса» и «нанопора»

Источник: на основе данных научно-технической литературы

Двухслойный графен (билэйер) является уникальным представителем 2D‑систем в физике конденсированного состояния вещества, обладающий выдающимися механическими и транспортными свойствами. Известны бислои графена с муаровой структурой, бислои с адсорбированными атомами водорода, фтора и кислорода, бислои с сеточной структурой.

Подкрученный графен — это двуслойка, состоящая из двух листов графена, положенных один на другой так, что кристаллические оси слоев не совпадают, а образуют некоторый конечный угол подкрутки 𝜃. Поведение электронов в такой системе очень чувствительно к углу подкрутки. При определённом 𝜃 в случае приложения электрического поля по нормали к такой двуслойке происходит образование конечной плотности состояний на уровне Ферми.

В последние 3 года совершён существенный прорыв в понимании свойств неупорядоченного графена. Например, в 2018 г. было сделано большое открытие в фундаментальной науке — сверхпроводимость в скрученном графене.

Активное развитие получило направление синтеза и применения производных графена — семейства углеродных наноматериалов, представляющих собой единичный графеновый слой, края и поверхность которого покрыты заданным типом и количеством функциональных групп (карбоксилов, аминов и т. д.). Введение функциональных групп, допирование и изменение морфологии слоя графена приводит к реконфигурации π‑сопряженного электронного облака за счет частичного преобразования sp2-гибридизированных атомов углерода в sp3-гибридизованные, а также индуктивного эффекта от присутствия донорных или акцепторных функциональных групп. Это делает производные графена одними из наиболее перспективных 2D‑материалов для различных практических применений, начиная от оптоэлектронных приборов и электрохимических систем накопления энергии, заканчивая газоаналитическими системами и биосенсорами.

Обнаружены природные источники графена. Примером являются шунгиты. Сотрудникам Карельского научного центра РАН удалось получить из шунгитов Приладожья фрагменты наноуглерода, имеющих графеновую основу, и стабилизировать их, используя разработанные водные технологии. При этом обнаружено, что в воде происходят структурные перестройки природного углерода, связанные с последовательным образованием глобулярных кластеров из графеновых пачек, которые в свою очередь образуют 3D‑фрактальные структуры. Разработка технологий получения пленок шунгитового углерода на различных подложках, как предполагается, позволит исследовать синергетические эффекты, структурные и оптические свойства пленок, представляющие интерес для оптоэлектроники и фотоники.

Среди 2D‑веществ вторым по популярности является борофен — двумерный кристалл, состоящий только из атомов бора. Атомная структура борофенов состоит из треугольных и шестиугольных ячеек. Борофен прочнее графена и в некоторых конфигурациях обладает феноменальной прочностью. Борные нанотрубки имеют более высокий двумерный модуль Юнга, чем любые другие известные углеродные и неуглеродные наноструктуры. Из‑за особенностей своей структуры при растяжении в плоскости борофены претерпевают новый структурный фазовый переход. Борофен имеет потенциал в качестве анодного материала для батарей благодаря высокой теоретической удельной ёмкости, электронной проводимости и свойствам переноса ионов. Водород легко адсорбируется борофеном, имеет потенциал для хранения водорода — более 15% его веса. Борофен может катализировать расщепление молекулярного водорода на ионы водорода и восстанавливать воду.

Третья группа двухмерных веществ — дихалькогениды переходных металлов (ДПМ), например MoS2 и WS2. Их особенностью являются:

1) относительная легкость получения сверхтонкого, вплоть до одного монослоя (~0,7 нм), «тела» канала из‑за ван‑дер‑ваальсовой структуры ДПМ;

2) низкая диэлектрическая проницаемость ДПМ ε (MoS2)=3,3 при ε(Si)=11,7;

3) 2D MoS2 транзисторы относятся к так называемому типу junction‑less транзисторов, то есть в них отсутствует проблема достаточно глубоких ионно‑имплантированных областей стока\истока, что приводит к эффекту «drain induced barrier lowering» — индуцированное стоком снижение потенциального барьера, препятствующее уменьшению канала объемного кремниевого транзистора.

Монохалькогениды металлов IIIА группы, такие как GaSe, GaTe и InSe, привлекают большое внимание в качестве исходных материалов для двумерных структур, которые демонстрируют уникальные оптические и электронные свойства, перспективные для применений в области наноэлектроники (полевые транзисторы), фотовольтаики, сенсорики и нелинейной оптики. Оптические переходы в монохалькогенидах реализуются в широком диапазоне от ближнего ультрафиолета до инфракрасной области. В отличие от дихалькогенидов переходных металлов эти соединения являются прямозонными в объемном 3D состоянии, что резко упрощает задачу формирования эффективно излучающих наноструктур. В монослойном пределе толщин характер зонной структуры меняется на непрямозонный. Переход между двумя типами зонной структуры осуществляется в достаточно протяженной области, до нескольких десятков монослоев, в которой могут сосуществовать особенности, свойственные 2D и 3D состояниям.

В последнее время слоистые полупроводники III‑VI групп (включая GaS, GaSe и GaTe) привлекли большое внимание из‑за возможности их получения в виде 2D‑структур, обладающих высокой анизотропией, в сочетании с превосходными электрическими, оптическими и механическими свойствами. Эти слоистые халькогениды имеют своё потенциальное применение в области нелинейной оптики, оптоэлектроники, электрических датчиков и терагерцовых устройств.

Известно также семейство двумерных материалов, состоящих из чередующихся квазиатомных слоев сульфидов переходных металлов (железа‑меди, железа и других), и гидроксидов на основе гидроксида магния, связанных за счет электрических зарядов разных знаков, а не ван‑дер‑ваальсовых сил. Природным аналогом являются минералы группы валлериита (Cu,Fe)S2·n(Mg,Fe)(OH)2 и точилинита FeS·n(Mg,Fe)(OH)2. Похожую структуру из монослоев гидроксида лития и селенида железа имеют открытые несколько лет назад сверхпроводники с критической температурой до 40 К.

На этом мы заканчиваем первую часть нашего подробного обзора. В следующей части речь пойдет об основных патентах в этой отрасли и ее проблемах."'https://habrastorage.org/getpro/habr/upload_files/6b8/254/e03/6b8254e03a0f4f5d42d650a2d01a83a2.png'"['https://habrastorage.org/getpro/habr/company/3a0/49e/ff5/3a049eff5348e0517954069b5a7c61e2.png', 'https://mc.yandex.ru/watch/24049213', 'https://vk.com/rtrg?p=VK-RTRG-1669144-8I6Rb', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/139/b5b/479/139b5b4794167809eb689799fc408673.jpeg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/6b8/254/e03/6b8254e03a0f4f5d42d650a2d01a83a2.png', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/cd7/fef/c17/cd7fefc17c1eff01d1ef0214b7f15fba.jpeg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/ec9/e08/33a/ec9e0833ac5e0f9c0fca508f4862f56e.jpeg', 'https://habrastorage.org/getpro/habr/branding/77e/913/273/77e913273854c5e4ce598bda9d498c69.png', 'https://habrastorage.org/getpro/habr/company/post_desktop/5a5/23f/069/5a523f0690db172e81f2a0d65bcefbf4.png', 'https://habrastorage.org/getpro/habr/upload_files/6b8/254/e03/6b8254e03a0f4f5d42d650a2d01a83a2.png']"
12'719350'Дизайн уровней. Учимся у Atomic Heart'Atomic Heart стала одной их тех игр, которую я полюбил за переданную разработчиками атмосферу. Советская эстетика, культура, вся эпоха переданы просто безупречно. Прекрасная музыка, которую можно...'https://habr.com/ru/post/719350/'"Atomic Heart стала одной их тех игр, которую я полюбил за переданную разработчиками атмосферу. Советская эстетика, культура, вся эпоха переданы просто безупречно. Прекрасная музыка, которую можно услышать чуть ли не на каждой локации. Большое количество агитирующих плакатов, памятников отдельным личностям, например, Ленину. Можно встретить и советскую архитектуру, хоть и 90 процентов архитектуры выполнено в ретро-футуризме. Но при прохождении было замечено несколько ошибок, которые смогли допустить дизайнеры при работе. Рассмотрим все, что было замечено.

Навигация

Очень сильно раздражали освещенные пустые пространства. Разработчики будто говорят нам о том, что в этих пространствах есть что-то ценное. На деле же игрок будет в такие моменты попадать в банальный тупик. Например, как только игрок попадает в ""Вавилов"", то первым заданием для него будет достать вентиль. Когда игрок его подбирает, то почти каждый обратит внимание на освещенное светом пространство с направляющей линией вверх, в котором ничего нет (Рис. 1). Чтобы исправить это - надо убрать источники света (Рис. 2), и тогда данное пространство не будет привлекать внимание.

Разрушители атмосферы

Разрушители атмосферы - это все, что не соответствует действительности. Что удивило в Atomic Heart, так это наличие абсолютно пустых комнат. Если пустые избы (Рис. 1) или беседки (Рис. 2) еще можно как-то оправдать тем, что дизайнер спешил закончить работу к сроку и начал работать грязно, то наличие пустого большого здания очень сильно может удивить игрока при прохождении (Рис. 3). Здание очень сильно выделялось среди другого окружения и привлекало к себе внимание. Так с игроком ни в коем случае обращаться нельзя, его всегда надо поощрять за исследование, иначе он может потерять интерес к исследованию локаций. В первом и третьем случае подобные пространства должны иметь подбираемые предметы, во втором необязательно, поскольку его легко увидеть издалека и понять, есть ли там какие-либо бонусы.

При прохождении было обнаружено большое количество моделей, которые входят в другие (Рис. 1), но можно встретить подобное явление и с интерактивными объектами (Рис. 2). Весь интерактив надо отделить от статичных моделей. Иногда в игре можно встретить и наличие неинтерактивных говорящих трупов, которые обозначаются наоборот, будто с ними есть взаимодействие (Рис. 3). Тут два решения - либо не делать их интерактивными, либо добавить к ним реальное взаимодействие. Обязательное исправление - это отделение от других моделей.

Если ходить по окраинам локаций открытого мира, то игрок может встретить очень странный ландшафт (Рис. 1 - Рис. 2). Данную вещь стоило либо исправить вручную, сгладив все углы, либо можно было воспользоваться готовыми моделями, например, камней, чтобы скрыть это от глаз игрока.

Надоедливые подсказки

Очень сильно раздражали постоянно вылетающие подсказки во время боя с врагами. Если бы они появились перед битвой, то было бы меньше проблем. Получается, когда игрок хочет ударить врага, то ему игра подсказывает, что нужно делать, отвлекая от действия, которое он совершает. Причем игроку подсказывает то же самое второстепенный персонаж во время боя.

Уязвимость ИИ

На некоторых локациях можно встретить некоторые уязвимости ИИ, которые игрок может легко использовать. Это объекты, которые по метрикам похожи на игрока, отличие состоит только по размерам по оси Z. Данные объекты составляют почти 50% роста игрока. Это позволяет заставить врага бегать вокруг подобных препятствий, что помогает игроку их устранять. Можно привести два решения: либо сделать препятствие больше, чтобы врага нельзя было просто уничтожать, либо же стоит их удалить, чтобы обеспечить игроку больше пространства для боя.

Непостоянство механик

Проверка на постоянство механик - одно из важных дел любого дизайнера уровней. Если в игре присутствует непостоянство механик, которые преподносятся игроку, то разработчики заставляют игрока думать не системно, а исключениями, которые он для себя находит. Например, в Atomic Heart допустили множество таких ошибок. На протяжении начала игры можно было открывать все доступные деревянные двери (Рис. 1 - Рис. 2). Выйдя в открытый мир игрок будет встречать очень много точно таких же, казалось бы, открытых дверей, которые на самом деле оказываются закрытыми (Рис. 3). Это заставляет игрока думать, является ли это секретом, есть ли объяснение, почему данная дверь закрыта, но на эти вопросы дизайнеры не отвечают, поэтому игрок впоследствии будет постоянно проверять каждую подобную дверь на интерактив. Очень простое решение - визуальный язык, который нам помогает понять уже с большого расстояния о наличии интерактива с данным элементом. Например, иногда разработчики объясняют отсутствие интерактива с помощью дополнительных блокирующих объектов окружения (Рис. 4).

Игрока обучают, что красные лазеры могут убить с помощью приема цены ошибки, когда наглядно показывают смерть сотрудника предприятия 3826 с помощью данного препятствия (Рис. 1). Сразу после этой сцены игрок получает возможность проходить через данные препятствия, но с нанесением ему очень большого урона. Впоследствии в открытом мире можно заметить, что данные лазеры никак не выполняют те же функции, что и до этого (Рис. 2). Они выполняют функцию границы открытого мира, которая не наносит никакого урона и через нее нельзя пройти.

В игре используется краска для обозначения сразу нескольких механик. Это указание на возможность взобраться на этот же самый объект (Рис. 1) и место, где можно будет прыгнуть для лазанья по стенам (Рис. 2). Но можно встретить, как на одной из локаций на полу расположена балка с желтой краской, с которой нет интерактива (Рис. 3). Подобные объекты надо удалять из окружения, поскольку они указывают на интерактив, которого нет. Еще в открытом мире можно встретить скалы, по которым можно взобраться (Рис. 4). Для них используется краска уже белого цвета. Т.е. разработчики используют для одной и той же функции 2 цвета. Так делать ни в коем случае не стоит, лучшим решением было бы выбрать иной визуальный язык. Например, можно грязно-желтыми штрихами помечать все места, где игрок имеет возможность взбираться.

Из других замечаний

На некоторых локациях движение игрока становится скачкообразным из-за некоторых ненужных расположенных объектов, которые мешают комфортному передвижению. Например, в одной из первых локаций комплекса некоторых игроков может не удовлетворить такое движение по обломкам и неудобно расположенным объектам окружения (Рис. 1). Лучшим решением такой проблемы может служить банальное удаление мешающих движению объектов (красный цвет) и сделать движение плоским, т.е. разлом тоже надо убрать (зеленый цвет) (Рис. 2).

При прохождении игры можно встретить несколько комодов, которые показываются для игрока интерактивными, но на самом деле никакого интерактива не имеет (Рис. 1). Данную проблему можно решить очень просто. Если никаких подбираемых предметов у комода нет, то его можно сделать просто неинтерактивным. Если же комод все же имеет подбираемые предметы, то можно изменить градус наклона данного объекта (Рис. 2), чтобы с ним могло идти взаимодействие, как и с другими подобными комодами.

В жизни мы привыкли, что любой лифт - замкнутое пространство. В подобных подъемных машинах используются двери, которые при закрытии создают полную безопасность для человека. В Atomic Heart в самом начале игры можно встретить крутой на первый взгляд лифт, который не использует какие-либо механики безопасности для людей. При заходе на платформу надо ограничить игрока, например, двери-боствиг, которые во время той эпохи часто использовали.

Итого

Если бы дизайнеры уровней не допускали подобные ошибки, то впечатление от прохождения всей игры было бы куда лучше. Предположу, что разработчики дорабатывали многие локации и саму игру впохыхах, из-за чего и допустили такое приличное количество банальнейших ошибок, которые исправляются довольно быстро. Вывод прост: стоит одну и ту же локацию проверять несколько раз, чтобы подобных проблем не встречалось."'https://habrastorage.org/getpro/habr/upload_files/d1a/ee1/b4c/d1aee1b4c2c130fb029c11c151fbf954.jpg'"['https://habrastorage.org/r/w780q1/getpro/habr/upload_files/9a1/7a8/8b6/9a17a88b695457ddf39093549f4f9795.jpg', 'https://habrastorage.org/r/w32/getpro/habr/avatars/9a2/d6f/7e1/9a2d6f7e1fcc20125ccfa18f683a0c60.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/f7c/c22/a28/f7cc22a28b328652a6a454c1a2383761.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/815/415/b43/815415b43be019fcc4001145a8451284.jpg', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/501/360/698/5013606989d930f71b6a525cc747368d.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/436/eba/61a/436eba61ae6e309f616e379608c8117f.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/79e/3a5/842/79e3a58427b5f8ebb22ef47b97c8b568.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/1aa/294/ae7/1aa294ae77dbd7fc090ed3ed9909767b.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/373/0c4/97e/3730c497e46b377fd427c312943c01bf.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/5fb/775/256/5fb77525694a9f6c904e290478d30a45.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/48b/f3b/a03/48bf3ba03157d484f1e84743501e446e.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/3f6/050/e5e/3f6050e5eb299a05ef9168d8a522e4eb.jpg', 'https://habrastorage.org/getpro/habr/avatars/9a2/d6f/7e1/9a2d6f7e1fcc20125ccfa18f683a0c60.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/f88/627/50e/f8862750e40e8c2fba4f04a51d4e76e5.jpg', 'https://habrastorage.org/getpro/habr/upload_files/d1a/ee1/b4c/d1aee1b4c2c130fb029c11c151fbf954.jpg']"
13'719788'Ищем ответ на главный вопрос Вселенной, жизни и всего такого в новом сезоне ML на Хабре'Меня зовут Андрей Аврамчук, я старший продюсер спецпроектов в Хабре, принёс не ответ на главный вопрос, а пока только новый сезон на Хабре — «Машинное обучение», который мы проводим совместно с ВТБ с 1 по 31 марта. Будем искать вместе, и да поможет нам магия ML.'https://habr.com/ru/post/719788/'"Меня зовут Андрей Аврамчук aka @Mimizavr, я старший продюсер спецпроектов в Хабре, принёс не ответ на главный вопрос, а пока только новый сезон на Хабре — «Машинное обучение», который мы проводим совместно с ВТБ с 1 по 31 марта. Будем искать вместе, и да поможет нам магия ML.



Какой станет наша жизнь ещё через 10 лет развития машинного обучения? Как изменятся повседневные сервисы? Чего смогут добиться инженеры? Мы попросили нескольких хабраавторов рассказать про обычный день в 2033 году. Из их ответов мы собрали историю, которая станет возможной благодаря развитию технологий ML.

Рабочие Земли, мы принесли вам историю из одного дня в 2033 году…

Вадим Шевяков aka @Sirion

…Сегодня проснулся от характерного «ук-ук-ук-ук». Вскочил с кровати как ошпаренный. Какая из наших двух кошек блюёт? Посмотрел на экран смартфона, тихо и с облегчением матюкнулся. Умный будильник знал, что накануне я засиделся допоздна. Чтобы разбудить человека, спавшего четыре часа, нужны экстренные меры. А для котовладельца со стажем не может быть ничего экстреннее «ук-ук-ук-ук». Очень умный будильник, так и придушил бы в благодарных объятиях…

Николай Маслухин aka@Maslukhin

…А дальше был такой диалог с моей ИИ-помощницей Йенифер: — Доброе утро, Йенифер, как у нас дела? — Доброе утро. Сегодня дождь, поэтому я не стала вас будить на пробежку. Тем более что последние 324 раза вы на неё не ходили. — Спасибо. — Я бы и сейчас не стала вас будить, но в календаре две встречи в офисе. Я пыталась их перенести, но ИИ на той стороне говорит, что одна из встреч — передача вам премиального золота и вам очень-очень надо приехать. — Убедила, едем…

Александр Казанцев aka@akdengi

…До выходных — целых два дня. В обществе уже поднимается вопрос, что мы настолько обучили ИИ, что работать не надо. Но некоторые выступают за возврат 3-дневной недели и 6-часового рабочего дня. Одна из моих работ — в университете. Я веду предмет «Этика в андроидных системах», и сегодня мы учились настраивать блоки в направлениях, которые для андроида (и для человека, взаимодействующего с ним) не будут разрушительными. Помните, раньше я писал тексты и рисовал? А теперь пишу запросы, нахожу ошибки и исправляю этически некорректные вещи в них. Хотя проблему с общественными нормами при обучении ИИ подняли ещё 10–15 лет назад, до сих пор не получается строго задать ограничения. А профессия дизайнера и автора умерла в масс-маркете, став доступной миллионам. Некоторые авторы теперь не выкладывают произведения в Сеть, чтобы их не захватил и не переварил машинный разум…

Вадим Шевяков aka @Sirion

…Потом я пришёл в офис, уселся в любимое кресло, РазраБОТчик уже сформировал пул-реквест, а ТестИИровщик уже дал предварительный апрув. Я пробежался глазами по коду. В целом почти всё написано корректно. Вот этот кастомный контрол всё же придётся переписать руками — РазраБОТчик не до конца понял требования заказчика. Пара мест реализована недостаточно гибко — я знаю, что в будущем там придётся нарастить новый функционал. Нажал в IDE кнопку «РефакторИИнг», дал подсказки, в какую сторону копать. Пора домой. Прикинув время на сборы, запустил приложение MLshrootka и нажал кнопку «10 минут». Когда вышел из офиса, умная маршрутка как раз выезжала из-за угла. Такси каждый день — это всё-таки неэкономично. MLshrootka — другое дело. Гибко планируя маршрут в реальном времени, она доставляет пассажиров пусть и медленнее такси, зато в разы дешевле. Да и пробок в городе с каждым годом становится чуть меньше…

Олег Плотников aka @Interfer

…Подошёл к подъезду, умный домофон приятным женским голосом сообщил, что горячей воды не будет ещё пять дней, а завтра запланированы работы в лифтовой шахте. То есть, резюмирует железяка, вы сожжёте минимум сто калорий, пока подниметесь на девятый этаж…

Сергей Парамонов aka @varagian

…Система поняла, что я не успею приготовить ужин и заказала доставку. После я собирался на тренировку, но она сказала, что мне лучше посмотреть фильм — сон был не слишком качественный и организм не восстановился. Уже подобрала кино под интересы и дату…

Олег Плотников aka @Interfer

…Ей попросту надо выбрать красивую антиутопию, желательно со Смешариками. Она отлично знает мои предпочтения, но дочка на том же аккаунте постоянно сбивает её алгоритмы. Алиса подозревает, что за учётной записью стоят два человека, однако до конца не уверена, кто всё-таки смотрел Шрека на прошлой неделе (спойлер: я)...

Вадим Шевяков aka @Sirion

…Как же неохота идти спать. Но ещё меньше хочется просыпаться от «ук-ук-ук-ук».

А расскажите теперь вы о том, как машинное обучение меняет это будущее уже сегодня

Что всё это значит и зачем нужно

Технотекстам на узкие темы труднее набирать просмотры и рейтинг, чем статьям про выгорание, деньги и собеседования. Но Хабр придумал способ восстановить справедливость и дать техноавторам ту славу, которую они заслуживают. С лета 2022 года мы проводим сезоны Хабра — конкурсы узкопрофильных статей. Один сезон — одна дисциплина. Продолжительность — полтора месяца. Любой хабраавтор (авторы из корпблогов — тоже) может прислать свой текст и участвовать в гонке за призы.



В результате автор самой рейтинговой статьи забирает главный приз (в этом сезоне — MacBook Air), победитель сезона — грант 30 К на то, чтобы написать ещё текст. Все участники получают бесплатное продвижение сезонных статей в соцсетях.

Требования к статьям

Мы ждём статьи, основанные на личном опыте и собственной экспертизе: опыт разработки и использования инструментов ML, инструкции по решению задач и проблем, собственное профессиональное мнение и взгляд на развитие этих технологий.

Статьи должны быть полезны другим пользователям и читателям: помогать в работе, разбивать предрассудки, решать профессиональные задачи.

Только технохардкор. Нам интересны подробности, нюансы, детали, самые мелкие особенности, — это самый смак.

В центре внимания статей — ML. Применение в реальных задачах, настройка инфраструктуры, подготовка данных, новые подходы к обучению.

Без лишней рекламы или антирекламы. Можно упоминать бренды там, где это уместно, но посвятить статью пиару своего продукта или компании или знатно набросить на конкурентов не получится: все заявки вычитывают люди, а не ChatGPT, так что всё тайное станет явным.

Правила сезона

Сезон ML пройдёт с 1 по 31 марта.

Побеждает статья с наивысшим рейтингом: голосование идёт на протяжении всего сезона, а результаты объявим сразу по завершении.

Один автор может прислать несколько заявок. Больше статей — выше шанс победить, а то и взять всё — от золота до бронзы. Кроме новых текстов принимаем и статьи, опубликованные после 14 февраля. Заявки принимаем до 23:59:59 31 марта.

Участвовать могут даже авторы из «Песочницы» — тут ограничений нет.

Призы и слава

Замолвим за вас словечко перед Skynet и Матрицей — выдадим всем авторам плашку «Участник сезона ML», а победителю достанется значок «Победитель сезона ML» и дополнительный инвайт на Хабр. Машины вас не забудут.

Автору самой рейтинговой статьи достанется Apple MacBook Air 13.

Грант на 30 000 рублей для подготовки ещё одной классной статьи (если на новую статью нет времени, грант можно передать другому участнику).

Участие в конференции ВТБ по машинному обучению, анализу данных и технологиям ИИ Data Fusion.

Как подать заявку

Написать текст в хаб Машинное обучение. Если сомневаетесь, подойдёт ли тема; думаете, как лучше подать, что будет интересно и полезно аудитории; сомневаетесь, что в вашей работе есть интересное и полезное для аудитории — можно спросить у меня в личке — @Mimizavr. Я выступлю в роли робота Марвина :)

При публикации добавить к статье тег «cезон machine learning». Можно прикрепить этот тег и к старой статье — но только если она опубликована после 14 февраля 2023 г.

Если статья подойдёт под критерии сезона, у неё под заголовком появится специальная плашка. А ещё статья попадёт в список участников (следующий пункт в этом анонсе).

Вуаля! Вы на борту «Золотого Сердца» :)

Статьи-участники

Coming soon..."'https://habrastorage.org/getpro/habr/upload_files/a1d/40b/ed0/a1d40bed0df6cc62be0c64e4e7cc30bc.jpg'"['https://habrastorage.org/r/w780q1/getpro/habr/upload_files/24a/1c5/60f/24a1c560ff2e7950e37be2f7a1934f6f.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/529/ee1/1ab/529ee11abef8840afac38c316b275c0b.png', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/25f/ee6/68d/25fee668d2218236f6dbb64001abbd5a.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/69e/5f6/e7f/69e5f6e7f01a0a6f8554af93a8235b98.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/f75/26f/059/f7526f0596f63d89bdfe3ee285aef9b3.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/94c/a51/6c7/94ca516c7dd39a093a6a58201b451530.png', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/52a/e06/7aa/52ae067aaa28fca7b97f40694ff2d941.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/dff/fbd/521/dfffbd5213c5547b0fd819111ed24e5d.jpg', 'https://habrastorage.org/getpro/habr/upload_files/a1d/40b/ed0/a1d40bed0df6cc62be0c64e4e7cc30bc.jpg']"
14'719848'Чем отличаются и на что влияют типы CDN: P2P, Push и Pull'CDN (Content Delivery Network) — распределенная сетевая архитектура, созданная для ускорения доставки контента пользователям. CDN влияет на скорость загрузки любого контента сайтов и...'https://habr.com/ru/post/719848/'"CDN (Content Delivery Network) — распределенная сетевая архитектура, созданная для ускорения доставки контента пользователям. CDN влияет на скорость загрузки любого контента сайтов и приложений, который видит пользователь: аудио, видео, стриминг, изображения, тексты, графика.

Сеть доставки контента делится на три типа: P2P, Push и Pull. В материале разбираемся в отличиях и особенностях разных CDN.

P2P

Peer‑to‑peer CDN — это децентрализованная сеть, в которой пользователи распространяют контент между собой, а не полагаются на централизованный сервер. Данный метод позволяет снизить нагрузку на исходный сервер и повысить скорость доставки контента.

P2P CDN распределяет контент между пользователями. Данная модель не использует HTTP‑серверы, в отличие от традиционных CDN, когда в сетях размещают множество HTTP‑серверов по всему миру, на которых кэшируется и хранится контент.

Сеть доставки контента P2P не является CDN общего назначения, то есть не обслуживает все виды веб‑контента — peer‑to‑peer сосредоточен исключительно на масштабируемом и эффективном распространении видео. P2P CDN работает путем координации пользователей таким образом, чтобы они отправляли видеосегменты контента друг другу вместо того, чтобы каждый постоянно получал сегменты с пограничного сервера.

Push

Push CDN — метод, при котором контент активно передается с сервера происхождения на пограничные серверы CDN. Это может быть полезно для контента, который часто обновляется или имеет высокий спрос.

Вместо того, чтобы извлекать контент с сервера, когда он нужен CDN, контент загружается в сеть заранее. Таким образом, CDN могут кэшировать статический контент и предоставлять его пользователю.

Push CDN дают преимущество гибкости в работе с контентом. Владелец веб‑сайта и создатель его содержимого может напрямую указать, какой контент будет передан на сервер CDN, когда истечет срок его действия и когда он должен быть обновлен. Это эффективное и более простое использование трафика — контент загружается на сервер CDN только при наличии изменений, что позволяет снизить трафик.

Проблема этого подхода заключается в том, что если вы часто обновляете контент и если ваш сервер уже обслуживает другой тяжелый трафик, то такая синхронизация может увеличить нагрузку на сеть.

Pull

Pull CDN — метод, при котором контент запрашивается пограничными серверами CDN с исходного сервера. В отличие от метода Push, сама CDN отвечает за извлечение нужного контента для доставки посетителям. Это наиболее распространенный тип CDN, который может быть полезен для контента, который не часто обновляется или имеет низкий спрос.

Происходит это так: владелец сайта оставляет контент на исходном сервере и переписывает URL‑адреса так, чтобы он указывал на CDN. Когда выполняется определенный запрос на веб‑страницу, CDN извлекает элементы и файлы веб‑страницы с исходного сервера и передает их посетителю. Затем сервер CDN будет кэшировать эту версию страницы до истечения срока ее действия.

Основное преимущество Pull заключается в том, что его довольно легко настроить, поскольку CDN в основном делает всю работу за вас. Кроме того, Pull извлекает элементы и файлы веб‑страниц только после первоначального запроса, за счет чего уменьшается потребление хранилища.

Но данный метод может привести к некоторым проблемам, ведь он менее гибок, чем Push CDN. Часто возникает избыточный трафик, поскольку элементы и файлы веб‑страниц запрашиваются повторно еще до того, как они были изменены.

Кроме того, Pull может быть медленнее Push, поскольку посетители, которые впервые заходят на страницу, или те, кто пытается открыть веб‑страницу после истечения срока хранения элементов и файлов в CDN, могут испытывать меньшую скорость загрузки страницы."'https://habrastorage.org/getpro/habr/upload_files/379/d03/994/379d0399473b838ca8dd39affb6a3533.jpg'"['https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/getpro/habr/upload_files/379/d03/994/379d0399473b838ca8dd39affb6a3533.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/b1a/f90/d9d/b1af90d9d741a0e54d5a216e12f990bc.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/b50/8d1/7f8/b508d17f857e3e9dc6ce1a64fea7d75e.png', 'https://habrastorage.org/getpro/habr/company/139/239/c44/139239c44ac1f16d21fa7d95b4cb60b1.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/c4c/8e7/175/c4c8e7175deb0b6295b8cee89f116567.png']"
15'719846'230 откликов, 3 недели мук выбора и 9 советов тем, кто ищет работу менеджером по проектам в ИТ'Привет, меня зовут Максим Кульгин, моя компания xmldatafeed занимается парсингом много лет. Встал вопрос поиска в команду менеджера по проектам, который будет обрабатывать входящие заявки...'https://habr.com/ru/post/719846/'"Привет, меня зовут Максим Кульгин, моя компания xmldatafeed занимается парсингом много лет. Встал вопрос поиска в команду менеджера по проектам, который будет обрабатывать входящие заявки на парсинг, ставить задачу программистам и сдавать работу клиентам. Поделюсь опытом найма и дам аккуратные, короткие советы соискателям…

Сразу подчеркну, что простые советы ниже относятся к конкретной вакансии в ИТ, но я думаю, что некоторые из них универсальные и подойдут многим, кто думает сменить работу. Это лишь мое частное мнение как работодателя, который сам (без HR менеджера) пытался закрыть вакансию. Текст писал я:), а не chatGPT...

Сама вакансия будет скоро переведена в архив, поэтому я приведу ее ниже, чтобы вы понимали кого мы искали. Никаких особых требований к кандидату мы не выдвигали — хорошие коммуникативные навыки, базовые знания в ИТ, умение работать в команде.

Вакансия. Никаких ""холодных продаж"". Понять задачу заказчика, сформировать стоимость, поставить задачу программистам, проверить результат и сдать работу.

На вакансию я получил, не совру, больше 200 откликов и если вначале еще разбирал их по статусам в HH.RU, то потом просто просматривал резюме с сопроводительным письмом и если глаз «цеплялся» писал в чат (на сайте HH.RU есть такая удобная опция). Все это заняло порядка 3-х недель до момента, когда я пригласил человека выйти на работу. Всего было порядка 10 очных собеседований из тех, кто откликнулся на мое приглашение и смог приехать в офис (мы в Питере). Часть собеседований была по видео‑связи, а потом я приглашал (или нет) познакомиться лично.

Отклики на вакансию менеджера по проектам.

Самая большая сложность в подборе человека на вакансию менеджер по проектам (продукту) в том, что не дать четкое тестовое задание. Когда мы ищем тестировщика или программиста ситуация в раз упрощается тем, что можно попросить сделать тестовое, далее оценить результат и пригласить на очное собеседование тех, кто справился лучше. В нашем случае пришлось читать практически каждое резюме из тех, кто откликнулся.

Предыдущая статья (см. ее здесь) набрала ~25k просмотров — своего рода рекорд для меня, я честно прочитал все комментарии (критику, поддержку и т. п. — их было очень много) и в этот раз решил ограничиться только рекомендациями:) для ситуации, когда вы не крутой специалист, за которым идет настоящая «охота» рекрутов (а таких вакансий, отмечу, большинство, т.к. нужных людей «выдергивают» напрямую, без размещения объявлений).

Итак, позвольте дать мои советы… Ясно, что никогда нет «очереди за забором» от умных и компетентных людей, но если вы осознаете, что на вакансию может быть >100 откликов, конкурс условно 1 к 100, хотите сменить работу и вакансия/компания вам очень симпатична, лучше поставить себя на место работодателя и подумать, как лучше себя «презентовать«.

1. Адаптируйте резюме под вакансию. Не всегда работает менеджер по HR, который вдумчиво изучает отклики и ищет сильные стороны кандидата, если последний постеснялся их четко и ясно выделить. Мой совет — адаптация резюме под конкретную вакансию так, чтобы с первых строк были видны ваши компетенции, наиболее нужные на этой работе. Зайдите на сайт компании, пробегитесь по социальным сетям, если есть видео — посмотрите парочку. Это позволит очень быстро подстроиться под ожидания! Займет, полагаю, ~10–15 минут времени.

2. Пишите сопроводительное письмо. Если вы написали сопроводительное письмо, которое тоже советую адаптировать под вакансию (занимает 2–3 минуты, подчеркнув ваши сильные стороны, нужные для этой работы), то работодатель получит отдельное уведомление на почту с прямой ссылкой в чат. Это резко повышает шансы рассмотрения.

Так, как мне кажется, делать не стоит. Я вам открою секрет :) - таких откликов 70% и если кто-то пишет сопроводительное письмо, это сразу привлекает внимание (мое по крайне мере).

Не стесняйтесь, если вам не ответили, снова написать в чат и напомнить о себе. Поверьте, вы никоем образом не покажитесь навязчивым. При большом количестве откликов, лично я, например, каюсь, иногда пропускал некоторые резюме.

Вот пример просто отличного сопроводительного письма. Позволил себе его привести здесь, т.к. по нему невозможно даже отдаленно понять, где сейчас работает человек, чтобы ему не навредить.

3. Добавьте к сопроводительному письму сразу контакты: почта, телефоны, мессенджеры. Это позволит очень быстро связаться с интересным кандидатом. Лично я предпочитаю сразу перейти в Телеграмм, там списаться и может быть сделать короткий созвон. По итогу созвона уже пригласить человека в офис.

4. Добавьте фотографию к резюме. Не надо стеснятся, просто поверьте, это добавляет привлекательности к вашему резюме. Только не нужно фотографий с рыбалки, например:) Обычное, нейтральное фото, где видно лицо. Вполне достаточно.

5. Старайтесь переходить в личное общение с работодателем в мессенджеры. Если это допускается, то поможет вам установить более прямой/тесный контакт с лицом, которое принимает решение.

6. Позвоните в офис, попросите контактное лицо (часто указано в вакансии) и коротко напомните о своем отклике и желании претендовать на открытую позицию. Тем самым вы проявите заинтересованность, сможете выделиться среди большого количества соискателей. Займет 3–5 минуты, и не надо боятся показаться невежливым!

7. Закрыть вакансию не только «боль» работодателя. Помните, что хотя именно работодатель ищет человека (и кажется, что ему нужно больше, чем вам закрыть вакансию, ведь у него образуется «дырка»), при большом количестве откликов всегда можно выбрать нормального специалиста, упустив, скажем, идеального, который решит, что он настолько крут, что пренебрежёт советами выше. Как работодатель я проявляю инициативу до определенного момента, затем ожидаю увидеть адекватную реакцию на вакансию, если кандидат начинает какие то «игры» — у меня нет времени на это. Все очень просто:)

8. На ваше резюме может быть много откликов, но никто об этом не знает! Можно представить сценарий, что работодатель видит — ага, у меня ~200 откликов и мне должны что‑то эдакое сделать!? А то что у каждого кандидата тоже по 10–50 откликов может быть, он и не подумал. Все верно, но никто о вашей востребованности не знает и будут выбирать из тех, кто выстраивает адекватный, активный диалог!

9. Не нужно, простите, «плясать» перед работодателем. Это глупо и вызывает только отторжение. Вы откликаетесь на вакансию, проявляя свой интерес как профессионал в определенной сфере. Так же ошибочно думать, что получив ~200 откликов работодатель преисполнится важностью и начнет манипулировать. Цель бизнеса — быстро закрыть вакансию наиболее подходящим человеком. Все.

Как видите — советы очень простые. Вряд ли следование им займет у вас более 20–30 минут в день перед откликом на интересую вакансию, а отдача, поверьте, может быть довольно высокой. Все советы очень часто фигурируют в умных книгах по трудоустройству, но мой опыт показал — мало кто им следует.

Ключевое — просто должна быть разумная инициатива и интерес к работе, на которую претендуете. Если это есть — то поверьте, шансы ее получить очень сильно возрастают!

Больше информации вы можете найти в моем личном Телеграм‑ канале «Русский ИТ бизнес» — в нем пишу всю «изнанку», с чем сталкиваемся в процессе работы, без приукрашивания. Если что‑то упустил — спрашивайте в комментариях, отвечу обязательно."'https://habrastorage.org/getpro/habr/upload_files/cc5/da6/a0c/cc5da6a0c414583eadf517c4703158d0.jpg'"['https://habrastorage.org/getpro/habr/upload_files/cc5/da6/a0c/cc5da6a0c414583eadf517c4703158d0.jpg', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/r/w32/getpro/habr/avatars/6a3/595/d5a/6a3595d5a310ba86011506b2ae5f62e9.jpg', 'https://habrastorage.org/getpro/habr/company/84b/811/faa/84b811faa91bf503b4d9c3fd1fedd3dc.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/d58/63b/2f2/d5863b2f2ed16978ae1cc70c49fab9fb.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/f9f/b0d/892/f9fb0d892a3a9b2badc52fb2cc854158.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/108/d67/a67/108d67a67a7777983d99649a592711b0.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/c1d/63b/95d/c1d63b95dadbb40bc06e3c79ee0eedcf.png', 'https://habrastorage.org/getpro/habr/avatars/6a3/595/d5a/6a3595d5a310ba86011506b2ae5f62e9.jpg']"
16'718918'Программа для магазина на Android, ч. 2 — Нативатор Касса'Продолжаем. Предыстория здесь , первая часть цикла статей про наше облако Нативатор с мобильными приложениями для онлайн и офлайн торговли — здесь . Клиент с задачей из твоего...'https://habr.com/ru/post/718918/'"Продолжаем. Предыстория здесь, первая часть цикла статей про наше облако Нативатор с мобильными приложениями для онлайн и офлайн торговли — здесь.

Клиент с задачей из твоего плана разработки - это удача

В 2016 году к нам обратился клиент с такой задачей: поставить для небольшой сети розничных магазинов одежды такую кассовую программу, чтобы бонусы накапливаемые покупателями, быстро синхронизировались между торговыми точками. Быстро — это пока клиент идет по торговому центру из магазина в магазин. На тот момент у этого клиента было несколько магазинов в одном торговом центре. Продавцы вручную записывали на бумажную визитку магазина бонусы с датой начисления (скидку) и отправляли в следующий магазин, чтобы клиент мог купить там другой товар и сразу потратить эти бонусы. Следующим условием клиента был обязательный учет продаж каждого кассира. Это предполагалось делать вводом кода кассира в момент продажи. И еще важным моментом было условие по отправке смс клиенту с кодом для списания бонусов. Для того, чтобы продавцы не могли злоупотреблять скидками.

В качестве кассовой системы у них стояла устаревшая программа для магазина от одного из производителей касс. Многие знают, что производители касс — не самые лучшие разработчики кассового софта. И синхронизация данных между бэкофисом и торговыми точками представляла из себя какой‑то кошмар, от которого клиент хотел избавиться.

Можно ли превратить проект в тиражное решение?

Задача была непростая. В том смысле, что клиент хотел готовое решение, а я хотел создать кассовое решение под эту задачу на основе нашего приложения Нативатор Заказы. Для складского учета у этого клиента была не очень распространенная программа. Мы вытащили из нее все данные в Excel‑таблицы и загрузили в 1С:Управление торговлей. Осталось убедить клиента в том, что наше решение для касс, которое мы напишем сами, будет отвечать их требованиям.

Убедить получилось благодаря простому сравнению стоимости. Конечно я занизил стоимость проекта, но ведь у нас было из чего делать, мы начинали не с чистого листа. Я предполагал что каркас решения и базовая синхронизация с 1С у нас уже есть, останется его немного доработать и добавить некоторый функционал. Больше всего времени заняла разработка системы лояльности. Для упрощения задачи мы просто повторили логику этой подсистемы из 1С, чтобы бонусы легче было синхронизировать.

Однажды у нас слетела русификация с принтера купленного на Aliexpress, пришлось обращаться к производителю



В части оборудования нам предстояло добавить работу со сканером штрих-кода и печатать чеки на обычные чековые принтеры. Денис и с этой задачей справился отлично. Проект был выполнен не так быстро как хотелось, но в итоге система работала без сбоев, бонусы начислялись и списывались после ввода кода, который приходил клиенту по смс. Клиент был так доволен, что озвучил планы, по созданию интернет-магазина. Мы уже зарекомендовали себя с положительной стороны, поэтому выбор исполнителя был очевиден. Скажу откровенно, что мне хотелось поскорее взяться за задачу по созданию интернет-магазина.

Планы по интеграции с интернет‑магазином у нас уже были, просто я ждал подходящего клиента. Было такое ощущение, что наше будущее само шло к нам в руки. И это круто, что за ним не пришлось бегать или искать его с фонариком.

Довольный клиент рано или поздно приведет еще клиентов

Эта избитая фраза про довольного клиента, который приведет еще одного клиента, а недовольный уведет всех потенциальных и возможно даже существующих, конечно сработала и в нашем случае.

Почти сразу после этого проекта, мы по его рекомендации продали наше решение еще в несколько небольших торговых сетей из двух‑трех магазинов. Забавно, что рекомендовал решение не сам заказчик, а продавцы, у которых соседние магазины спрашивали на чем они работают.

Хозяйственный магазин

Сказать что все было абсолютно идеально и гладко, было бы нечестно. Однажды нам пришлось вернуть деньги клиенту за автоматизацию магазина, которому не понравилось наше решение. Это был магазин автозапчастей, владельцу которого нас порекомендовал мой брат. После внедрения пришел какой‑то умник, и сказал что они купили какое‑то странное и не очень хорошее решение. Чтобы не портить никому настроение, я принял решение забрать оборудование и вернуть деньги с небольшой скидкой и рассрочкой. Это всех устроило. Самое главное — мы избежали недовольного клиента. Постепенно мы улучшали наше решение на основе отзывов клиентов, но добавляли только тот функционал, который считали что будет полезен всем остальным клиентам.

Поддержка онлайн-касс 54 ФЗ и торгового оборудования

Через два года после разработки приложения, параллельно с добавлением драйвера ККТ для фискальных регистраторов Атол, мы включили полную поддержку закона 54, а впоследствии доработали приложение для совместимости с форматом фискальных данных 1.2 (ФФД 1.2).

Процесс перехода с принтера чеков на онлайн-кассу 54ФЗ

По мере запросов клиентов, появлялась необходимость подключения другого электронного торгового оборудования. Таким образом мы сделали поддержку сканеров штрих‑кода в режиме СOM‑порта, а также у нас появилась поддержка электронных весов, табло покупателя и принтеров чеков. Принтеры чеков можно использовать для печати заказа на кухню, пока не пробит фискальный чек. Или вместо онлайн кассы, если такой режим необходим.

Почему рабочее место кассира на Android лучше чем для Windows?

Адаптация приложения под смарт-терминал

Во первых, стоимость железа. Никто не будет спорить, что планшет на Android существенно дешевле десктопа с Windows. На смарт‑кассах, которые пришли на смену кнопочным кассам, мы убедились, что производительности среднего Android планшета хватает для этой задачи. Во вторых, удобство работы — тачпады и раньше были популярны, но мониторы с тачпадом для Windows были дорогими. Емкостные тачпады против резистивных на Windows удобнее и практичнее, это видно уже на примере прокрутки списков. Планшет — это более дешевый вариант POS‑терминала с сенсорным экраном.

В третьих, компактность на рабочем месте. Планшет экономит рабочее пространство на столе, а если его разместить не на подставке, а на вертикальной стойке вместе с банковским терминалом, то он вообще не занимает места на рабочем месте кассира. Громоздкий POS‑терминал на Windows кажется каким‑то мейнфреймом, по сравнению с планшетом.

В четвертых, автономность. Для традиционного десктопа необходим ИБП, он обеспечит только корректное завершение работы, так как его хватит минут на пять‑десять. А вот планшет может проработать на своей батарее целый рабочий день. Даже если фискальный регистратор обесточен, можно делать все чеки отложенными, а потом когда появится электричество — пробить их на онлайн кассе.

Hidden text Пока нет совместимой POS клавиатуры для Android, вышеизложенное сравнение актуально для магазинов с невысокой проходимостью или для кафе. Хотя вопрос скорости работы можно решить быстрыми кнопками, выведенными на главный экран.

Угадайте известную торговую сеть, которая внедрила рабочие места кассиров на Android планшетах, на фото есть подсказка

Есть ли будущее у таких кассовых решений на Android?

Один из плюсов такого решения — внедрение за пару часов. Мы уже поняли одно из главных преимуществ — автоматизация сезонной торговой точки общепита или торговли. Раньше им не нужна была автоматизация, а сейчас любая торговая точка обязана пробивать фискальные чеки. И облачный вариант учетной системы на три месяца — выход из ситуации. А с фискальным накопителем такие сезонники придумали следующий лайфхак — регистрируют ФН на 15 месяцев в конце мая и его хватает на два сезона.

От массового применения нашего решения в кафе или ресторанах нас останавливает временное отсутствие интеграции с ЕГАИС. Что касается обязательной маркировки товаров, то у наших клиентов не было выбора, они просто подождали пока мы адаптируем приложение для магазинов Нативатор Касса под этот закон.

С 1 октября планируется введение маркировки пива и слабоалкогольных напитков в стеклянной таре и ПЭТ упаковках, а с 15 января 2024 года маркируется пивная продукция в иных видах потребительской упаковки (алюминиевые банки и т. д.). Так как это планируется делать через «Честный знак», то можно сказать, что мы к этому готовы. Что касается ЕГАИС, то ждем клиента, который согласится чтобы мы обкатали эту интеграцию на нем.

Кому может быть выгодно кассовое приложение для магазинов именно для Android? Если на автоматизации одного магазина вы немного экономите в стоимости внедрения, то в торговой сети выигрыш в цене будет огромный.

Отдельно стоит упомянуть мощную систему лояльности, которая дает безграничные возможности по использованию подарочных сертификатов, промо‑кодов, автоматических скидок по конкретному условию или без условий. А накопительные бонусы, которые одновременно работают в офлайне и онлайне вообще мечта каждого, кто хочет интернет‑магазин, и при этом не хочет разрываться между офлайн и онлайн бизнесом. Ведь движок интернет‑магазина интегрирован в ядро нашего облака. Да, это действительно наш собственный движок, но это уже отдельная история для следующих публикаций, в которых я расскажу о складской программе Нативатор Склад и более подробно о встроенном интернет‑магазине.

Сегодняшний тренд — торговля на маркетплейсах. Есть запрос от наших клиентов, сделать интеграцию не только с интернет‑магазином, но и с маркетплейсами. Кроме интеграции с маркетплейсами, в ближайшие месяцы мы планируем добавить две нейросети, собственную — Benzin neural network, которая будет удалять фон у загруженных фотографий товаров, и вторую нейросеть, которая будет делать описание товаров.

Эта статья — не просто реклама, как может показаться на первый взгляд. Это рассказ о том, как появляются программные продукты из одной маленькой мечты иметь так называемый «свой свечной заводик». Мы верим, что это вырастет во что‑то большее. А главное, в чем я не сомневаюсь, что кого‑то эта история сможет мотивировать на создание нового продукта. Конечно это долго и сложно. Но ведь со мной это сработало, и я делюсь тем, что в результате чтения таких историй у меня получилось."'https://habrastorage.org/getpro/habr/upload_files/0b5/612/425/0b5612425a5ef1d91ed49da2dbd96903.jpg'"['https://habrastorage.org/r/w780q1/getpro/habr/upload_files/207/196/55c/20719655cb02f0305dcc68a6c8ce6328.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/5f1/dbd/87f/5f1dbd87f4cdf394a8087cdd21ab33f5.jpg', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/getpro/habr/upload_files/0b5/612/425/0b5612425a5ef1d91ed49da2dbd96903.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/e78/72f/368/e7872f368f68e2feaba3f4aa5b673756.jpg', 'https://habrastorage.org/r/w32/getpro/habr/avatars/08e/425/6fa/08e4256fafbaf8f5399e3d59c3f98e61.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/670/ac3/6ca/670ac36ca4c91534fa115b0489c7bf95.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/5fa/09a/6fb/5fa09a6fb15cf7d7c14c350f4e073edf.jpg', 'https://habrastorage.org/getpro/habr/avatars/08e/425/6fa/08e4256fafbaf8f5399e3d59c3f98e61.jpg']"
17'719332'Вариант реализации DSL (domain-specific language) с помощью макросов'Близится релиз языка NewLang с принципиальной новой «фишкой», переделанным вариантом препроцессора, который позволяет расширять синтаксиса языка для создания различных диалектов DSL за счет макросов....'https://habr.com/ru/post/719332/'"Близится релиз языка NewLang с принципиальной новой «фишкой», переделанным вариантом препроцессора, который позволяет расширять синтаксиса языка для создания различных диалектов DSL за счет макросов.

И, как всегда, используя ранее найденный лайфхак Хабр — ума палата, хотелось бы получить от читателей обратную связь насчет предлагаемого ниже подхода, который планируется к реализации в новом препроцессоре NewLang.

О чем идет речь?

DSL (Предметно-ориентированный язык) — язык программирования, специализированный для конкретной области применения. Считается, что использование DSL существенно повышает уровень абстрактности кода, а это позволяет вести разработку более быстро и эффективно и существенно упрощает решение многих задач.

Условно, можно выделить два подхода к реализации DSL:

Разработка независимых трансляторов синтаксиса с помощью генераторов лексеров и парсеров для определения грамматики целевого языка посредством БНФ и регулярных выражений (Lex, Yacc, ANTLR и т. д.) и последующей компиляцией полученной грамматики в машинный код.

Разработка или встраивание диалекта DSL на языке (метаязыке) общего назначения, в том числе за счет применения различных библиотек или специальных парсеров / препроцессоров.

Далее речь пойдет о втором варианте, а именно, о реализации DSL на базе языков (метаязыков) общего назначения и новом варианте реализации макросов в NewLang как основы для разработки DSL.

Две крайности

Наверно имеет смысл начать с описания о двух крайностях при реализации DSL на базе языка (метаязыка) общего назначения:

Ограниченная грамматика

Если язык программирования ограничен собственной фиксированной грамматикой и не допускает её расширения, то при реализации DSL разработчик будет вынужден использовать уже существующую грамматику, правила записи операций и вообще весь синтаксис будет оставаться такими же, как в языке реализации. Например, при использовании в качестве базового языка С/С++ или применении различных библиотек и фреймворков в других языках программирования общего назначения.

В этом случае под термином ""DSL"" будет скрываться просто набор специфических терминов предметной области, переопределенных макросов и/или операторов, но использование которых будет ограничено грамматикой языка реализации.

Неограниченная грамматика

Если же язык (метаязык) позволяет модифицировать собственную грамматику (например на уровне AST), то DSL уже не будет жестко огранен синтаксисом базового языка программирования, и в результате его грамматика может быть какой угодно. Вплоть до того, что «для каждого нового проекта придется изучать новый язык… ». Это можно сделать с помощью использования специализированных метаязыков (Lisp, ML, Haskell, Nemerle, Forth, Tcl, Rebol и пр.)

Очень рекомендую прочитать о метапрограммровании великолепную статью NeoCode Метапрограммирование: какое оно есть и каким должно быть.

Для обсуждения предлагается следующая реализация макросов

«Нет в мире совершенства», и после выпуска релиза NewLang 0.2 я получил много отзывов (по большей части негативных), по поводу первого варианта реализации макросов и DSL на их основе. И если положить руку на сердце, эта критика часто была обоснованной. Поэтому я решил попробовать немного переделать макросы, в надежде получить «золотую середину» между двумя описанными выше крайностями при описании DSL.

Используемая терминология

Макросы в NewLang, это один или несколько терминов, которые заменяются на другой термин или на целую синтаксическую конструкцию (последовательность лексем). Макросы являются одновременно и расширением базового синтаксиса языка, при реализации собственных диалектов DSL, и синтаксическим сахаром.

Главная особенность макросов в том, что они позволяют изменять выражения еще до их вычисления во время выполнения. Раскрытие макросов происходит во время работы лексера, что позволяет подменять ими любые другие термины и даже модифицировать сам синтаксис языка.

Поэтому, если перед именем объекта NewLang модификатор не указывать (\макрос, $локальная_переменная или @модуль), то сперва будет производиться поиск объекта среди макросов, потом среди локальных переменных и в последнюю очередь среди модулей (объектов модуля). За счет этого можно использовать термины без обязательных модификаторов для указания конкретных типов объектов.

Определение макросов

Для определения макросов используется точно такой синтаксис, как и для других объектов языка (применяются операторы «::=», «=» или «:=», соответственно для создания нового объекта, присвоение нового значения уже существующему или для создания объекта / присвоения нового значения объекту не зависимо от его наличия или отсутствия).

В общем виде, определение макроса состоит из трех частей <имя макроса> <оператор создания/присвоения> <тело макроса> и завершающая точка с запятой "";"".

Тело макроса

Телом макроса могут быть корректное выражение языка, последовательность лексем (которые заключается в двойные обратные слеши, т.е. \\лексема1 лексема1\\) или обычная текстовая строка (обрамленная в тройные обратные слеши, т.е. \\\ текстовая строка \\\).

Имя макроса

Именем макроса может быть одиночный идентификатор с префиксом макроса ""\"" или последовательность из нескольких лексем. Если в качестве имени макроса используется последовательность лексем, то среди них должен быть как минимум один идентификатор и может присутствовать один или несколько шаблонов.

Шаблон — это специальный идентификатор который при сопоставлении может заменяться любым одиночным термином. С помощью шаблонов производится поиск по образцу и замена заданных последовательностей лексем на тело макроса.

Для указания шаблона в начале идентификатора нужно поставить знак доллара (что соответствует записи имени локальной переменой), т. е. \\одна_лексема\\, \\целых три лексемы\\ \\лексема $шаблон1 $шаблон2 \\.

Макросы считаются одинаковыми, если их идентификаторы равны, количество элементов в их именах совпадает, а идентификаторы и шаблоны располагаются на тех же самых местах.

Аргументы макросов

Один из терминов или шаблонов в имени макроса может иметь аргументы, которые указываются в круглых скобках. Переданные аргументы в теле макроса записываются в месте для раскрытия как имя локальной переменой, но перед именем (или порядковым номером аргумента) нужно добавить обратный слеш, т.е. \$name или \$1 .

Произвольное количество параметров у макроса отмечается троеточием ""..."", а место для вставки этих аргументов отмечается символом \$*.

Например:

\макрос1 := 123; \макрос2(arg) := {func( \$arg ); func2(123);}; \\макрос из(...) лексем\\ := \\ call1(); call2( \$* ); call3() \\; \текстовый_макрос := \\\ строка для для лексера \\\; # Обычные макросы (тело макроса корректное выражение) \macro := replace(); \macro2(arg) := { call( \$arg ); call()}; \\func name1(...)\\ := name2( \$* ); # Тело макросов из последовательности лексем \if(...) := \\ [ \$* ] --> \\; # Выражение может быть не полным \else := \\ ,[ _ ] --> \\; # Выражение может быть не полным # Тело макроса из текстовой строки (как в препроцессоре С/С++) \macro_str := \\\ строка - тело макроса \\\; # Строка для лексера

Какие возможности это дает?

Таким образом можно определять следующие комбинации макросов:

№ п/п Имя макроса Тело макроса ---------------------------------------------------------------- 1. \идентификатор выражение 2. \идентификатор \\лексема1 лексема2\\ 3. \идентификатор \\\строка для лексера\\\ 4. \\лексема1 лексема2\\ выражение 5. \\лексема1 лексема2\\ \\лексема1 лексема2\\ 6. \\лексема1 лексема2\\ \\\строка для лексера\\\

Данные комбинации определения макросов имеют следующие свойства и ограничения:

Классическая замена одного термина на другой термин или целое выражение. Однократно обрабатывается лексером и парсером при определении. Выражение в теле макроса должно быть корректным с точки зрения синтаксиса и при наличии в нем ошибок, сообщение об этом формируется сразу, еще при определении макроса.

Классическая замена одного термина на последовательности лексем, в том числе и не полные синтаксические конструкции. Однократно обрабатывается лексером при определении макроса. Тело макроса анализируется парсером при его использовании, поэтому возможные синтаксические ошибки будут замечены только при раскрытии макроса.

Классическая замена одного термина на текстовую строку, которая подается на вход лексера. Однократно обрабатывается лексером только имя макроса при его определении, что позволяет модифицировать тело макроса и изменять/комбинировать/модифицировать лексемы до их подачи в анализатор. Синтаксические ошибки будут замечены только при раскрытии макроса.



4, 5 и 6. Замена последовательности из нескольких лексем (шаблонов) на выражение, последовательность лексем или текстовую строку соответственно.

Назначение и примеры использования

Макросы используются и для преобразования базового синтаксиса NewLang в более привычный синтаксис на основе ключевых слов, так как такой текст гораздо легче воспринимается при последующем чтении исходного кода.

Если перед именем объекта NewLang модификатор не указан (\макрос, $локальная_переменная или @модуль), то сперва ищется имя макроса, потом имя локальной переменной и в последнюю очередь имя модуля (объекта модуля). За счет этого получается определять синтаксис DSL в привычной записи без обязательных префиксов у разных типов объектов.

Например, запись условного оператора на основном синтаксисе NewLang:

[condition] --> { ... } [ condition2 ] --> { ... } [ _ ] { ... }; # С помощью макросов \if(...) := \\ [ \$* ]--> \\; \elif(...) := \\ ,[ \$* ]--> \\; \else := \\ ,[ _ ]--> \\; # Превращается в классическую запись if( condition ){ ... } elif( condition2 ) { ... } else { ... };

Или цикл до 5:

count:=1; [ 1 ] <-> { [count>5] --> { ++ 42 ++; }; count+=1; };

будет выглядеть более привычно с использованием соответствующих макросов:

\while(...) := \\ [ \$* ] <-> \\; \return(...) := ++ \$* ++; count:=1; while( true ) { if(count>5) { return 42; }; count+=1; };

Удаление макросов

Для удаления макроса нужно присвоить ему пустую последовательность лексем \macro_str := \\\\; . Так же для удаления можно использовать специальный синтаксис: \\\\ name \\\\; или \\\\ \\два термина\\ \\\\; , т.е. указать имя макроса между четырьмя обратными слешами.

Необходимость использования отдельной синтаксической конструкции для удаления макросов вызвана тем, что имена макросов обрабатываются лексером еще до этапа анализа в парсере.

В чем профит?

Базовый синтаксис языка можно разбавлять дополнительными ключевыми словами и превратить его в привычный «keyword-based». Определение макросов соответствует лексике языка, а сами макросы обрабатываются как обычные объекты. Простота анализа исходного кода и его отладки. Использование терминов DSL и приемов метапрограммирование можно сделать явным, например, всегда перед именем макроса указывать префикс. В этом случае компилятор будет однозначно знать, что требуется выполнить раскрытие макроса. Несмотря на то, что синтаксис языка на свой страх и риск можно значительно модифицировать, но это можно сделать только в рамках определенные ограничений (аргументы могут быть только у одного термина, AST нельзя модифицировать напрямую, и т. д.), что не позволяется очень сильно разгуляться и, например, обрушить или подвесить компилятор. Несмотря на очень большие возможности по модификации синтаксиса, получается очень простая, быстрая и однозначная реализация. А это положительно сказывается на скорости анализа исходников, детектирования и обработки возможных ошибок и одновременно является разумным компромиссом между сложностью реализации данного функционала и возможностями определения собственных диалектов DSL. При желании есть куда развивать возможности метапрограммирования. В будущем можно добавить сопоставление шаблона с образцом (например, на основе регулярных выражений), сделать параметризацию строки для генерации синтаксиса в теле макроса, в том числе и в рантайме, и много других разных способов изящно выстрелить себе в ногу или ногу своего товарища.

Заключение

Буду благодарен за любую обратную связь по данной реализации макросов. И дважды благодарен, если кроме критики будут высказаны еще и предложения по её улучшению и доработкам, если какой-то момент был упущен."'https://habrastorage.org/webt/td/gy/hn/tdgyhncdghidbc1jhqzjflht_hs.png'"['https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/r/w780q1/webt/r9/4d/tu/r94dtuimvtiiuntx5xpunndaetq.jpeg', 'https://habrastorage.org/webt/td/gy/hn/tdgyhncdghidbc1jhqzjflht_hs.png', 'https://habrastorage.org/r/w1560/webt/p-/u9/l2/p-u9l27ynelxi92bcmdxhu76ma8.png', 'https://habrastorage.org/getpro/habr/company/fc0/4f0/3f7/fc04f03f7188eca615ef971283d62dc5.png']"
18'719836'Технический долг. Как не обанкротиться'Привет, Хабр! Хотел бы поделиться с вами своим анализом работы с техническим долгом. Технический долг  (также известный как  долг кодинга ) — это метафора  программной инженерии ,...'https://habr.com/ru/post/719836/'"Привет, Хабр! Хотел бы поделиться с вами своим анализом работы с техническим долгом.

Технический долг (также известный как долг кодинга) — это метафора программной инженерии, обозначающая накопленные в программном коде или архитектуре проблемы, связанные с пренебрежением к качеству при разработке программного обеспечения и вызывающие дополнительные затраты труда в будущем.

Как появился этот долг? Мы его взяли что бы поставить заказчику функционал раньше, чем мы бы смогли, если бы не ""заняли"". Так же как бизнесмен берет кредит для своей бизнес идеи.

💡 Экстремальное программирование — это пример разработки с кредитом качества

Проценты выплачиваются при выполнении задач. Многие встречали ситуацию когда продукт‑менеджер говорит: «Да тут небольшое изменение внести”, а разработчик пытается объяснить что там кривая архитектура и вообще все на костылях держится и нужен месяц на такую фичу. Разница между работой над конкретной фичей и реальными затратами с учетом костылей, является наш процент. И он постоянно растет, если не оплачивать основной долг.

Технический долг (ТД) как глыба льда под водой, невидимая для бизнеса. И цель разработчиков эту глыбу показать и устранить.

Не следует яро стремиться к полному погашению долга. Необходимо уметь правильно оценивать свою «финансовую» нагрузку и не брать на себя больше обязательств, чем способен исполнить. «Если кинуть все силы на долг, то можно остаться без дохода и обанкротиться».

Варианты технического долга

😎Осознанный: осознанные компромиссные решения и костыли.

🐞Неосознанный: отсутствие стандартов, отсутствие контроля чистоты кодовой базы, неосознанные костыли.

🧐Как уменьшить основной долг

Для начала нужно избавиться от неосознанных кредитов:

Развиваем команду Внедряем стандарты написания кода Проводим Code Review

Ставим задачи на приоритеты Необходимо сформировать бэклог задач и выдвигать на приоритеты их выполнение. Важно аргументировать, лучшим аргументом был постоянно увеличивающийся срок реализации простых с виду задач — разработчики знали, сколько сложных мест в коде им придётся обойти, сколько новых костылей расставить, и закладывали эти параметры в общую оценку задачи. После нескольких таких планирований продукт-менеджеры сами предлагали команде взять задачи на рефакторинг.

Встречаем сопротивление Одна из сложностей в отношении технического долга заключается в вовлечении бизнеса в принятие решений. Бизнесу сложно аргументировать. Задачи копятся но не выполняются. Предусматривайте ресурсы для работы с ТД. Самая распространённая модель — это 70% для обычной работы, 20% для технического долга и 10% для обучения/экспериментов. Проблема здесь кроется в том, что крупные проблемы с техническим долгом никогда не решаются всего за 20% времени. Их переносят от спринта к спринту, в ходе переноса теряется контекст, и добиться нужного результата становится труднее. Ещё одна сложность заключается в невозможности соблюдения точных временных рамок при решении разных задач.

Проводим “Реструктуризацию” технического долга Необходимо разбить работы по общим контекстам. Можно вести бэклог с мелкими задачами, можно завести один общий чек-лист или использовать блоки TODO для фиксации мелких долгов. Важно, что бы при планировании бизнес задач мы легко могли увидеть все пересечения с тех долгом.

⚖️Инкрементный рефакторинг

Рефакторинг — это контролируемый процесс улучшения кода, без написания новой функциональности.

Контролируемый — подразумевает итерационный процесс улучшения.

💡 «Всегда оставляйте лагерь чище, чем он был до вас»

Делаем перевес в выплату основного долга вместо процентов. При планировании задач выделяем сразу работы по мелкому рефакторингу если в задаче есть пересечение с ТД. Важно сохранить общие сроки задачи, тогда бизнесу не следует даже говорить о тех долге. Если сроки увеличиваются, то придется согласовывать работы и отгрызать каждый час работ. Из-за декомпозиции ТД отклонения будут не большие и шанс аргументировать будет больше, чем при полномасштабном рефакторинге.

70/20 - из описания выше мы знаем 70% для обычной работы, 20% для технического долга и 10% для обучения/экспериментов. В случаи постепенного рефакторинга, 20% это будет буфер отклонения от бизнес задачи. Т.е. это то время на которое мы можем отклониться от сроков задачи в пользу устранения ТД. Эта модель может быть дикая по отношению к бизнесу, поэтому используйте ее с опаской.

Так же, как и в случаи полномасштабного рефакторинга, в инкрементном рефакторинге необходимо различать личное желание разработчика улучшить некоторые места в коде и реальную необходимость оптимизации или рефакторинга, чтобы избежать дальнейших проблем при расширении и изменении функциональности.

💡Закон убывающей предельной полезности гласит, что по мере увеличения количества потребляемого экономического блага его предельная полезность имеет тенденцию к сокращению.

Т. е. не следует тратить на рефакторинг много времени. Необходимо получить максимальную выгоду и вовремя остановиться.

🏅Подведем итоги"'https://habr.com/share/publication/719836/5df5751d70bba5b5f1987213e7ae9f80/'"['https://habr.com/share/publication/719836/5df5751d70bba5b5f1987213e7ae9f80/', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/c2c/6f4/5f0/c2c6f45f0e688cda277532a0236233de.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/977/726/c7f/977726c7fb6ba05febb8a9e911ac8307.png', 'https://mc.yandex.ru/watch/24049213']"
19'719834'Обзор сервисов внешней аналитики маркетплейсов 2023 года: бесплатные, платные, что умеют и не умеют, какой выбрать'Это не рейтинг Forbes из разряда “кто больше зарабатывает на маркетплейсах”. Это срез рынка, в котором работаем и мы сами. Третий год подряд наша команда делает обзор сервисов внешней аналитики...'https://habr.com/ru/post/719834/'"Это не рейтинг Forbes из разряда “кто больше зарабатывает на маркетплейсах”. Это срез рынка, в котором работаем и мы сами. Третий год подряд наша команда делает обзор сервисов внешней аналитики маркетплейсов. Для начинающих и опытных селлеров, поставщиков, маркетологов, аналитиков. Мы старались, чтобы статья, в первую очередь, оказалась полезна тем, кто еще ищет свой сервис внешней аналитики маркетплейсов, оптимальный по цене-качеству. Не исключено, что кто-то и вовсе не видит надобности в сервисах внешней аналитики и считает, что успешно продавать на маркетплейсах можно и без них. Можно. Но это, словно ходить по улице с закрытыми глазами. Большая вероятность, что не туда придете. Если вы все же чувствуете потребность, что для вывода нового товара, увеличения объемов продаж и выручки, масштабирования бизнеса, вам просто необходимо следить за чужими показателями и быть в курсе, что хорошо, а что плохо продается на маркетплейсах, тогда можете потестить сервис внешней аналитики. Какой? Выбирайте, какие критерии для вас особенно важны и делайте выводы.

Выжившие и выбывшие

В 2021 году мы оценивали ровно 20 сервисов внешней аналитики маркетплейсов. В прошлом году их было уже 23. В 2023 году будет 29. Прошлогодние игроки - молодцы. За год “не сдулись”, с рынка не ушли, кроме RetailTool. Доступ на сайт этого сервиса оказался закрыт. А новеньких прибавилось. В их числе - e -Comet, LikeStats, Salist, SellerStats, SellerExpert, StatFlow, Woysa. Все они появились на рынке либо после выхода наших прошлых обзоров, либо мы их просто несправедливо забыли включить в 2022 году. Если мы кого-то еще упустили, на ваш взгляд, напишите, пожалуйста, нам в комментариях под этой статьей.

Наш сервис внешней аналитики маркетплейсов SellerFox- не первый и не последний игрок в столь конкурентной нише. Да, есть сервисы, до которых нам еще расти и расти, а есть те, которых мы уже обогнали по многим показателям. Включать свой сервис в обзор мы по традиции будем вне конкурса. Слишком любим свой продукт SellerFox, а статью хочется сделать максимально объективной.

Также мы постарались учесть комментарии под прошлогодней статьей. По просьбе продавцов и представителей сервисов аналитики маркетплейсов добавили в обзор SellerStats. Также скорректировали название сервиса Sellermatics, заменили на Sellmonitor. В прошлом году указали его не совсем верно. Это одна экосистема, просто продукты - разные. Все названия сервисов мы расположили в алфавитном порядке. Так уж сложилось, что все предпочли назваться модно :), по-английски, поэтому располагаем участников обзора от A до Z. Наш SellerFox вне конкурса - в списке 17-ый по счету.

Участники обзора

1. Аdapter

2. e -Comet

3. EggHeads Solutions

4. HunterSales

5. LikeStats

6. LookFor.sale

7. MarketGuru

8. MarketVision

9. Mayak

10. MoneyPlace

11. MPHelp

12. MPStats

13. MScout

14. Pandora10

15. Pi-Data

16. Salist

17. SellerFox (ВНЕ КОНКУРСА)

18. Sellmonitor

19. SellerStats

20. SellerExpert

21. Shopstat

22. Stat4Market

23. StatFlow

24. Wbcon

25. WBExpert Анабар (ныне Анабар)

26. WBreport

27. Wildbox

28. Wolbe

29. Woysa

И еще один очень важный момент. В обзор попали только сервисы ВНЕШНЕЙ аналитики, которые позволяют собирать “чужую” информацию о выручке, объемах продаж, перемещениях товаров, продавцах и брендах на маркетплейсах.

Сервисы внутренней аналитики - отдельная “история”. Они помогают продавцам собирать данные о движении и продажах их собственных товаров, планировать будущие отгрузки, объемы продаж и выявлять неликвидные товары. Некоторые сервисы внешней аналитики предлагают одновременно функционал по внутренней аналитике. Они также будут включены в обзор и обязательно получат балл в свою копилку за “универсальность”.

Критерии оценки

Все сервисы, которые попали в обзор, мы оцениваем по 10 критериям:

Наличие тестового периода

Наличие обучающих материалов

Количество анализируемых площадок

Стоимость тарифов (от минимальной до максимальной, в рублях)

Наличие реферальной программы

Возможность подключения внутренней аналитики

Наличие экспорта данных

Возможность разделить доступ между сотрудниками

Возможность сбора данных за длительный период

Работа службы поддержки

Баллы выставляем от 1 до 10. Итак, поехали.

Наличие тестового периода

Все мы любим “халяву”. Хорошо, перефразируем. Все мы любим что-то “потестить” и при этом не платить. Так называемая демо-версия сегодня есть практически во всех сервисах внешней аналитики. Это довольно распространенный маркетинговый ход, чтобы завлечь на свою площадку новых потребителей, показать преимущества. Максимальный балл за возможность пользоваться сервисом бесплатно - 10 баллов в зависимости от длительности.

Наличие тестового периода

Как видите, в основном сервисы предоставляют тестовый доступ на 24 часа, на 3 или 7 дней. Единицы готовы впустить вас ""в гости"" на месяц. Одни сервисы открывают “душу нараспашку”, предоставляя доступ ко всему интерфейсу. Другие - заметно ограничивают функционал в демо-версии или готовы предоставить его лишь после того, как вы запишитесь на демонстрацию сервиса. Есть и вовсе бесплатные сервисы, но бесплатным бывает обычно “сыр в мышеловке”. На наш взгляд, тестовый тариф - на то и тестовый, чтобы открывать пользователю все возможности, показать структуру и инструментарий сервиса. Также селлер сможет проверить правдоподобность данных, например, сверив их с собственными продажами в разные периоды времени.

Наличие обучающих материалов

Как театр начинается с вешалки, так компания начинается с лендинга. Здесь у всех все неплохо, сайты научились делать многие. Кстати, в нашем обзоре нашлись “зеркальные” сайты. На первый взгляд не отличишь, где StatFlow, где Woysa - так похожи официальные страницы этих сервисов. Сегодня обучать продажам на маркетплейсах в интернете готовы многие, но качественно это делают далеко не все. Интерфейс сервиса внешней аналитики для новичка может показаться “темным лесом”. Разберись, что какая цифра показывает. Впрочем, начинающим аналитиком сегодня может стать каждый, если под рукой будет качественный инструмент для этого и подробный гайд. В рамках этого критерия мы будем оценивать наличие YouTube-каналов, где можно посмотреть бесплатные видеоинструкции по использованию сервисов аналитики. Есть YouTube-канал и обучающее видео - ставим 5 баллов. Нет YouTube-канала - ставим 0. Качество контента оценивать не будем, поскольку эта вещь довольно субъективная. Одним нравятся подробные видеоролики с приятными голосами за кадром, другим - короткие графические инструкции. Вот что у нас получилось с “обучалкой”.

Наличие своего YouTube-канала с обучающими видеоматериалами

Практически все сервисы внешней аналитики обзавелись своими YouTube-каналами. Нам понравился контент от LikeStats, LookFor.Sale, HunterSales, MarketGuru, MPStats. Это полноценные видеожурналы с крутыми, профессионально смонтированными роликами.

У EGGHEADS Solutions, как они написали нам в комментариях под прошлогодней статьей, после получения тестового периода пользователю доступны видеоуроки основателя компании Дениса Добрякова. Он рассказывает: как формируются цифры, как правильно считывать данные из системы аналитики и на какие критерии опираться, чтобы делать корректные выводы. SellerFox открыл на YouTube-канале доступ к видеороликам всем желающим, после просмотра которых вы быстро научитесь пользоваться основными инструментами сервиса. 6 участников нашего обзора пока не имеют свой YouTube-канал, они ограничились лишь написанием полезных статей на своем сайте или в соцсетях.

Количество анализируемых площадок

Вполне ожидаемо, что большинство сервисов работают с аналитикой Wildberries. Это самая популярная на данный момент в России площадка среди селлеров. На втором месте — Ozon. Его данные сегодня парсит (собирает) чуть меньше сервисов. Следом идут Яндекс.Маркет и AliExpress (международный или российский спрос). Единицы - собирают данные по СберМегаМаркет, Lamoda и KazanExpress. За каждый маркетплейс, который сервис способен анализировать, мы начислим по 1 баллу. Напомним, мы рассматриваем только внешнюю аналитику.

Количество анализируемых площадок

Что и требовалось доказать. По Wildberries работают все. Максимальное число - шесть баллов - получили только MoneyPlace и SellerFox. Отличие в том, что MoneyPlace анализирует российский спрос на AliExpress. А SellerFox - международный спрос. Это особенно интересно для тех, кто следит за международными трендами. В SellerFox можно ""подглядеть"" успешные кейсы иностранных селлеров и завезти подобные товары на российские маркетплейсы, адаптировав их под нашу аудиторию. С данными Lamoda работают MarketVision и Wbcon. СберМегаМаркет и KazanExpress парсит опять же только MoneyPlace и SellerFox. Да, KazanExpress - маркетплейс молодой, но явно хочет покорить сферу электронной коммерции, заняв свою долю рынка. По данным казанского маркетплейса, их оборот в 2022 году году превысил 19,3 млрд. рублей — 214% к выручке 2021 года. Практически вдвое (до 25,2 млн.) увеличилось количество заказов, которые пользователи сделали на маркетплейсе за минувший год. На площадке работают около 17 тысяч продавцов — это в 1,4 раза больше, чем годом ранее. Так что, если вы - продавец KazanExpress, анализировать продажи ваших конкурентов пока могут лишь два сервиса аналитики: MoneyPlace и SellerFox.

Стоимость тарифов

Ну а теперь давайте считать деньги, ваши деньги. Вот вы бесплатно потестили сервис внешней аналитики. Он вам понравился, вы решили “раскошелиться”, подключить тариф, чтобы анализировать продажи на маркетплейсах дольше и глубже. Во сколько же оценивают свой труд сервисы внешней аналитики маркетплейсов? Мы покажем “вилку” - самый дешевый и самый дорогой тариф по каждому участнику обзора. Важно, минимальная стоимость - это не обязательно плата за месяц. Это может быть полный доступ, но всего на день, к примеру. Баллы выставим по нижней границе, чем доступнее тариф, а значит и срок доступа - минимальный, тем выше наша оценка. Максимум - 5 баллов - получат бесплатные сервисы. Стоимость указана в рублях. Данные взяты из открытых источников или из общения с техподдержкой сервисов. Цены действительны на 31 января 2023 года.

Стоимость тарифов

Минимальная стоимость (990 рублей) у сервиса Wolbe. Если верить официальному сайту, это тариф на месяц после бесплатного семидневного тестового периода. Чуть подороже у SellerFox (1099 рублей), но мы идем вне конкурса. Кстати, в ближайшее время ожидается плановое повышение тарифов на SellerFox - широкий функционал внешней аналитики сразу на 6 маркетплейсах еще можно заказать по старым ценам, торопитесь. У Pandora10 цена за месяц - 1450 рублей. У EggHeads Solutions - ежемесячная абонплата - 25 000 рублей. Впрочем, как нам написали представители этого сервиса в прошлом году, у них есть бесплатный продукт аналитики. Это телеграм-бот EggheadsProfitBot. У них же есть кратковременный доступ к системе аналитики на 2 недели – 4900 рублей. LikeStats, например, хоть и предлагает скачать плагин и бесплатно анализировать продажи конкурентов, тоже не прочь заработать и для более глубокой аналитики предлагает уже платные тарифы. У e - Comet, как написала нам техподдержка, есть бесплатный тариф для селлеров-новичков - на нем вообще нет ограничений. Есть доступ по промокоду на неделю на расширенном тарифе.

Наличие реферальной программы

Сегодня за то, что вы приводите друзей-селлеров, готовы платить не только маркетплейсы. Но и сервисы аналитики. Все просто - делишься реферальной ссылкой, получаешь бонус (скидку, процент, “живые” деньги на карту, есть и такое). Всем от этого хорошо. У сервиса аналитики появляются новые пользователи, у вас - бонусы, у вашего друга - новый инструмент для повышения продаж. Посмотрим, кто и как поощряет своих клиентов. Ставим 1 балл - за наличие реферальной программы. В противном случае, сервис получает 0 баллов.

Наличие реферальной программы

“Рефералочка”, как показал мониторинг, есть не у всех сервисов внешней аналитики. Максимальный процент вознаграждения у MPHelp и Wildbox - до 30%. У HunterSales - 25%. Чуть ниже - 20% у SellerFox. Остальные готовы платить за друзей своих клиентов по 10-15%. Тоже неплохо, не жадничают. Конечно, в рамках реферальной программы можно пообещать хоть 50% или все 100%. Но если сервис внешней аналитики сильно ограничен по функционалу или постоянно ""глючит"", вряд ли его кто-то будет советовать другу или партнеру.

Возможность подключения внутренней аналитики

Ранее мы уже указали разницу между сервисами внешней и внутренней аналитики. Наш SellerFox, увы, похвастаться инструментами по внутренней аналитике пока не может. Запуск этой функции - в ближайших планах. По 1 баллу мы дадим тем сервисам, которые предлагают вдобавок к внешней ещё и внутренний анализ собственных продаж селлера.

Возможность подключения внутренней аналитики

Наличие экспорта данных

Возможность выгрузки данных из сервиса аналитики мы считаем очень важной функцией. Так проще отчитываться перед инвестором, директором, да и перед самим собой. Все под рукой, перед глазами. Можно сгенерировать всю аналитическую информацию по конкретным показателям в удобном, читаемом формате. Каждый доступный способ выгрузки данных мы оценили в 1 балл.

Наличие экспорта данных

Возможность разделить доступ между сотрудниками

Маркетплейсы в один голос предупреждают селлеров, чтобы они не раздавали доступ к своим личным кабинетам направо и налево. Слишком распространены сейчас схемы мошенничества в сфере электронной коммерции. В этом вопросе, действительно, нужно быть аккуратным. Впрочем, пустить к аналитике своих верных сотрудников все-таки можно, если вы будете уверены в коллегах. Одни сервисы предоставляют доступ нескольким пользователям на расширенных тарифах, другие — продают его как отдельную услугу. Мы не будем вдаваться в нюансы и просто оценим свободный/персональный доступ к сервису дополнительными баллами. 1 балл мы присвоили сервисам за возможность разделить доступ, а 2 — за то, что ее готовы предоставлять пользователям бесплатно.

Возможность разделить доступ между сотрудниками

Возможность сбора данных за длительный период

Критерий - ретроспектива, глубина анализа. Конечно, селлеру совсем необязательно в 2023 году смотреть на показатели продаж аж 2020 года. А вот спрос на сезонные товары “минувшей трехлетки” посмотреть вполне логично, если вы продаете лыжи или, например, новогоднюю атрибутику. Баллы расставляем, исходя из такой логики. Начали парсить данные с 2019 года - 3 балла, с 2020 года - 2 балла, позднее - 1 балл.

Возможность сбора данных за длительный период

Многие сервисы своим ""возрастом"" показывают опыт накопленных знаний, но не все готовы открывать глубокие данные, особенно в рамках демо-версии. SellerFox открывает данные для аналитики за последние 365 дней, даже в режиме бесплатного тестового доступа. Мы уверены, что тестовый тариф должен открывать пользователю все возможности. Так он сможет проверить правдоподобность данных: например, сверив их с собственными продажами в разные периоды времени.

Работа службы поддержки

Еще один признак хорошего тона - профессиональная техподдержка. Сегодня недостаточно просто отписаться клиенту стандартными фразами (это может сделать и бот), важно предоставить исчерпывающий ответ на вопрос, касающийся подключения, тарифов, “рефералки” или просто что-то “глючит”. Саппорт мы оцениваем по полноте и оперативности ответов. Пишем (если есть куда писать, конечно) всем один и тот же простой вопрос - сколько длится бесплатный тестовый период? Всем пишем в 10 утра по мск. Ждем ответ, засекаем время. Если прошло меньше пяти минут и ответ дан - ставим 2 балла. Если больше - 1 балл.

Работа службы поддержки

Вот мы и подошли к финишной прямой.

Напомним, что в 2022 году лидерами нашего обзора были:

1 место - MoneyPlace и Pi-data

2 место - Stat4Market и Pandora 10

3 место - MarketGuru и MarketVision

В 2023 году максимальное количество баллов набрали:

1 место - MoneyPlace

2 место - Sellmonitor, SellerExpert, Shopstat

3 место - e-Comet, EggHeads Solutions, SellerStats

Итоговые результаты

Маркетплейсы продолжают соревноваться между собой за “пальму первенства” по объемам годовой выручки, масштабам логистики и широкой сети пунктов выдачи заказов. В то же время многие продавцы, торгующие, например, на Wildberries, Ozon, Яндекс.Маркет, СберМегаМаркет, KazanExpress, стараются следить не только за своими показателями, но за продажами ближайших конкурентов. Ищут новые ниши, товары, способы продвижения. Контролировать собственные продажи можно и самому. Что не скажешь о внешней аналитике. Чтобы успешно продавать на маркетплейсах, нужно быть “во всеоружие”: следить за ценовой политикой, предпочтениями потребителей, в конце концов, просто за модой.

В SellerFox в этом году появилась функция “Анализ ниши”. Такая функция есть у многих сервисов, но в основном только по Wildberries и Ozon. В SellerFox функция “Анализ ниши” уже работает для всех шести маркетплейсов: Wildberries, Ozon, Яндекс.Маркет, KazanExpress, СберМегаМаркет, AliExpress. Нажимая вкладку ""Анализ ниши"", вы увидите динамику продаж в категории за прошлый год + на 1 год вперед. Точность прогноза снижается от первого к двенадцатому месяцу. Впрочем, благодаря новой функции можно проследить общий тренд: будет ли расти/падать категория в предстоящий год и на сколько. Теперь селлер может заглянуть в будущее и решить - стоит продавать в той же нише или поискать более прибыльную, активную, быстрорастущую категорию. В сервисе SellerFox вы можете самостоятельно ознакомиться с инструментом, рядом с вкладкой ""Товары"".

Этот обзор делали люди, не искусственный интеллект (ИИ). Не исключено, что в следующем году наш обзор будет писать ИИ, учитывая стремительно растущую популярность нейросетей. Но для начала искусственному интеллекту, боту, который обучается на англоязычных ресурсах, нужно интегрировать ""в свою голову"" российские сервисы внешней аналитики. Пока в этом вопросе нейросеть не достаточно умна и выдает только зарубежные компании, либо выдает некорректно - SellerFox не парсит Amazon. :)

*фрагмент переписки с ChatGPT - чат-бот с искусственным интеллектом, разработанный компанией OpenAl

Своих коллег ""по цеху"" (представителей сервисов внешней аналитики) призываем не набрасываться с гневными комментариями, а дать нам обратную связь под статьей в виде конструктивных ответов, если вдруг увидели неточность. Здоровая конкуренция всегда идет только на пользу. Мы делаем общее дело - помогаем продавцам зарабатывать и покорять непростой, но такой прибыльный мир маркетплейсов."'https://habrastorage.org/getpro/habr/upload_files/bf9/76f/321/bf976f32124a9be15dc6abbf78598dc0.png'"['https://habrastorage.org/r/w1560/getpro/habr/upload_files/ca1/c56/fb0/ca1c56fb09d9d534d401cb283dfe64ac.png', 'https://habrastorage.org/getpro/habr/upload_files/623/766/3be/6237663bef814b50b1a67da63f77c374.webp', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/getpro/habr/upload_files/ced/7fc/4ac/ced7fc4ac55f65aa063fcef6b3efabbd.webp', 'https://habrastorage.org/getpro/habr/upload_files/505/45b/1f7/50545b1f7573868740a44a7c850a6894.webp', 'https://habrastorage.org/getpro/habr/upload_files/3dd/f6d/8ed/3ddf6d8edba5a56c60677b1914646df9.webp', 'https://habrastorage.org/getpro/habr/upload_files/77e/aed/abc/77eaedabc4bad433f8039ced48ec3a42.webp', 'https://habrastorage.org/getpro/habr/upload_files/b25/82b/805/b2582b8051e0453e426b3c6a2edb301b.webp', 'https://habrastorage.org/getpro/habr/upload_files/572/e6c/f43/572e6cf434db49d3e3b330318c4a9021.webp', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/ce5/44d/6bd/ce544d6bd01908b5964e7824641da055.png', 'https://habrastorage.org/getpro/habr/upload_files/e88/eb8/c11/e88eb8c112972cd297b692c7f2f2bce6.webp', 'https://habrastorage.org/getpro/habr/upload_files/5e4/fa2/396/5e4fa23961785b6cd2dc3398887066b1.webp', 'https://habrastorage.org/getpro/habr/upload_files/0a3/649/fdc/0a3649fdc19b4414e8209d1c86fd554a.webp', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/bf9/76f/321/bf976f32124a9be15dc6abbf78598dc0.png', 'https://habrastorage.org/getpro/habr/upload_files/f36/568/a17/f36568a17c69fde3ad3b2fc269c2738b.webp', 'https://habrastorage.org/getpro/habr/upload_files/bf9/76f/321/bf976f32124a9be15dc6abbf78598dc0.png', 'https://habrastorage.org/getpro/habr/upload_files/adf/f5b/c7a/adff5bc7a33aff3c825b5f63d6e2e36e.webp']"
