'post_id'title'body'source_link'image'images
0'1'New Features for the Web Report Designer in List & Label 28'"<p>The <strong>Web Report Designer</strong> is a central element <strong>if you’re using List &amp; Label in web applications</strong>. We’re constantly improving and adding to it, and with the release of version 28, we’ve added many new objects and functions again. Here’s a quick overview of the new features.</p>

<h2>
  
  
  New Designer Objects
</h2>

<p>The following Designer objects are now supported since version 28 – both as standalone objects and also in tables:</p>

<ul>
<li>Gauges, visualizing data as speedometers, thermometers, etc.</li>
<li>Data graphics, visualizing data as pictograms</li>
<li>Checkboxes, displaying true/false values</li>
<li>PDFs to use as background for forms, or more complex document parts that are available as PDF files</li>
</ul>

<h2>
  
  
  Pie Charts
</h2>

<p>Finally, pie charts can be created directly in the Web Report Designer, and being used as standalone objects as well as in tables. In order to achieve this, a completely new editing mode has been integrated into the Web Report Designer. This editing mode can be opened directly in the workspace, just using a separate button.</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--28ucttbq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6f101uvj5qfw51wrlgjv.png""><img alt=""Pie Chart in Web Report Designer"" height=""601"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--28ucttbq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6f101uvj5qfw51wrlgjv.png"" width=""880"" /></a></p>

<p>Other chart types are already in the making, and will be gradually integrated. Our goal is to transform the Web Report Designer into a fully-fledged, browser-based replacement for the previous Windows app-based Web Designer.</p>

<h2>
  
  
  Repository
</h2>

<p>Provide the content of your repository with more structure and clarity. Folder structures are automatically supported now, without doing changes to existing implementations. Project files, but also additional files such as images, etc., can now be created and managed right within folder structures.</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--7qtRAYXy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bykbo6jydrm68ooabz8.png""><img alt=""Elements in Web Report Designer"" height=""410"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--7qtRAYXy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bykbo6jydrm68ooabz8.png"" width=""880"" /></a></p>

<h2>
  
  
  Table Editor
</h2>

<p>Create and move fields easily with drag &amp; drop. Also, adjusting their properties got a lot easier and more convenient with the new table editor.  Currently available are text fields, images, barcodes, checkboxes and PDF files. You can also insert data graphics, gauges, and charts really quick and easy.</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--3nmvSBB8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r91ghx4fy0ajhdo7cr1h.png""><img alt=""Table Editor Web Reports"" height=""411"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--3nmvSBB8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r91ghx4fy0ajhdo7cr1h.png"" width=""880"" /></a></p>

<h2>
  
  
  Export Right from the Designer
</h2>

<p>Create your reports in the Designer and export right from there to check your layout on different output media.</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--iPhon65S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hz6rte9x98q5feki9k6g.png""><img alt=""Export Options Web Report Designer"" height=""304"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--iPhon65S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hz6rte9x98q5feki9k6g.png"" width=""880"" /></a></p>

<h2>
  
  
  Start Online Demo
</h2>

<p>If you like to take a closer look at the Web Report Designer in List &amp; Label check out the <a href=""https://www.combit.com/web-reporting-list-label/?reportRepositoryID=repository%3A%2F%2F%7B4BF96B30-2753-45ED-A4BD-4747C9977309%7D&amp;dlyx_xs=mhd6vdtvblnluo18d32fip2k3g"">interactive Online Demo</a>.<br />
Or directly get the <a href=""https://www.combit.com/trial/"">free List &amp; Label trial</a>.</p>"'https://dev.to/combit/new-features-for-the-web-report-designer-in-list-label-28-106d'https://res.cloudinary.com/practicaldev/image/fetch/s--YuUeYO5_--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dhnv6f749vyu2molyz3x.png'"['https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--7qtRAYXy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bykbo6jydrm68ooabz8.png', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--tcN-pz3P--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/4285/eb6d8763-aea8-4331-8097-3b0f9c030af8.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--YuUeYO5_--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dhnv6f749vyu2molyz3x.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--3nmvSBB8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r91ghx4fy0ajhdo7cr1h.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--jG6gou-U--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/921099/40a0f589-9863-4ad2-9e55-286802450d97.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--wd6KXAaD--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dhnv6f749vyu2molyz3x.png', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--iPhon65S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hz6rte9x98q5feki9k6g.png', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--8t-VGqgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_775/https://dev-to-uploads.s3.amazonaws.com/i/7p7qe33hhlj5zdi3bj82.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--xwBoQC_6--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/186199/a3d1cfed-a1ca-41cd-a146-9db4e65711d4.jpeg', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--Xvzg0tYP--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/990860/3239624a-afe0-4982-b9be-2c3bd4901210.jpg', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--KJsN4A_Y--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/647021/6130c7b2-1f77-4188-ad08-0c0fd19c431d.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--28ucttbq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6f101uvj5qfw51wrlgjv.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--xBjAueix--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/106613/0b053c00-62bb-4755-aa97-30195d5a5cf4.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--7VyfXKso--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/4285/eb6d8763-aea8-4331-8097-3b0f9c030af8.jpg']"
1'1'Reflecting on my journey in tech'"<p><em>Photo by <a href=""https://www.pexels.com/photo/green-tree-268533/"">Pixabay</a></em></p>

<p>As another year approaches and we celebrate individuals who are underrepresented and otherwise marginalized in software development, I took the time to reflect on my journey. </p>

<p>Back in March 2019, almost 4 years ago, I talked about my experiences as an underrepresented person in the tech industry and I shared the choices that I had made.</p>

<p>

</p>

<p>My experiences have evolved since I last discussed it as that young woman on stage. I feel safer, more confident and more hopeful about the future after working with companies like Forem that value equality in the workplace and continuously try to move the <a href=""https://dev.to/ben/lets-keep-moving-the-goal-posts-3jjl"">goal posts</a>. </p>

<p>However, I still continue to practice those choices that I made many years ago:</p>

<ul>
<li><p>To educate folks in the industry about the issues that we deal with as minorities. </p></li>
<li><p>To urge the people that I meet to be active participants in the struggle. </p></li>
<li><p>To mentor the next generation of leaders so that they are better equipped to deal with what’s thrown their way than I was, so that they may overcome these issues more easily and eventually eliminate them.</p></li>
<li><p>To speak up about these issues and create an  awareness.</p></li>
<li><p>To surround myself with folks whom I can identify with and whom I can form a support system with.</p></li>
<li><p>To no longer doubt myself. </p></li>
</ul>

<p>I still practice these choices everyday and I want to be reminded about them often so that I continue playing my part in helping to promote equality, diversity and inclusion in the tech industry.</p>"'https://dev.to/devteam/reflecting-on-my-journey-in-tech-2lk9'https://res.cloudinary.com/practicaldev/image/fetch/s--p_wHS_EZ--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nn95ivk53s935zgtt9g.jpg'"['https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--L1hnqVcg--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1031668/dde2aa14-a940-4d22-bf06-2b71b2145d0e.jpg', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--oC24mrCM--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nn95ivk53s935zgtt9g.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--p_wHS_EZ--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nn95ivk53s935zgtt9g.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--Vce2LydN--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--OOwzaeSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_775/https://res.cloudinary.com/practicaldev/image/fetch/s--XIICQ_e4--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2ja8tymo646or3emo07.gif', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--dK7WmoyA--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/967586/dfbb7259-1a88-4543-bb2a-4eeb8274c4f7.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--g5gFSoma--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/247560/803f25c6-05a3-4cff-932d-20dbe4915cb3.jpg', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--mbsgKaXh--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--g6iagNAY--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/879749/0bce2c84-de06-45b3-bafd-1d977ac24bcb.jpg', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--A8MnCYqW--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1026098/79aea6ec-95a5-417b-95c5-11ab2a30ded1.jpeg', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg']"
2'1'Building an AI powered and Serverless meal planner with OpenAI, AWS Step functions, AWS Lambda and CDK'"<p>OpenAI’s generative capabilities offer new possibilities when building applications. Combined with Serverless technologies, we can create applications faster while still maintaining the flexibility to iterate and to improve them over time.</p>

<p>In this article, I will show you how to build an application that sends emails containing generated weekly meal plans from a set of ingredients a user provides. We will use OpenAI’s APIs along with AWS Serverless services: Step Functions, AWS Lambda, and Amazon SES.</p>

<p>We will use NodeJs runtime and typescript for the Lambda code as well as CDK for IaC.</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--KGhOJpE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AMLFWDhvi-YJnkegw9fQZ0g.png""><img alt=""logos of the services that were used"" height=""121"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--KGhOJpE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AMLFWDhvi-YJnkegw9fQZ0g.png"" width=""540"" /></a></p>

<h2>
  
  
  What are we going to build ?
</h2>

<p>We will create an application that allows users to submit via an API a request containing a set of food ingredients and an email address. It will then, asynchronously, send to the user an email containing a meal plan with detailed recipes for a whole week:</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--9utAqME3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/11034/1%2AI-kW3EmeHuj__0br6dsRlw.png""><img alt=""AI powered meal planner"" height=""487"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--9utAqME3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/11034/1%2AI-kW3EmeHuj__0br6dsRlw.png"" width=""880"" /></a></p>

<p>Here is the architecture diagram of the application we are going to build:</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--HiQc_Bs---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/5648/1%2ArE-5meExVJx0CBIaQz4bWQ.png""><img alt=""AI powered meal planner architecture overview"" height=""487"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--HiQc_Bs---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/5648/1%2ArE-5meExVJx0CBIaQz4bWQ.png"" width=""880"" /></a></p>

<p>The relevant parts of this solution:</p>

<ul>
<li><p>We use a step function to orchestrate the invocations of Lambda functions that send requests to OpenAI’s APIs to generate recipes from a prompt as well as an image for each recipe.</p></li>
<li><p>We use the S3 bucket to store the generated recipe images. These images are served via a CloudFront distribution.</p></li>
<li><p>The generated meal plan is then sent via email using SES. We use the <a href=""https://docs.aws.amazon.com/ses/latest/dg/send-personalized-email-api.html"">SES templates capability</a> to send personalized emails for each user.</p></li>
<li><p>The Rest API gateway has a POST route with an <a href=""https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-api-gateway.html"">integration</a> to the meal planner Step Function.</p></li>
</ul>

<h3>
  
  
  TL;DR
</h3>

<p>You can find the full repository with its deployment pipeline here 👇<br />
<a href=""https://github.com/ziedbentahar/serverless-meal-planner-with-aws-and-openai""><strong>GitHub - ziedbentahar/serverless-meal-planner-with-aws-and-openai</strong></a></p>
<h2>
  
  
  <strong>Let’s deep dive into the code</strong>
</h2>

<p>☝️ <strong>Before starting</strong>: In order to use OpenAI APIs, you will need to sign up and to create an API KEY. You can follow <a href=""https://platform.openai.com/docs/quickstart/add-your-api-key"">this link</a> to get started. The use of this API <a href=""https://openai.com/pricing"">is not free</a>, however new accounts get free credits (tokens) to start experimenting.</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--HRbzsRb9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AfQFzKZ0z_-uDvDxavUnenA.png""><img alt=""Creating API Keys on OpenAI account"" height=""322"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--HRbzsRb9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AfQFzKZ0z_-uDvDxavUnenA.png"" width=""568"" /></a></p>
<h3>
  
  
  Defining the state machine
</h3>

<p>The first step of this state machine is to generate a meal plan for a week. The second step involves generating a picture for each recipe and then saving it on a S3 bucket. The processing is done in parallel for each recipe using a Map state, this has the advantage to reduce the overall execution time of the state machine. And finally, the last important step is the sending of the email containing the meal plan:</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--PzOSwlZA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ARH1w9ZORWgleOQysKFSUew.png""><img alt=""meal planner state machine"" height=""970"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--PzOSwlZA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ARH1w9ZORWgleOQysKFSUew.png"" width=""600"" /></a></p>

<p>Which translates to this fluent state machine definition in CDK:<br />
</p>
<div class=""ltag_gist-liquid-tag"">
  
</div>


<p>You can find the complete CDK definition of the state machine following <a href=""https://github.com/ziedbentahar/serverless-meal-planner-with-aws-and-openai/blob/main/infrastructure/lib/state-machine.ts"">this link</a>.</p>

<h3>
  
  
  Defining the Lambda functions
</h3>

<p><strong>1- Generate meal plan Lambda:</strong></p>

<p>The challenging part about this step was to find the best prompt that yields good and consistent results from OpenAI <a href=""https://platform.openai.com/docs/api-reference/completions"">completion API</a>. I used the <code>text-davinci-003</code> GPT model (also referred as GPT-3.5).</p>

<p>When I tried out different prompts, the suggestions were quite good for producing interesting meal plans given a list of coherent ingredients. I was even able to request a structured result in JSON format ready to be processed by the Lambda function. I also experimented with parameters such as <a href=""https://platform.openai.com/docs/api-reference/completions/create#completions/create-temperature""><code>temperature</code></a>, <a href=""https://platform.openai.com/docs/api-reference/completions/create#completions/create-top_p""><code>TopP</code></a> and <a href=""https://platform.openai.com/docs/api-reference/completions/create#completions/create-max_tokens""><code>max_tokens</code></a> searching for the sweet spot that gets satisfying results.</p>

<p>This prompt produces the best results given our use case:</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code>Generate a dinner meal plan for the whole week with these ingredients &lt;a comma seperated list of ingredients&gt; and with other random ingredients.
Result must be in json format
Each meal recipe contains a name, a five sentences for instructions and an array of ingredients
</code></pre>

</div>
<p>And here is the code of the Lambda function that handles the generation of the meal plan:<br />
</p>
<div class=""ltag_gist-liquid-tag"">
  
</div>

<p><br /><br />
☝️ <strong>Some notes:</strong></p>

<ul>
<li><p>As depicted on the diagram above, The OpenAI API key is stored on a secret. In this example we use the <a href=""https://docs.aws.amazon.com/secretsmanager/latest/userguide/retrieving-secrets_lambda.html"">AWS parameters and secrets Lambda extension</a> to read the secret value from the Lambda. You can learn more about this Lambda extension <a href=""https://levelup.gitconnected.com/using-aws-parameters-and-secrets-lambda-extension-e61dd6a41110"">here</a>.</p></li>
<li><p>Even though the completion API was providing consistent response models in JSON, for some reason, the properties on the JSON object were not having a consistent casing as I was experimenting with the API. Hence the use of the getProperty helper function before returning the result; this function ensures getting a property value from an object regardless of its casing.</p></li>
</ul>

<p><strong>2- Generate recipe image Lambda:</strong></p>

<p>This Lambda function is similar to the previous one. We use the recipe name that <code>createCompletion</code> API has generated in order to create an image from it by calling <a href=""https://platform.openai.com/docs/guides/images/introduction"">createImage</a> (this API uses <a href=""https://openai.com/research/dall-e"">DALL-E models</a> for image generation) :</p>


<div class=""ltag_gist-liquid-tag"">
  
</div>


<p><code>createImage</code> API returns an array of URLs, the size of this array depends on the <a href=""https://platform.openai.com/docs/api-reference/images/create-variation#images/create-variation-n"">number of variation of the image</a>s we want to generate. In our example we are interested in only one single image. The image URL expires after one hour, here is why we pass it to the <a href=""https://github.com/ziedbentahar/serverless-meal-planner-with-aws-and-openai/blob/main/src/backend/lambdas/upload-recipe-image-to-storage.ts"">upload-recipe-image-to-storage</a> Lambda that has the responsibility to download the image and to store it on a S3 Bucket.</p>

<p><strong>3- Send meal plan email Lambda:</strong></p>

<p>The sending of the email uses SES. But first, the Lambda function prepares a template data containing the necessary elements to generate the email:<br />
</p>
<div class=""ltag_gist-liquid-tag"">
  
</div>
<br />
On the section below, we will see how to use CDK to create a new SES email identity as well as the email template that is used to send the mal plan.

<p><strong>Note:</strong> You can find the CDK definitions of these Lambda functions following <a href=""https://github.com/ziedbentahar/serverless-meal-planner-with-aws-and-openai/blob/main/infrastructure/lib/lambdas.ts"">this link</a>.</p>
<h3>
  
  
  Configuring SES
</h3>

<p>On this example, we use a domain that is already defined in the Route53 public hosted zone; The SES email identity DNS validation is then seamless. We also create the meal plan email template on this nested stack:<br />
</p>
<div class=""ltag_gist-liquid-tag"">
  
</div>


<p>☝️ <strong>Note:</strong> By default, an SES account is in sandbox mode. You are allowed to send emails only to verified identities and you can only send a limited number of emails per 24-hour period. Follow <a href=""https://docs.aws.amazon.com/ses/latest/dg/request-production-access.html"">this link</a> to understand the sandbox mode quotas and how to move out of it.</p>

<h3>
  
  
  Integrating the API Gateway with the Step function workflow
</h3>

<p>Creating the RestApi with the Step Function integration is quite easy with CDK, although a bit verbose:</p>


<div class=""ltag_gist-liquid-tag"">
  
</div>


<p>We need to create a role that grants the Api Gateway to <code>states:StartExecution</code> the Step Function. Each request gets validated with the API gateway JSON schema <a href=""https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html#models-mappings-models"">model validation</a> before the execution of the step function.</p>

<h2>
  
  
  Wrapping up
</h2>

<p>In this post, we have seen how combining OpenAI APIs with serverless architecture can help building AI-powered applications with minimal setup and configuration. The capabilities of both of these two worlds are great enablers for building MVPs and iterating faster.</p>

<p>This application can be improved further by taking into account food restrictions or even by creating an AI powered weekly news letter.</p>

<p>You can find the full source code of this application here:<br />
<a href=""https://github.com/ziedbentahar/serverless-meal-planner-with-aws-and-openai""><strong>GitHub - ziedbentahar/serverless-meal-planner-with-aws-and-openai</strong></a></p>

<h3>
  
  
  <strong>Further readings</strong>
</h3>

<p><a href=""https://platform.openai.com/docs/guides/completion""><strong>OpenAI API Text Competion</strong></a><br />
<a href=""https://platform.openai.com/docs/guides/images""><strong>OpenAI API Image generation</strong></a><br />
<a href=""https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-api-gateway.html""><strong>Creating a Step Functions API Using API Gateway</strong></a><br />
<a href=""https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html""><strong>Working with models and mapping templates</strong></a><br />
<a href=""https://docs.aws.amazon.com/ses/latest/dg/send-personalized-email-advanced.html""><strong>Advanced email personalization</strong></a><br />
<a href=""https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_stepfunctions-readme.html""><strong>aws-cdk-lib.aws_stepfunctions module · AWS CDK</strong></a></p>"'https://dev.to/aws-builders/building-an-ai-powered-and-serverless-meal-planner-with-openai-aws-step-functions-aws-lambda-and-cdk-2phg'https://dev.to/social_previews/article/1398267.png'"['https://res.cloudinary.com/practicaldev/image/fetch/s--3vA9CcCA--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png', 'https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--loveXZab--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/260448/6a055929-58e6-400a-8dcd-f17d10615f98.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--HRbzsRb9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AfQFzKZ0z_-uDvDxavUnenA.png', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--o4ttRjmL--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/543205/793e95e1-aec6-49ce-ac9f-6bfc5a972b28.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--NZjkv89N--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1019191/e6af52fa-47ce-4fb3-a2b6-7e8d559048f7.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--KGhOJpE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AMLFWDhvi-YJnkegw9fQZ0g.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--8ZHzOwR6--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/533828/fa1d01e9-5d5a-400b-a657-6f3da3c6c3bb.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--HiQc_Bs---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/5648/1%2ArE-5meExVJx0CBIaQz4bWQ.png', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--ApmbKrsB--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/978861/9fb43461-934b-4c44-bcf9-6beb278ea965.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--vWmcJ-ty--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--3lYCPB9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_775/https://res.cloudinary.com/practicaldev/image/fetch/s--Vt_eVVRg--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://www.entropywins.wtf/blog/wp-content/uploads/2022/09/code.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--IxrGprDT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_350/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fbsvcwqnj5mgkzuwy24r.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--ExJCYLGO--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1019191/e6af52fa-47ce-4fb3-a2b6-7e8d559048f7.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--PzOSwlZA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ARH1w9ZORWgleOQysKFSUew.png', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--9utAqME3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/11034/1%2AI-kW3EmeHuj__0br6dsRlw.png', 'https://dev.to/social_previews/article/1398267.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--jpJ21gZo--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/856077/99a2a3de-32df-4deb-b605-bbd90d38139d.jpeg']"
3'1'Metaprogramming, ancestors chain and super.'"<p>Let's imagine we are building DSL similar to ActiveRecord associations.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight ruby""><code><span class=""k"">class</span> <span class=""nc"">Person</span>
  <span class=""n"">associated_with</span> <span class=""ss"">:account</span>
<span class=""k"">end</span>

<span class=""no"">Person</span><span class=""p"">.</span><span class=""nf"">new</span><span class=""p"">.</span><span class=""nf"">account</span> <span class=""c1""># =&gt; ""Account associated with a Person""</span>
</code></pre>

</div>



<p>In order to build this feature, we will create a new module that dynamically defines association methods.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight ruby""><code><span class=""k"">module</span> <span class=""nn"">Associations</span>
  <span class=""k"">def</span> <span class=""nf"">associated_with</span><span class=""p"">(</span><span class=""nb"">name</span><span class=""p"">)</span>
    <span class=""n"">define_method</span><span class=""p"">(</span><span class=""nb"">name</span><span class=""p"">)</span> <span class=""k"">do</span>
      <span class=""nb"">puts</span> <span class=""s2"">""associated </span><span class=""si"">#{</span><span class=""nb"">name</span><span class=""si"">}</span><span class=""s2"">""</span>
    <span class=""k"">end</span>
  <span class=""k"">end</span>
<span class=""k"">end</span>

<span class=""k"">class</span> <span class=""nc"">Person</span>
  <span class=""kp"">extend</span> <span class=""no"">Associations</span>

  <span class=""n"">associated_with</span> <span class=""ss"">:account</span>
<span class=""k"">end</span>

<span class=""no"">Person</span><span class=""p"">.</span><span class=""nf"">new</span><span class=""p"">.</span><span class=""nf"">account</span> <span class=""c1"">#=&gt; ""associated account""</span>
</code></pre>

</div>



<p><code>define_method</code> creates an instance method on a receiver, which is exactly what we need.</p>

<p><code>define_method</code> basically has done this;<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight ruby""><code><span class=""k"">class</span> <span class=""nc"">Person</span>
  <span class=""o"">...</span>

  <span class=""k"">def</span> <span class=""nf"">account</span>
    <span class=""s2"">""associated account""</span>
  <span class=""k"">end</span>
<span class=""k"">end</span>
</code></pre>

</div>



<p>We can easily validate this theory by inspecting the ancestors chain and instance methods:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight ruby""><code><span class=""no"">Person</span><span class=""p"">.</span><span class=""nf"">ancestors</span> <span class=""c1""># =&gt; Person,Object,Kernel,BasicObject</span>
<span class=""no"">Person</span><span class=""p"">.</span><span class=""nf"">instance_methods</span><span class=""p"">(</span><span class=""kp"">false</span><span class=""p"">)</span> <span class=""c1""># =&gt; [account]</span>
</code></pre>

</div>



<h2>
  
  
  Overwriting dynamically defined method
</h2>

<p>If we wish to overwrite a dynamically defined method we can do it without any problems since this is just a ""regular"" instance method (albeit defined with some metaprogramming)<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight ruby""><code><span class=""k"">class</span> <span class=""nc"">Person</span>
  <span class=""kp"">extend</span> <span class=""no"">Associations</span>

  <span class=""n"">associated_with</span> <span class=""ss"">:account</span>

  <span class=""k"">def</span> <span class=""nf"">account</span>
    <span class=""s2"">""overridden""</span>
  <span class=""k"">end</span>
<span class=""k"">end</span>

<span class=""no"">Person</span><span class=""p"">.</span><span class=""nf"">new</span><span class=""p"">.</span><span class=""nf"">account</span> <span class=""c1"">#=&gt; ""overridden""</span>
</code></pre>

</div>



<p>But, calling a <strong>super</strong> when overriding will fail<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight ruby""><code><span class=""k"">def</span> <span class=""nf"">account</span>
  <span class=""k"">super</span>
  <span class=""s2"">""overridden""</span>
<span class=""k"">end</span>

<span class=""no"">Person</span><span class=""p"">.</span><span class=""nf"">new</span><span class=""p"">.</span><span class=""nf"">account</span> <span class=""c1""># =&gt; `account': super: no superclass method `account' for ...</span>
</code></pre>

</div>



<p>This makes sense since we are calling <code>super</code> on the method we've completely overwritten.</p>

<p>In order for <code>super</code> to work the method need to be defined in <code>Persons</code> ancestors chain.</p>

<p>We can do this by generating a new module on the fly, including that module in the class and define dynamic methods on that module instead of the class itself.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight ruby""><code><span class=""k"">module</span> <span class=""nn"">Associations</span>
  <span class=""c1""># Create new module on the fly.</span>
  <span class=""c1""># Include that module in the ancestor chain</span>
  <span class=""k"">def</span> <span class=""nf"">generated_association_methods</span>
    <span class=""vi"">@generated_association_methods</span> <span class=""o"">||=</span> <span class=""k"">begin</span>
                                         <span class=""n"">mod</span> <span class=""o"">=</span> <span class=""nb"">const_set</span><span class=""p"">(</span><span class=""ss"">:GeneratedAssociationMethods</span><span class=""p"">,</span> <span class=""no"">Module</span><span class=""p"">.</span><span class=""nf"">new</span><span class=""p"">)</span>
                                         <span class=""kp"">include</span> <span class=""n"">mod</span>
                                         <span class=""n"">mod</span>
                                       <span class=""k"">end</span>
  <span class=""k"">end</span>

  <span class=""k"">def</span> <span class=""nf"">associated_with</span><span class=""p"">(</span><span class=""nb"">name</span><span class=""p"">)</span>
    <span class=""n"">mixin</span> <span class=""o"">=</span> <span class=""n"">generated_association_methods</span>

    <span class=""c1""># define methods on the newly created module</span>
    <span class=""n"">mixin</span><span class=""p"">.</span><span class=""nf"">define_method</span><span class=""p"">(</span><span class=""nb"">name</span><span class=""p"">)</span> <span class=""k"">do</span>
      <span class=""nb"">puts</span> <span class=""s2"">""associated </span><span class=""si"">#{</span><span class=""nb"">name</span><span class=""si"">}</span><span class=""s2"">""</span>
    <span class=""k"">end</span>
  <span class=""k"">end</span>
<span class=""k"">end</span>

<span class=""k"">class</span> <span class=""nc"">Person</span>
  <span class=""kp"">extend</span> <span class=""no"">Associations</span>

  <span class=""n"">associated_with</span> <span class=""ss"">:account</span>
<span class=""k"">end</span>
</code></pre>

</div>



<p>Now dynamically defined methods live inside the <code>Person::GeneratedAssociationMethods</code>, which is part of ancestors chain.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight ruby""><code><span class=""no"">Person</span><span class=""p"">.</span><span class=""nf"">ancestors</span> <span class=""c1""># =&gt; Person,**Person::GeneratedAssociationMethods**, Object,Kernel,BasicObject</span>
<span class=""no"">Person</span><span class=""p"">.</span><span class=""nf"">instance_methods</span><span class=""p"">(</span><span class=""kp"">false</span><span class=""p"">)</span> <span class=""c1""># =&gt; []</span>
</code></pre>

</div>



<p>So calling super will work fine:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight ruby""><code><span class=""k"">def</span> <span class=""nf"">account</span>
  <span class=""k"">super</span>
  <span class=""s2"">""overridden""</span>
<span class=""k"">end</span>

<span class=""no"">Person</span><span class=""p"">.</span><span class=""nf"">new</span><span class=""p"">.</span><span class=""nf"">account</span>
  <span class=""c1"">#=&gt; ""associated_account""</span>
  <span class=""c1"">#=&gt; ""overridden""</span>
</code></pre>

</div>



<p>I've seen this pattern used in Rails codebase in multiple places where this kind of behaviour is needed.</p>

<p>✌️</p>"'https://dev.to/wizardhealth/metaprogramming-ancestors-chain-and-super-2pbd'https://dev.to/social_previews/article/1397870.png'"['https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--ekfboRbP--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/909799/91472855-774c-4564-8a9f-9e556e277848.jpeg', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--dB6Hrnmq--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/882630/e4912944-4b71-49a5-95cb-02197e9162b4.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--We1Ig8JS--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/196089/8561c137-0d8b-43e3-b0a6-433abefbe298.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--KjNQhUnI--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141569/9a509ae3-6266-4deb-a28c-714067d75ac2.jpeg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--GDqzb5yh--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/196089/8561c137-0d8b-43e3-b0a6-433abefbe298.png', 'https://dev.to/social_previews/article/1397870.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--2rSBj-Z2--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1493/1b14869b-97b2-448f-851e-c61595132119.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--w_3ZIf87--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/498654/34d4f03b-317f-4c25-80eb-91f8431ea301.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--T2xzWhN9--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1493/1b14869b-97b2-448f-851e-c61595132119.png', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--Pi_UDxbs--/c_fill,f_auto,fl_progressive,h_50,q_66,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/146403/03b15271-b863-40fd-8544-2aa3af75b63e.gif']"
4'1'Introduction to Web Audio API'"<p>A critical part of <a href=""https://dyte.io/blog/webrtc/"">WebRTC</a> is the transmission of audio. Web Audio API is all about processing and synthesizing audio in web applications. It allows developers to create complex audio processing and synthesis using a set of high-level JavaScript objects and functions. The API can be used to create a wide range of audio applications, such as music and sound effects in games, interactive audio in virtual reality, and more.</p>

<p>Let us take a look at various concepts behind <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API"">Web Audio API</a>.</p>

<h2>
  
  
  Capture and playback audio
</h2>

<p>Web Audio API provides several ways to capture and playback audio in web applications.</p>

<p>Here's an example of how to capture audio using the <code>MediaStream</code> API and play it back using the Web Audio API:</p>

<p>First, we need to request permission to access the user's microphone by calling <strong>navigator.mediaDevices.getUserMedia()</strong>.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code>    <span class=""nb"">navigator</span><span class=""p"">.</span><span class=""nx"">mediaDevices</span><span class=""p"">.</span><span class=""nx"">getUserMedia</span><span class=""p"">({</span><span class=""na"">audio</span><span class=""p"">:</span> <span class=""kc"">true</span><span class=""p"">})</span>
      <span class=""p"">.</span><span class=""nx"">then</span><span class=""p"">(</span><span class=""nx"">stream</span> <span class=""o"">=&gt;</span> <span class=""p"">{</span>
        <span class=""c1"">// The stream variable contains the audio track from the microphone</span>
      <span class=""p"">})</span>
      <span class=""p"">.</span><span class=""k"">catch</span><span class=""p"">(</span><span class=""nx"">err</span> <span class=""o"">=&gt;</span> <span class=""p"">{</span>
        <span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">Error getting microphone</span><span class=""dl"">'</span><span class=""p"">,</span> <span class=""nx"">err</span><span class=""p"">);</span>
      <span class=""p"">});</span>
</code></pre>

</div>



<p>Next, we create an instance of the Web Audio API's <strong><code>AudioContext</code></strong> object. We can then create a <code>MediaStreamAudioSourceNode</code> by passing the <code>MediaStream</code> object to the <strong><code>audioCtx.createMediaStreamSource()</code></strong> method.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code>    <span class=""kd"">const</span> <span class=""nx"">audioCtx</span> <span class=""o"">=</span> <span class=""k"">new</span> <span class=""nx"">AudioContext</span><span class=""p"">();</span>
    <span class=""kd"">const</span> <span class=""nx"">source</span> <span class=""o"">=</span> <span class=""nx"">audioCtx</span><span class=""p"">.</span><span class=""nx"">createMediaStreamSource</span><span class=""p"">(</span><span class=""nx"">stream</span><span class=""p"">);</span>
</code></pre>

</div>



<p>Once we have the source, we can then connect the source node to the audio context's destination node to play the audio.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code>    <span class=""nx"">source</span><span class=""p"">.</span><span class=""nx"">connect</span><span class=""p"">(</span><span class=""nx"">audioCtx</span><span class=""p"">.</span><span class=""nx"">destination</span><span class=""p"">);</span>
</code></pre>

</div>



<p>Now when we call <code>start()</code> method on the audio context, it will start capturing audio from the microphone and playing it back through the speakers.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code>    <span class=""nx"">audioCtx</span><span class=""p"">.</span><span class=""nx"">start</span><span class=""p"">();</span>
</code></pre>

</div>



<h2>
  
  
  Autoplay
</h2>

<p>Browsers handle web audio autoplay in different ways, but in general, they have implemented policies to prevent unwanted audio from playing automatically. This is to protect users from being surprised by unwanted audio, and to prevent abuse of the autoplay feature.</p>

<ul>
<li>Chrome, Edge, Firefox and Safari have implemented a ""muted autoplay"" policy, which allows autoplay of audio only if the audio is muted, or if the user has previously interacted with the website.</li>
<li>Safari goes further by requiring user interaction (<code>click</code>) before allowing audio to play.</li>
<li>Firefox has the option to set audio autoplay with sound disabled by default and the user needs to interact with the website to allow audio playback.</li>
</ul>

<p>Developers can use the <strong><code>play()</code></strong> method to initiate audio playback. This method will only work if the user has interacted with the website and if the audio is not set to autoplay.</p>

<p>Also, the Web Audio API provides the <strong><code>AudioContext.resume()</code></strong> method, which can be used to resume audio playback after it has been suspended by the browser. This method is useful for situations where the user has interacted with the website, but the audio has been suspended due to a lack of user interaction.</p>

<p>Overall, to ensure that web audio autoplay works as expected, it's important to understand the different browsers' policies and provide a clear user interface that allows users to control audio playback.</p>

<p><strong>WebRTC call quirks:</strong><br />
Other than the autoplay restriction listed above, there are a few specific quirks associated with Web Audio when using it in WebRTC calls.</p>

<ul>
<li>Safari will <strong>not</strong> let you create new <code>&lt;audio&gt;</code> tags when the tab is in background, so when a new participant joins your meeting you can not create a new audio tag.</li>
<li>WebRTC Echo cancellation does not work with AudioContext API on Chromium.</li>
<li>You can create one <code>&lt;audio&gt;</code> tag and add all AudioTracks to a common stream, but every time you add a new track.

<ul>
<li>In Safari, you have to call <code>play()</code> again.</li>
<li>In Chromium, you have to set <code>srcObject</code> again.</li>
</ul>
</li>
</ul>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--YVoBY1Km--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dyte.io/blog/content/images/2023/02/image--1--1.png""><img alt=""image (1).png"" height=""483"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--YVoBY1Km--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dyte.io/blog/content/images/2023/02/image--1--1.png"" width=""880"" /></a></p>
<h2>
  
  
  Codecs
</h2>

<p>The Web Audio API is designed to work with a variety of audio codecs. Some of the most common codecs that are supported by web browsers include:</p>

<ul>
<li>PCM: Pulse-code modulation (PCM) is a digital representation of an analog audio signal. It is a lossless codec, which means that it does not lose any audio quality during compression. PCM is the most basic and widely supported audio codec on the web.</li>
<li>MP3: MPEG-1 Audio Layer 3 (MP3) is a widely used lossy audio codec that is known for its high compression ratio and good audio quality. It is supported by most web browsers, but is not supported by some of the more recent ones.</li>
<li>AAC: Advanced Audio Coding (AAC) is a lossy audio codec that is known for its high audio quality and low bitrate. It is supported by most web browsers, but not all.</li>
<li>Opus: Opus is a lossy codec that is designed for low-latency, high-quality, and low-bitrate audio, it's designed to work well on the internet, it is supported by all modern browsers.</li>
<li>WAV: Waveform Audio File Format (WAV) is a lossless audio codec that is widely supported by web browsers. It is commonly used for storing high-quality audio files, but it has a larger file size than other codecs.</li>
<li>Ogg: Ogg is an open-source container format for digital multimedia, it's supported by most web browsers and it's often used for Vorbis codec.</li>
<li>Vorbis: Vorbis is an open source and patent-free lossy audio codec that is known for its high audio quality and low bitrate. It is supported by most web browsers, but not all.</li>
</ul>

<p>By using the codecs that are widely supported by web browsers will ensure that the audio content can be played on a different devices and platforms.</p>
<h2>
  
  
  Permissions
</h2>

<p>To handle various web audio permissions issues, you can use the <strong><code>Permission</code></strong> API and the <strong><code>MediaDevices.getUserMedia()</code></strong> method to request permission to access the microphone or camera.</p>

<p>Here's an example of how to request microphone permission and handle the various permission states:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code>    <span class=""nb"">navigator</span><span class=""p"">.</span><span class=""nx"">permissions</span><span class=""p"">.</span><span class=""nx"">query</span><span class=""p"">({</span><span class=""na"">name</span><span class=""p"">:</span><span class=""dl"">'</span><span class=""s1"">microphone</span><span class=""dl"">'</span><span class=""p"">})</span>
        <span class=""p"">.</span><span class=""nx"">then</span><span class=""p"">(</span><span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">permissionStatus</span><span class=""p"">)</span> <span class=""p"">{</span>
            <span class=""nx"">permissionStatus</span><span class=""p"">.</span><span class=""nx"">onchange</span> <span class=""o"">=</span> <span class=""kd"">function</span><span class=""p"">()</span> <span class=""p"">{</span>
                <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">permissionStatus</span><span class=""p"">.</span><span class=""nx"">state</span> <span class=""o"">===</span> <span class=""dl"">'</span><span class=""s1"">granted</span><span class=""dl"">'</span><span class=""p"">)</span> <span class=""p"">{</span>
                    <span class=""c1"">// Access to microphone granted</span>
                    <span class=""c1"">// create an audio context and access microphone</span>
                <span class=""p"">}</span> <span class=""k"">else</span> <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">permissionStatus</span><span class=""p"">.</span><span class=""nx"">state</span> <span class=""o"">===</span> <span class=""dl"">'</span><span class=""s1"">denied</span><span class=""dl"">'</span><span class=""p"">)</span> <span class=""p"">{</span>
                    <span class=""c1"">// Access to microphone denied</span>
                    <span class=""c1"">// handle denied permission</span>
                <span class=""p"">}</span>
            <span class=""p"">};</span>
        <span class=""p"">});</span>
</code></pre>

</div>



<p>For the <strong><code>MediaDevices.getUserMedia()</code></strong> method, you can use the <strong><code>catch</code></strong> method to handle errors and implement fallbacks:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code>    <span class=""nb"">navigator</span><span class=""p"">.</span><span class=""nx"">mediaDevices</span><span class=""p"">.</span><span class=""nx"">getUserMedia</span><span class=""p"">({</span> <span class=""na"">audio</span><span class=""p"">:</span> <span class=""kc"">true</span> <span class=""p"">})</span>
        <span class=""p"">.</span><span class=""nx"">then</span><span class=""p"">(</span><span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">stream</span><span class=""p"">)</span> <span class=""p"">{</span>
            <span class=""c1"">// Access to microphone granted</span>
            <span class=""c1"">// create an audio context and access microphone</span>
        <span class=""p"">})</span>
        <span class=""p"">.</span><span class=""k"">catch</span><span class=""p"">(</span><span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">error</span><span class=""p"">)</span> <span class=""p"">{</span>
            <span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">Error occurred:</span><span class=""dl"">'</span><span class=""p"">,</span> <span class=""nx"">error</span><span class=""p"">);</span>
            <span class=""c1"">// handle denied permission or other errors</span>
        <span class=""p"">});</span>
</code></pre>

</div>



<p>You can also check for the browser support for the <strong><code>navigator.permissions.query()</code></strong> and <strong><code>navigator.mediaDevices.getUserMedia()</code></strong> before calling them.</p>

<p>In addition to handling permission issues, it's important to provide clear instructions to users on how to grant permission and to make sure that the website's functionality doesn't break if permission is denied or if the Web Audio API is not supported by the browser.</p>

<h2>
  
  
  Audio processing
</h2>

<p>Audio processing is the manipulation of audio signals using Signal processing. It is used in a wide range of applications such as music production, audio effects, noise reduction, speech processing, and more.</p>

<p>There are two types of processing that we can do on audio, Frequency based and Time based.</p>

<p>We can add processing nodes to the audio processing graph, such as a <strong>gain node</strong> to control the volume or a filter node to change the frequency response of the audio.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code>    <span class=""kd"">const</span> <span class=""nx"">gainNode</span> <span class=""o"">=</span> <span class=""nx"">audioCtx</span><span class=""p"">.</span><span class=""nx"">createGain</span><span class=""p"">();</span>
    <span class=""nx"">source</span><span class=""p"">.</span><span class=""nx"">connect</span><span class=""p"">(</span><span class=""nx"">gainNode</span><span class=""p"">);</span>
    <span class=""nx"">gainNode</span><span class=""p"">.</span><span class=""nx"">connect</span><span class=""p"">(</span><span class=""nx"">audioCtx</span><span class=""p"">.</span><span class=""nx"">destination</span><span class=""p"">);</span>
</code></pre>

</div>



<p>We will cover more specific audio processing use cases in the future.</p>

<h2>
  
  
  Examples
</h2>

<p>Here are a few examples of the Web Audio API use cases:</p>

<h3>
  
  
  Voice chat and Conferencing
</h3>

<p>Web Audio API allows you to capture audio from a user's microphone and process it in real-time. This can be used to build voice chat and conferencing applications like Dyte that run directly in the browser.</p>

<h3>
  
  
  Voice Recognition
</h3>

<p>Web Audio API can be used to process audio input from a user's microphone and analyze it to recognize speech. This can be used to create voice-controlled interfaces for web applications.</p>

<h3>
  
  
  Visualizations
</h3>

<p>Web Audio API can be used to generate data from audio input, this data can be used to create various visualizations. For example, a music player application could use the Web Audio API to generate a visualization of the frequency spectrum of the currently playing song.</p>

<h3>
  
  
  Music and Sound effects in games
</h3>

<p>Web Audio API can be used to create interactive audio experiences in browser-based games. Developers can use the API to play background music, sound effects, and even generate audio on the fly based on game events.</p>

<h3>
  
  
  Music and Audio editing
</h3>

<p>Web Audio API provides a powerful set of tools for manipulating audio, including filtering, mixing, and processing. This allows developers to create web-based audio editing tools that can be used to record, edit, and export audio.</p>

<h2>
  
  
  Conclusion
</h2>

<p>We covered the basics of Web Audio transmission and concepts around it in case of WebRTC in this blog post. There is more to catch up on this topic and we will post it in coming weeks. Stay tuned. </p>

<p>If you haven’t heard about Dyte yet, head over to <a href=""https://dyte.io/"">https://dyte.io</a> to learn how we are revolutionizing live video calling through our SDKs and libraries and how you can get <a href=""https://accounts.dyte.in/auth/register"">started</a> quickly on your 10,000 free minutes, which renew every month. If you have any questions, you can reach us at <a href=""https://mailto:support@dyte.io"">support@dyte.io</a> or ask our <a href=""https://community.dyte.io/"">developer community</a>.</p>"'https://dev.to/dyte/introduction-to-web-audio-api-20hp'https://res.cloudinary.com/practicaldev/image/fetch/s--CzQxjOlg--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chv42blc0xng2hhaymw3.png'"['https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--VS5J0Xfo--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/398977/97bb735e-a45a-44d8-baf3-bf2e4ba9661e.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--fxEbovKy--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chv42blc0xng2hhaymw3.png', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--cB6d_K8v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_775/https://dev-to-uploads.s3.amazonaws.com/i/hlhrtuspjyrstifubdhs.gif', 'https://res.cloudinary.com/practicaldev/image/fetch/s--EC2r5KLx--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/4919/00bc7c73-190d-4cce-b640-d3d22e7935c5.png', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--fiN1aFTd--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/652576/3943bd22-a95d-4b6c-bf69-856c269cf944.jpeg', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--CzQxjOlg--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chv42blc0xng2hhaymw3.png', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--sGWwYjhl--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1036999/cb4ec9e3-2a7b-4534-abcd-2fc6bacddc8b.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--GOlMzVRt--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/4919/00bc7c73-190d-4cce-b640-d3d22e7935c5.png', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--YIzk_5MJ--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/995013/ac08f63e-6c83-4e04-aa00-eebc7390f35c.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--IxrGprDT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_350/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fbsvcwqnj5mgkzuwy24r.png', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--YVoBY1Km--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dyte.io/blog/content/images/2023/02/image--1--1.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--8gL1HROZ--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/365031/4604f2ed-6941-488e-80ce-c26562ff5713.png']"
5'1'Superpowers with Directives and Dependency Injection: Part 1'"<p><em>Original cover photo by <a href=""https://unsplash.com/@aznbokchoy"">Lucas Kapla</a> on Unsplash.</em></p>

<h2>
  
  
  Introduction
</h2>

<p>I have been saying this for a looong while: Directives are the most underutilized part of Angular. <br />
They provide a powerful toolset for doing magic in templates, and yet in most projects, it is used in the most common, ""attribute directives that do some limited business logic"" style.</p>

<p>The next most underutilized thing is dependency injection. It is an awesome concept for building reusable stuff, yet 95% of DI usage in Angular is for services. </p>

<p>I have written a bunch of articles on both topics, and here is a list of them. I recommend you read those before diving into this one, although that is not a requirement:</p>

<ul>
<li><a href=""https://medium.com/codeburst/angular-dependency-injection-tips-ddb24b8244be"">Angular Dependency Injection Tips</a></li>
<li><a href=""https://medium.com/codeburst/directives-vs-components-8e924dd86f20"">Directives vs Components</a></li>
<li><a href=""https://dev.to/this-is-angular/always-use-inject-2do4"">Always use ""inject""</a></li>
</ul>

<p>In this series of articles (yes, there are going to be more than one!) we will dive deeper and explore how both of those concepts can be utilized (often together) to significantly simplify our templates. We will do so on use case examples, in a step-by-step format.</p>

<blockquote>
<p>Note: I do not choose these examples specifically because they are very common or very useful; often, solutions in form of third-party libraries exist; these examples are just good from the learning perspective, as they allow to showcase a lot of concepts in a relatively small amount of code. </p>
</blockquote>

<p>So, without further ado, let's get started!</p>
<h2>
  
  
  Building a password strength meter
</h2>

<p>A functionality that exists in lots of modern-day web apps is checking for a user's password strength. Of course, solutions for this exist in the open. but let's build something of our own, and in a way that it would be really customizable.</p>

<p>Let's start with the simplest possible scenario: we add some class on the input element so it can be shown visually:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight typescript""><code><span class=""kd"">type</span> <span class=""nx"">PasswordStrength</span> <span class=""o"">=</span> <span class=""dl"">'</span><span class=""s1"">weak</span><span class=""dl"">'</span> <span class=""o"">|</span> <span class=""dl"">'</span><span class=""s1"">medium</span><span class=""dl"">'</span> <span class=""o"">|</span> <span class=""dl"">'</span><span class=""s1"">strong</span><span class=""dl"">'</span><span class=""p"">;</span>

<span class=""p"">@</span><span class=""nd"">Directive</span><span class=""p"">({</span>
  <span class=""na"">selector</span><span class=""p"">:</span> <span class=""dl"">'</span><span class=""s1"">[appPasswordStrength]</span><span class=""dl"">'</span><span class=""p"">,</span>
  <span class=""na"">standalone</span><span class=""p"">:</span> <span class=""kc"">true</span><span class=""p"">,</span>
<span class=""p"">})</span>
<span class=""k"">export</span> <span class=""kd"">class</span> <span class=""nx"">PasswordStrengthDirective</span> <span class=""p"">{</span>
  <span class=""k"">private</span> <span class=""k"">readonly</span> <span class=""nx"">el</span><span class=""p"">:</span> <span class=""nx"">inject</span><span class=""p"">(</span><span class=""nx"">ElementRef</span><span class=""p"">);</span>

  <span class=""p"">@</span><span class=""nd"">HostListener</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">input</span><span class=""dl"">'</span><span class=""p"">,</span> <span class=""p"">[</span><span class=""dl"">'</span><span class=""s1"">$event</span><span class=""dl"">'</span><span class=""p"">])</span>
  <span class=""nx"">onInput</span><span class=""p"">(</span><span class=""nx"">event</span><span class=""p"">:</span> <span class=""nx"">InputEvent</span><span class=""p"">)</span> <span class=""p"">{</span>
    <span class=""kd"">const</span> <span class=""nx"">input</span> <span class=""o"">=</span> <span class=""nx"">event</span><span class=""p"">.</span><span class=""nx"">target</span> <span class=""k"">as</span> <span class=""nx"">HTMLInputElement</span><span class=""p"">;</span>
    <span class=""kd"">const</span> <span class=""nx"">value</span> <span class=""o"">=</span> <span class=""nx"">input</span><span class=""p"">.</span><span class=""nx"">value</span><span class=""p"">;</span>
    <span class=""kd"">const</span> <span class=""nx"">strength</span> <span class=""o"">=</span> <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">evaluatePasswordStrength</span><span class=""p"">(</span><span class=""nx"">value</span><span class=""p"">);</span>
    <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">el</span><span class=""p"">.</span><span class=""nx"">nativeElement</span><span class=""p"">.</span><span class=""nx"">classList</span><span class=""p"">.</span><span class=""nx"">add</span><span class=""p"">(</span>
      <span class=""s2"">`password-strength-</span><span class=""p"">${</span><span class=""nx"">strength</span><span class=""p"">}</span><span class=""s2"">`</span>
    <span class=""p"">);</span>
  <span class=""p"">}</span>

  <span class=""nx"">evaluatePasswordStrength</span><span class=""p"">(</span><span class=""nx"">password</span><span class=""p"">:</span> <span class=""kr"">string</span><span class=""p"">):</span> <span class=""nx"">PasswordStrength</span> <span class=""p"">{</span>
    <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">password</span><span class=""p"">.</span><span class=""nx"">length</span> <span class=""o"">&lt;</span> <span class=""mi"">6</span><span class=""p"">)</span> <span class=""p"">{</span>
      <span class=""k"">return</span> <span class=""dl"">'</span><span class=""s1"">weak</span><span class=""dl"">'</span><span class=""p"">;</span>
    <span class=""p"">}</span> <span class=""k"">else</span> <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">password</span><span class=""p"">.</span><span class=""nx"">length</span> <span class=""o"">&lt;</span> <span class=""mi"">10</span><span class=""p"">)</span> <span class=""p"">{</span>
      <span class=""k"">return</span> <span class=""dl"">'</span><span class=""s1"">medium</span><span class=""dl"">'</span><span class=""p"">;</span>
    <span class=""p"">}</span>
    <span class=""k"">return</span> <span class=""dl"">'</span><span class=""s1"">strong</span><span class=""dl"">'</span><span class=""p"">;</span>
  <span class=""p"">}</span>
<span class=""p"">}</span>
</code></pre>

</div>



<p>And then we can use it in the template like this:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight html""><code><span class=""nt"">&lt;input</span> <span class=""na"">type=</span><span class=""s"">""password""</span> <span class=""na"">appPasswordStrength</span><span class=""nt"">&gt;</span>
</code></pre>

</div>



<p>Fairly simple. (Ignore the simplicity of the logic behind evaluation; it is really irrelevant and we can put any logic there - our aim is to make this directive maximally customizable).</p>

<p>But now we have several issues:</p>

<ol>
<li>Why the selector? If we forget to out the <code>[appPasswordStrength]</code> attribute, the directive will not work. Can we make it work automatically on all password inputs?</li>
<li>What if we need logic that is not just adding a class, but also adding some text to the DOM, for example? Can we make the directive just tell the template about the strength of the password and then let it handle in a custom way?</li>
<li>What about customizing the evaluator function? Can we make it so that the user can provide their own function to evaluate the password strength?</li>
<li>If the developer provides the logic for evaluation, can we make it possible to both provide the logic application-wide, from one place, and customize it on a per-input basis?</li>
</ol>

<p>Let's explore all of these issues and improve our directive. Let's start with the first, simplest one:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight typescript""><code><span class=""p"">@</span><span class=""nd"">Directive</span><span class=""p"">({</span>
  <span class=""na"">selector</span><span class=""p"">:</span> <span class=""dl"">'</span><span class=""s1"">input[type=""password""]</span><span class=""dl"">'</span><span class=""p"">,</span>
  <span class=""na"">standalone</span><span class=""p"">:</span> <span class=""kc"">true</span><span class=""p"">,</span>
<span class=""p"">})</span>
<span class=""c1"">// directive implementation</span>
</code></pre>

</div>



<p>Now we can just drop the attribute selector:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight html""><code><span class=""nt"">&lt;input</span> <span class=""na"">type=</span><span class=""s"">""password""</span><span class=""nt"">&gt;</span>
</code></pre>

</div>



<p>Now it will work automatically. But what if, in some cases, we want to ignore the checking? We can add an input for that:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight typescript""><code><span class=""p"">@</span><span class=""nd"">Directive</span><span class=""p"">({</span>
  <span class=""na"">selector</span><span class=""p"">:</span> <span class=""dl"">'</span><span class=""s1"">input[type=""password""]</span><span class=""dl"">'</span><span class=""p"">,</span>
  <span class=""na"">standalone</span><span class=""p"">:</span> <span class=""kc"">true</span><span class=""p"">,</span>
<span class=""p"">})</span>
<span class=""k"">export</span> <span class=""kd"">class</span> <span class=""nx"">PasswordStrengthDirective</span> <span class=""p"">{</span>
  <span class=""p"">@</span><span class=""nd"">Input</span><span class=""p"">()</span> <span class=""nx"">noStrengthCheck</span> <span class=""o"">=</span> <span class=""kc"">false</span><span class=""p"">;</span>
  <span class=""k"">private</span> <span class=""k"">readonly</span> <span class=""nx"">el</span><span class=""p"">:</span> <span class=""nx"">inject</span><span class=""p"">(</span><span class=""nx"">ElementRef</span><span class=""p"">);</span>

  <span class=""p"">@</span><span class=""nd"">HostListener</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">input</span><span class=""dl"">'</span><span class=""p"">,</span> <span class=""p"">[</span><span class=""dl"">'</span><span class=""s1"">$event</span><span class=""dl"">'</span><span class=""p"">])</span>
  <span class=""nx"">onInput</span><span class=""p"">(</span><span class=""nx"">event</span><span class=""p"">:</span> <span class=""nx"">InputEvent</span><span class=""p"">)</span> <span class=""p"">{</span>
    <span class=""k"">if</span> <span class=""p"">(</span><span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">noStrengthCheck</span><span class=""p"">)</span> <span class=""p"">{</span>
      <span class=""k"">return</span><span class=""p"">;</span>
    <span class=""p"">}</span>
    <span class=""c1"">// logic goes here</span>
  <span class=""p"">}</span>

  <span class=""c1"">// the other methods</span>
<span class=""p"">}</span>
</code></pre>

</div>



<p>And then we can use it like this:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight html""><code><span class=""nt"">&lt;input</span> <span class=""na"">type=</span><span class=""s"">""password""</span> <span class=""na"">[noStrengthCheck]=</span><span class=""s"">""true""</span><span class=""nt"">&gt;</span>
</code></pre>

</div>



<p>Cool, the first improvement is done. Let's now make it so the component, rather than add a class, just informs the template about the strength of the password and lets it do the job itself. We <em>could</em> do that by adding an output, but that would mean more boilerplate for the developers in the template to capture the strength in a variable before using it. So instead we will use <code>exportAs</code> to work with the directive instance directly:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight typescript""><code><span class=""p"">@</span><span class=""nd"">Directive</span><span class=""p"">({</span>
  <span class=""na"">selector</span><span class=""p"">:</span> <span class=""dl"">'</span><span class=""s1"">input[type=""password""]</span><span class=""dl"">'</span><span class=""p"">,</span>
  <span class=""na"">standalone</span><span class=""p"">:</span> <span class=""kc"">true</span><span class=""p"">,</span>
  <span class=""na"">exportAs</span><span class=""p"">:</span> <span class=""dl"">'</span><span class=""s1"">passwordStrength</span><span class=""dl"">'</span><span class=""p"">,</span>
<span class=""p"">})</span>
<span class=""k"">export</span> <span class=""kd"">class</span> <span class=""nx"">PasswordStrengthDirective</span> <span class=""p"">{</span>
  <span class=""p"">@</span><span class=""nd"">Input</span><span class=""p"">()</span> <span class=""nx"">noStrengthCheck</span> <span class=""o"">=</span> <span class=""kc"">false</span><span class=""p"">;</span>
  <span class=""c1"">// property to capture in the template</span>
  <span class=""nl"">strength</span><span class=""p"">:</span> <span class=""nx"">PasswordStrength</span> <span class=""o"">=</span> <span class=""dl"">'</span><span class=""s1"">weak</span><span class=""dl"">'</span><span class=""p"">;</span> 
  <span class=""c1"">// no need for ElementRef anymore</span>

  <span class=""p"">@</span><span class=""nd"">HostListener</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">input</span><span class=""dl"">'</span><span class=""p"">,</span> <span class=""p"">[</span><span class=""dl"">'</span><span class=""s1"">$event</span><span class=""dl"">'</span><span class=""p"">])</span>
  <span class=""nx"">onInput</span><span class=""p"">(</span><span class=""nx"">event</span><span class=""p"">:</span> <span class=""nx"">InputEvent</span><span class=""p"">)</span> <span class=""p"">{</span>
    <span class=""k"">if</span> <span class=""p"">(</span><span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">noStrengthCheck</span><span class=""p"">)</span> <span class=""p"">{</span>
      <span class=""k"">return</span><span class=""p"">;</span>
    <span class=""p"">}</span>
    <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">strength</span> <span class=""o"">=</span> <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">evaluatePasswordStrength</span><span class=""p"">(</span><span class=""nx"">value</span><span class=""p"">);</span>
  <span class=""p"">}</span>

  <span class=""nx"">evaluatePasswordStrength</span><span class=""p"">(</span><span class=""nx"">password</span><span class=""p"">:</span> <span class=""kr"">string</span><span class=""p"">):</span> <span class=""nx"">PasswordStrength</span> <span class=""p"">{</span>
    <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">password</span><span class=""p"">.</span><span class=""nx"">length</span> <span class=""o"">&lt;</span> <span class=""mi"">6</span><span class=""p"">)</span> <span class=""p"">{</span>
      <span class=""k"">return</span> <span class=""dl"">'</span><span class=""s1"">weak</span><span class=""dl"">'</span><span class=""p"">;</span>
    <span class=""p"">}</span> <span class=""k"">else</span> <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">password</span><span class=""p"">.</span><span class=""nx"">length</span> <span class=""o"">&lt;</span> <span class=""mi"">10</span><span class=""p"">)</span> <span class=""p"">{</span>
      <span class=""k"">return</span> <span class=""dl"">'</span><span class=""s1"">medium</span><span class=""dl"">'</span><span class=""p"">;</span>
    <span class=""p"">}</span>
    <span class=""k"">return</span> <span class=""dl"">'</span><span class=""s1"">strong</span><span class=""dl"">'</span><span class=""p"">;</span>
  <span class=""p"">}</span>
<span class=""p"">}</span>
</code></pre>

</div>



<p>Now we only write the strength itself to a property to let the developer capture it in the template. Here is how it is done:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight html""><code><span class=""nt"">&lt;input</span> <span class=""na"">type=</span><span class=""s"">""password""</span> <span class=""na"">#evaluator</span><span class=""err"">=""</span><span class=""na"">passwordStrength</span><span class=""err"">""</span><span class=""nt"">&gt;</span>
<span class=""nt"">&lt;div</span> <span class=""na"">*ngIf=</span><span class=""s"">""evaluator.strength === 'weak'""</span><span class=""nt"">&gt;</span>Weak password<span class=""nt"">&lt;/div&gt;</span>
<span class=""nt"">&lt;div</span> <span class=""na"">*ngIf=</span><span class=""s"">""evaluator.strength === 'medium'""</span><span class=""nt"">&gt;</span>Medium password<span class=""nt"">&lt;/div&gt;</span>
<span class=""nt"">&lt;div</span> <span class=""na"">*ngIf=</span><span class=""s"">""evaluator.strength === 'strong'""</span><span class=""nt"">&gt;</span>Strong password<span class=""nt"">&lt;/div&gt;</span>
</code></pre>

</div>



<p>We use <code>exportAs</code> to capture the directive instance in a template variable, and then we can use it to access the strength property. You can read more about it in <a href=""https://angular.io/api/core/Directive#exportas"">the official documentation</a>.</p>

<p>Now, let's make it so the developer can provide their own logic for evaluating the password strength.  Again, we <em>could</em> do it using a standard <code>Input</code> property, but that would mean we would have to provide that function every time we have a password input, and that is cumbersome and error-prone - easy to forget. So instead we will use an <code>InjectionToken</code> together with a small helper function to provide the logic application-wide:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight typescript""><code><span class=""kd"">type</span> <span class=""nx"">PasswordEvaluatorFn</span> <span class=""o"">=</span> <span class=""p"">(</span><span class=""nx"">password</span><span class=""p"">:</span> <span class=""kr"">string</span><span class=""p"">)</span> <span class=""o"">=&gt;</span> <span class=""nx"">PasswordStrength</span><span class=""p"">;</span>

<span class=""k"">export</span> <span class=""kd"">const</span> <span class=""nx"">evaluatorFnToken</span> <span class=""o"">=</span> <span class=""k"">new</span> <span class=""nx"">InjectionToken</span><span class=""o"">&lt;</span>
  <span class=""nx"">PasswordEvaluatorFn</span>
<span class=""o"">&gt;</span><span class=""p"">(</span>
  <span class=""dl"">'</span><span class=""s1"">PasswordEvaluatorFn</span><span class=""dl"">'</span><span class=""p"">,</span>
<span class=""p"">);</span>

<span class=""k"">export</span> <span class=""kd"">function</span> <span class=""nx"">providePasswordEvaluatorFn</span><span class=""p"">(</span>
  <span class=""nx"">evaluatorFn</span><span class=""p"">:</span> <span class=""nx"">PasswordEvaluatorFn</span><span class=""p"">,</span>
<span class=""p"">)</span> <span class=""p"">{</span>
  <span class=""k"">return</span> <span class=""p"">[{</span>
    <span class=""na"">provide</span><span class=""p"">:</span> <span class=""nx"">evaluatorFnToken</span><span class=""p"">,</span>
    <span class=""na"">useValue</span><span class=""p"">:</span> <span class=""nx"">evaluatorFn</span><span class=""p"">,</span>
  <span class=""p"">}];</span>
<span class=""p"">}</span>

<span class=""p"">@</span><span class=""nd"">Directive</span><span class=""p"">({</span>
  <span class=""c1"">// eslint-disable-next-line @angular-eslint/directive-selector</span>
  <span class=""na"">selector</span><span class=""p"">:</span> <span class=""dl"">'</span><span class=""s1"">input[type=""password""]</span><span class=""dl"">'</span><span class=""p"">,</span>
  <span class=""na"">exportAs</span><span class=""p"">:</span> <span class=""dl"">'</span><span class=""s1"">passwordEvaluator</span><span class=""dl"">'</span><span class=""p"">,</span>
  <span class=""na"">standalone</span><span class=""p"">:</span> <span class=""kc"">true</span><span class=""p"">,</span>
<span class=""p"">})</span>
<span class=""k"">export</span> <span class=""kd"">class</span> <span class=""nx"">PasswordEvaluatorDirective</span> <span class=""p"">{</span>
  <span class=""nl"">strength</span><span class=""p"">:</span> <span class=""nx"">PasswordStrength</span> <span class=""o"">=</span> <span class=""dl"">'</span><span class=""s1"">weak</span><span class=""dl"">'</span><span class=""p"">;</span>
  <span class=""p"">@</span><span class=""nd"">Input</span><span class=""p"">()</span> <span class=""nx"">evaluatorFn</span> <span class=""o"">=</span> <span class=""nx"">inject</span><span class=""p"">(</span><span class=""nx"">evaluatorFnToken</span><span class=""p"">);</span>
  <span class=""p"">@</span><span class=""nd"">Input</span><span class=""p"">()</span> <span class=""nx"">noStrengthCheck</span> <span class=""o"">=</span> <span class=""kc"">false</span><span class=""p"">;</span>

  <span class=""p"">@</span><span class=""nd"">HostListener</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">input</span><span class=""dl"">'</span><span class=""p"">,</span> <span class=""p"">[</span><span class=""dl"">'</span><span class=""s1"">$event</span><span class=""dl"">'</span><span class=""p"">])</span>
  <span class=""nx"">onInput</span><span class=""p"">(</span><span class=""nx"">event</span><span class=""p"">:</span> <span class=""nx"">InputEvent</span><span class=""p"">)</span> <span class=""p"">{</span>
    <span class=""k"">if</span> <span class=""p"">(</span><span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">noStrengthCheck</span><span class=""p"">)</span> <span class=""p"">{</span>
      <span class=""k"">return</span><span class=""p"">;</span>
    <span class=""p"">}</span>
    <span class=""kd"">const</span> <span class=""nx"">input</span> <span class=""o"">=</span> <span class=""nx"">event</span><span class=""p"">.</span><span class=""nx"">target</span> <span class=""k"">as</span> <span class=""nx"">HTMLInputElement</span><span class=""p"">;</span>
    <span class=""kd"">const</span> <span class=""nx"">value</span> <span class=""o"">=</span> <span class=""nx"">input</span><span class=""p"">.</span><span class=""nx"">value</span><span class=""p"">;</span>
    <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">strength</span> <span class=""o"">=</span> <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">evaluatorFn</span><span class=""p"">(</span><span class=""nx"">value</span><span class=""p"">);</span>
  <span class=""p"">}</span>
<span class=""p"">}</span>
</code></pre>

</div>



<p>Now we can just provide a custom evaluation function application-wide:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight typescript""><code><span class=""nx"">bootstrapApplication</span><span class=""p"">(</span><span class=""nx"">AppComponent</span><span class=""p"">,</span> <span class=""p"">{</span>
  <span class=""na"">providers</span><span class=""p"">:</span> <span class=""p"">[</span>
    <span class=""nx"">providePasswordEvaluatorFn</span><span class=""p"">((</span><span class=""na"">password</span><span class=""p"">:</span> <span class=""kr"">string</span><span class=""p"">)</span> <span class=""o"">=&gt;</span> <span class=""p"">{</span>
      <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">password</span><span class=""p"">.</span><span class=""nx"">length</span> <span class=""o"">&lt;</span> <span class=""mi"">6</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""k"">return</span> <span class=""dl"">'</span><span class=""s1"">weak</span><span class=""dl"">'</span><span class=""p"">;</span>
      <span class=""p"">}</span> <span class=""k"">else</span> <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">password</span><span class=""p"">.</span><span class=""nx"">length</span> <span class=""o"">&lt;</span> <span class=""mi"">10</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""k"">return</span> <span class=""dl"">'</span><span class=""s1"">medium</span><span class=""dl"">'</span><span class=""p"">;</span>
      <span class=""p"">}</span>
      <span class=""k"">return</span> <span class=""dl"">'</span><span class=""s1"">strong</span><span class=""dl"">'</span><span class=""p"">;</span>
    <span class=""p"">}),</span>
  <span class=""p"">],</span>
  <span class=""c1"">// the rest of the application</span>
<span class=""p"">});</span>
</code></pre>

</div>



<p>And use it as we please.</p>

<p>But here comes a problem: what if the user does not provide a custom evaluator function? We can make it so the directive throws an error if it is not provided, but that might not be the best solution. So, let's instead make the directive use a default evaluator function if the user has not provided one. But, right now, if there is no custom function provided, the dependency injection mechanism will throw a <code>NullInjectorError</code> error. Here, the <code>optional</code> flag comes to the rescue:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight typescript""><code><span class=""p"">@</span><span class=""nd"">Directive</span><span class=""p"">({</span>
  <span class=""c1"">//...</span>
<span class=""p"">})</span>
<span class=""k"">export</span> <span class=""kd"">class</span> <span class=""nx"">PasswordEvaluatorDirective</span> <span class=""p"">{</span>
  <span class=""c1"">//...</span>
  <span class=""nx"">evaluatorFn</span> <span class=""o"">=</span> <span class=""nx"">inject</span><span class=""p"">(</span><span class=""nx"">evaluatorFnToken</span><span class=""p"">,</span> <span class=""p"">{</span> <span class=""na"">optional</span><span class=""p"">:</span> <span class=""kc"">true</span> <span class=""p"">});</span>
  <span class=""c1"">//...</span>
<span class=""p"">}</span>
</code></pre>

</div>



<p>Now the <code>inject</code> function will return <code>null</code> instead of throwing an error if the token is not provided. We can use that to provide a default evaluator function:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight typescript""><code>
<span class=""k"">export</span> <span class=""kd"">const</span> <span class=""nx"">defaultEvaluatorFn</span><span class=""p"">:</span> <span class=""nx"">PasswordEvaluatorFn</span> <span class=""o"">=</span> <span class=""p"">(</span>
  <span class=""nx"">password</span><span class=""p"">:</span> <span class=""kr"">string</span><span class=""p"">,</span>
<span class=""p"">):</span> <span class=""nx"">PasswordStrength</span> <span class=""o"">=&gt;</span> <span class=""p"">{</span>
    <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">password</span><span class=""p"">.</span><span class=""nx"">length</span> <span class=""o"">&lt;</span> <span class=""mi"">6</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""k"">return</span> <span class=""dl"">'</span><span class=""s1"">weak</span><span class=""dl"">'</span><span class=""p"">;</span>
    <span class=""p"">}</span> <span class=""k"">else</span> <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">password</span><span class=""p"">.</span><span class=""nx"">length</span> <span class=""o"">&lt;</span> <span class=""mi"">10</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""k"">return</span> <span class=""dl"">'</span><span class=""s1"">medium</span><span class=""dl"">'</span><span class=""p"">;</span>
    <span class=""p"">}</span>
    <span class=""k"">return</span> <span class=""dl"">'</span><span class=""s1"">strong</span><span class=""dl"">'</span><span class=""p"">;</span>
<span class=""p"">}</span>

<span class=""p"">@</span><span class=""nd"">Directive</span><span class=""p"">({</span>
  <span class=""c1"">//...</span>
<span class=""p"">})</span>
<span class=""k"">export</span> <span class=""kd"">class</span> <span class=""nx"">PasswordEvaluatorDirective</span> <span class=""p"">{</span>
  <span class=""c1"">//...</span>
  <span class=""nx"">evaluatorFn</span> <span class=""o"">=</span> <span class=""nx"">inject</span><span class=""p"">(</span>
   <span class=""nx"">evaluatorFnToken</span><span class=""p"">,</span>
   <span class=""p"">{</span> <span class=""na"">optional</span><span class=""p"">:</span> <span class=""kc"">true</span> <span class=""p"">},</span>
  <span class=""p"">)</span> <span class=""o"">??</span> <span class=""nx"">defaultEvaluatorFn</span><span class=""p"">;</span>
  <span class=""c1"">//...</span>
<span class=""p"">}</span>
</code></pre>

</div>



<p>So now, if the user is satisfied with the default evaluator function, they don't have to provide anything. But if they want to provide their own, they can do that as well, both at the component level <em>and</em> application-wide. </p>

<p>So now, that last question remains: how to provide a custom evaluator on an input basis? Meaning, we can have several password inputs in the same component, but we want some of them to work differently. Because of how the <code>inject</code> function works, we can just decorate our <code>evaluatorFn</code> with <code>@Input</code> and it will work:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight typescript""><code><span class=""p"">@</span><span class=""nd"">Directive</span><span class=""p"">({</span>
  <span class=""c1"">//...</span>
<span class=""p"">})</span>
<span class=""k"">export</span> <span class=""kd"">class</span> <span class=""nx"">PasswordEvaluatorDirective</span> <span class=""p"">{</span>
  <span class=""c1"">//...</span>
  <span class=""p"">@</span><span class=""nd"">Input</span><span class=""p"">()</span> <span class=""nx"">evaluatorFn</span> <span class=""o"">=</span> <span class=""nx"">inject</span><span class=""p"">(</span>
    <span class=""nx"">evaluatorFnToken</span><span class=""p"">,</span>
    <span class=""p"">{</span> <span class=""na"">optional</span><span class=""p"">:</span> <span class=""kc"">true</span> <span class=""p"">},</span>
  <span class=""p"">)</span> <span class=""o"">??</span> <span class=""nx"">defaultEvaluatorFn</span><span class=""p"">;</span>
  <span class=""c1"">//...</span>
<span class=""p"">}</span>
</code></pre>

</div>



<p>And now we can use it like this:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight html""><code><span class=""nt"">&lt;input</span> <span class=""na"">type=</span><span class=""s"">""password""</span> 
       <span class=""na"">#evaluator</span><span class=""err"">=""</span><span class=""na"">passwordEvaluator</span><span class=""err"">""</span>
       <span class=""na"">[evaluatorFn]=</span><span class=""s"">""myEvaluatorFn""</span><span class=""nt"">/&gt;</span>
</code></pre>

</div>



<p>Here is the final version of our component, with a live demo:</p>

<p>

</p>

<h2>
  
  
  Conclusion
</h2>

<p>In this article, we have explored how to use <code>InjectionToken</code> to provide custom logic to a directive, how to use an exported instance of the directive, and use a custom selector for matching. In the next one, we will dive into using structural directives and performing advanced DOM manipulations.</p>"'https://dev.to/this-is-angular/superpowers-with-directives-and-dependency-injection-part-1-ho7'https://res.cloudinary.com/practicaldev/image/fetch/s--YuafD2cT--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkf8m276iurfw47bghpf.jpg'"['https://res.cloudinary.com/practicaldev/image/fetch/s--I1dYsxET--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/3316/b77c881d-527b-4295-9e3c-3aa9072a4671.png', 'https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--4meabhpS--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/608864/a011de04-2aca-4825-acbc-07b0a62746ab.png', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--u-Mfol7R--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/535221/c51c708e-7695-4b16-a485-7af2e3146535.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--6DIQCnOV--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/489357/a41f09f1-e89f-4abb-8feb-a640440494f8.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--cB6d_K8v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_775/https://dev-to-uploads.s3.amazonaws.com/i/hlhrtuspjyrstifubdhs.gif', 'https://res.cloudinary.com/practicaldev/image/fetch/s--XWAaqxhP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_350/https://res.cloudinary.com/practicaldev/image/fetch/s--qgcEl9sA--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2o9vibd5h0v5xq1et26v.png', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--lTSlxdms--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/3316/b77c881d-527b-4295-9e3c-3aa9072a4671.png', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--6PLRIXSr--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/489357/a41f09f1-e89f-4abb-8feb-a640440494f8.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--15jr7O5e--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkf8m276iurfw47bghpf.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--X3WBgZnK--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/602085/6eac2411-95a9-4bb5-838f-5ef8a26558e0.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--YuafD2cT--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkf8m276iurfw47bghpf.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--g3X1swQk--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/602085/6eac2411-95a9-4bb5-838f-5ef8a26558e0.jpg', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--xBjAueix--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/106613/0b053c00-62bb-4755-aa97-30195d5a5cf4.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pzg9iSqY--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/636025/953ef04b-d12a-4e6f-a19e-f8d056fa830e.jpeg']"
6'1'Streamlining Software Rollouts: Finding the Perfect Deployment Strategy for Your Team’s Goals and User’s Needs'"<h2>
  
  
  What is a deployment strategy ?
</h2>

<p>A deployment strategy is a set of methods and techniques used to roll out software updates or new features to a live production environment. The aim of a deployment strategy is to ensure that the software update or feature is introduced in a controlled and efficient manner while minimizing the risk of errors or downtime.</p>

<p>Deployment strategies typically involve several steps, including testing the new code or feature, preparing the production environment for the update, deploying the update to the live environment, monitoring the update for issues, and rolling back the update if necessary.</p>

<h2>
  
  
  How important is choosing the right deployment strategy ?
</h2>

<p>Choosing the right deployment strategy is extremely important for any software project. A poorly chosen deployment strategy can result in errors, downtime, and poor user experience, which can damage the reputation of the software and the organization behind it.</p>

<p>The right deployment strategy can help ensure that updates or new features are introduced in a controlled and efficient manner, minimizing the risk of errors and downtime. It can also help improve the user experience by allowing new features to be rolled out smoothly and without interruption.</p>

<p>Moreover, choosing the right deployment strategy is crucial for scaling software projects. As the number of users grows, the risk of errors and downtime increases, making it even more important to have a deployment strategy that can handle the load and minimize the risk of issues.</p>

<h2>
  
  
  Deployment Strategies
</h2>

<p><strong>1. Blue-Green Deployment</strong><br />
Imagine you’re planning to renovate your home — you want to give it a fresh look and feel without causing any disruptions to your daily life. One option could be to move out of your home completely while the renovations take place, but this would be expensive, inconvenient and disruptive.</p>

<p>Instead, you could take a blue-green deployment approach — you create a duplicate of your home (the green home) and perform all the renovations and updates there. Once the updates are complete and tested, you can move into the green home and start enjoying the new and improved space while keeping the original home (the blue home) as a backup in case anything goes wrong.</p>

<p>This approach allows you to continue with your daily routine without any disruptions while the updates are taking place. If anything goes wrong, you can simply move back into your original home without any major issues.</p>

<p>However, maintaining two identical homes can be costly and resource-intensive, just like maintaining two identical production environments in software development. It’s important to ensure that both environments are kept in sync to avoid any inconsistencies or errors that may arise due to differences between the two environments.</p>

<p><strong>2. Ramped Deployment Strategy</strong></p>

<p>Ramped Deployment is a deployment strategy that involves introducing updates or new features to a software application gradually over time, instead of all at once. This approach aims to minimize disruption and reduce the risk of errors or downtime by gradually rolling out updates to a subset of users or servers before introducing them to the entire system.</p>

<p>The ramped deployment strategy typically involves several stages, starting with identifying the subset of users or servers that will receive the updates first. This may involve selecting users or servers based on criteria such as geography, user behavior, or usage patterns.</p>

<p>Once the initial subset of users or servers has been identified, the updates are introduced gradually over time, with monitoring and feedback mechanisms in place to track performance and identify any potential issues. This may involve gradually increasing the percentage of users or servers that receive the updates, while monitoring metrics such as performance, user behavior, and feedback.</p>

<p>If any issues arise during the ramped deployment process, the updates can be quickly rolled back or changes can be made before introducing them to a larger subset of users or servers. This approach allows for more control over the deployment process and reduces the risk of errors or downtime.</p>

<p>The ramped deployment strategy is particularly useful for larger software applications or updates that may have a significant impact on user experience or system performance. By gradually introducing updates, it allows developers to identify and resolve issues before they impact a larger number of users or servers.</p>

<p><strong>3. Canary Deployment Strategy</strong></p>

<p>Canary Deployment is a deployment strategy that involves introducing updates or new features to a small subset of users or servers before introducing them to the entire system. This approach is similar to the way a canary in a coal mine would signal any potential danger, allowing for quick identification and resolution of any issues before they impact a larger number of users or servers.</p>

<p>The canary deployment strategy typically involves selecting a small group of users or servers that will receive the updates first, typically between 5–10%. These users or servers are carefully selected based on specific criteria, such as geography, usage patterns, or user behavior.</p>

<p>Once the updates have been introduced to the canary group, performance metrics and feedback mechanisms are used to monitor the impact of the updates. If no issues arise, the updates are gradually introduced to a larger subset of users or servers, until they are fully deployed to the entire system.</p>

<p>If any issues arise during the canary deployment process, the updates can be quickly rolled back or changes can be made before they impact a larger number of users or servers. This approach allows for more control over the deployment process and reduces the risk of errors or downtime.</p>

<p>The canary deployment strategy is particularly useful for larger software applications or updates that may have a significant impact on user experience or system performance. By introducing updates to a small group of users or servers first, it allows developers to identify and resolve any issues before they impact a larger number of users or servers.</p>

<p><strong>4. A/B Deployment Strategy</strong></p>

<p>A/B Deployment Strategy is a deployment strategy that involves introducing two different versions of an application or feature to two separate groups of users or servers. This approach is used to determine which version performs better, allowing for informed decisions to be made about which version to roll out to the entire system.</p>

<p>The A/B deployment strategy typically involves selecting two groups of users or servers, with each group receiving a different version of the application or feature. These versions may have differences in design, functionality, or performance.</p>

<p>Performance metrics and feedback mechanisms are used to monitor the impact of each version on user experience and system performance. Once enough data has been collected, the version that performs better is selected to be rolled out to the entire system.</p>

<p>The A/B deployment strategy allows for more informed decision-making about which version of an application or feature to roll out, based on data and user feedback. It also allows developers to test different versions without impacting the entire system or risking downtime.</p>

<p>The A/B deployment strategy is particularly useful for applications or features that may have a significant impact on user experience or system performance, and where there are multiple versions or design options to consider.</p>

<p><strong>5. Shadow Deployment Strategy</strong></p>

<p>Shadow Deployment is a deployment strategy that involves introducing a new version of an application or feature to a small group of users or servers without impacting the main production environment. This approach allows developers to test the new version in a real-world setting without risking downtime or errors for the main user base.</p>

<p>The Shadow Deployment strategy typically involves selecting a small group of users or servers that will receive the new version, while the majority of users or servers continue to use the existing version. The new version runs parallel to the existing version, with performance metrics and feedback mechanisms used to monitor its impact on user experience and system performance.</p>

<p>By running the new version in parallel with the existing version, developers can observe how it performs in a real-world setting without impacting the main user base. This allows them to identify and address any issues before rolling out the new version to the entire system.</p>

<p>The Shadow Deployment strategy is particularly useful for applications or features that may have a significant impact on user experience or system performance. It allows developers to test new versions in a real-world setting, identify issues, and address them before rolling out the new version to the entire system.</p>"'https://dev.to/anay21110/streamlining-software-rollouts-finding-the-perfect-deployment-strategy-for-your-teams-goals-and-users-needs-49fa'https://res.cloudinary.com/practicaldev/image/fetch/s--D7k0b8YM--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqlaxen62o8u6qil3zvd.jpeg'"['https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--wbXyuJMF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_775/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/canu9jk4l6nsbi63ctph.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--33QdP1RR--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1016920/e2aaea80-904b-471f-8917-20a3eeadd4ec.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--5Zr4cZZH--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/357517/e2940710-4381-461a-9567-084feffa873f.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--ksOg-srw--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1016920/e2aaea80-904b-471f-8917-20a3eeadd4ec.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--D7k0b8YM--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqlaxen62o8u6qil3zvd.jpeg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--w2N4V0_v--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/624685/daea0102-8be8-4177-931f-0991f24d422d.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--J8DlPsPp--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/628517/fa1515d5-6c9e-4293-bf71-ab3dd525c5d7.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--yNw3Faph--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/664799/58944665-dba8-4a05-9ffc-ccc04eab4ba9.jpeg', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pIpE3MmA--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqlaxen62o8u6qil3zvd.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--XHe9CTbX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_775/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39y36qwrpkuaiw0oryw2.png']"
7'1'FeathersJS vs NestJS - Compared in 3 Key Areas'"<p><em>Cover photo by <a href=""https://unsplash.com/@wacalke?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit"">Mateusz Wacławek</a></em></p>

<p><a href=""https://blog.feathersjs.com/introducing-feathers-5-the-api-and-real-time-application-framework-101ae2deaaeb"">FeathersJS released its 5th major version, a.k.a Dove recently</a>, and I've been watching the framework for some time. It is an excellent time to compare two backend framework giants, FeathersJS and NestJS. These are not your ""yet another javascript framework"" type of framework. They pave the way to backend development in the Node.js environment.</p>




<p>In my opinion, Node.js provides a very powerful backend software development environment. A typical backend application accepts requests, executes queries on the database, and writes some files to disk. All of these tasks can be handled asynchronously in Node.js, meaning the server can handle many requests at the same time. Even though you can achieve the same or better results in other languages, it is easier to write asynchronous code in Javascript.</p>

<p>The struggle in the Node.js world is <strong>standardization.</strong> You have too many options to choose from, due to the large number of npm packages and the community size. You can find new javascript framework releases every other week, or someone in the community sharing their way of building applications. Don't get me wrong, I'm happy to be in such an active community but this is a double-edged sword.</p>

<p>FeathersJS and NestJS both provide a structure for writing backend applications with their techniques. Both of them are capable of creating the same applications however their style differs a lot.</p>

<p>In this post, I will be comparing FeathersJS and NestJS from a developer experience perspective on key areas.</p>

<h2>
  
  
  Application Structure
</h2>

<h3>
  
  
  Application Structure - FeathersJS
</h3>

<p>To create a new FeathersJS application, execute this in your terminal: <code>npm create feathers</code></p>

<p>In the application creation process, FeathersJS CLI allows for many customizations such as:</p>

<ul>
<li>Use <code>TypeScript or JavaScript</code>
</li>
<li>Use <code>KoaJS or Express</code>,</li>
<li>Will you build a <code>REST application, Real-time application or all off them</code>
</li>
<li>Which package manager to use <code>npm, yarn, pnpm</code>
</li>
<li>What is your preferred schema definition format <code>TypeBox or JSON Schema</code>
</li>
<li>Which databases will you connect to <code>SQLite, MongoDB, PostgreSQL, MySQL/MariaDB, MicrosoftSQL</code>
</li>
<li>Select authentication mechanisms <code>Email + Password, Google, Facebook, Twitter, Github and Auth0</code>
</li>
</ul>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code>feathers-app/
├── config/
│   ├── custom-environment-variables.json
│   ├── default.json
│   └── test.json
├── knexfile.ts
├── migrations/
│   ├── 20230205130353_user.ts
│   └── 20230205130403_authentication.ts
├── package-lock.json
├── package.json
├── public/
│   └── index.html
├── readme.md
├── src/
│   ├── app.ts
│   ├── authentication.ts
│   ├── channels.ts
│   ├── client.ts
│   ├── configuration.ts
│   ├── declarations.ts
│   ├── hooks/
│   │   └── log-error.ts
│   ├── index.ts
│   ├── logger.ts
│   ├── services/
│   │   ├── index.ts
│   │   └── users/
│   │       ├── users.class.ts
│   │       ├── users.schema.ts
│   │       ├── users.shared.ts
│   │       └── users.ts
│   ├── sqlite.ts
│   └── validators.ts
├── test/
│   ├── app.test.ts
│   ├── client.test.ts
│   └── services/
│       └── users/
│           └── users.test.ts
└── tsconfig.json
</code></pre>

</div>



<p>FeathersJS application folder structure, automatically generated by CLI<br />
FeathersJS application folder structure allows developers to easily decide where to put new files. It is well-structured and easily recognizable.</p>

<p>FeathersJS's preferred style of writing applications revolves around the idea of <strong>services</strong>. If you want to introduce new functionality in your application, you are most likely going to create a new <strong>service</strong> in FeathersJS.</p>

<p>Other than that, core functionalities such as authentication, routing, logging, and validation are well-defined in FeathersJS. You are very likely to use existing solutions provided by the framework with little configuration.</p>

<p>One thing that makes FeathersJS special is, it can <strong>generate its client code automatically.</strong> This is a unique feature I've never heard before - <em>correct me if I am wrong on this.</em></p>

<p>Another special feature of FeathersJS is that it has the concept of <strong>channels</strong>. Which allows clients or other servers running your code to get notified about certain events. It is almost an in-app message broker on the server side. I'm not sure about the scalability of channels though! This is a very neat feature considering FeathersJS calls itself: <a href=""https://feathersjs.com/"">The API and Real-time<br />
Application Framework.</a></p>

<p>Least but not least, you can replace almost all 3rd party npm packages in FeathersJS to your taste. You might want to use another validation library or logging library, BUT you will never want to worry about your HTTP server library. FeathersJS HTTP server works fast and its <strong>performance is not dependent on the underlying HTTP server</strong>, read more about this here: <a href=""https://feathersjs.com/guides/whats-new.html#lightning-fast-routing"">Lightning Fast Routing</a></p>
<h3>
  
  
  Application Structure - NestJS
</h3>

<p>To create a new NestJS application, execute this on your terminal: <code>nest new my-project</code></p>

<p>NestJS doesn't provide many customizations through CLI but it has guides for customizations such as switching HTTP adapters.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code>nest-app/
├── README.md
├── nest-cli.json
├── package-lock.json
├── package.json
├── src/
│   ├── app.controller.spec.ts
│   ├── app.controller.ts
│   ├── app.module.ts
│   ├── app.service.ts
│   ├── main.ts
│   └── user/
│       ├── dto/
│       │   ├── create-user.dto.ts
│       │   └── update-user.dto.ts
│       ├── entities/
│       │   └── user.entity.ts
│       ├── user.controller.spec.ts
│       ├── user.controller.ts
│       ├── user.module.ts
│       ├── user.service.spec.ts
│       └── user.service.ts
├── test/
│   ├── app.e2e-spec.ts
│   └── jest-e2e.json
├── tsconfig.build.json
└── tsconfig.json
</code></pre>

</div>



<p>NestJS application folder structure, automatically generated by CLI<br />
NestJS has a very modular project structure which is also reflected in its folder structure.</p>

<p>NestJS's preferred style of writing applications revolves around the idea of <strong>modules</strong>. Modules contain providers and controllers, they can import other modules or export their providers, and they are configurable, read more about it in the previous post: <a href=""https://nooptoday.com/dynamic-modules-in-nestjs/"">Best Way to Create Dynamic Modules in NestJS</a>.</p>

<p>The business logic of a NestJS application usually resides in <strong>services</strong>. A service can use other services via <strong>dependency injection</strong>.</p>

<p>Implementation details of the NestJS framework are mostly hidden from the developers. <strong>NestJS exposes most of its functionality via Typescript decorators</strong>. If you are into code aesthetics you can prefer this style of coding, and read more about it in the previous post: <a href=""https://nooptoday.com/custom-decorators-in-nestjs/"">Custom Decorators in NestJS</a></p>

<p>Since NestJS doesn't allow much customization it is easy for other NestJS developers to adapt your project easily.</p>

<p>A unique approach NestJS brings to backend application development is using reactive programming for most things. You can see <strong>Observables being used in HTTP requests, events, commands anything you name.</strong> This might be an innovative approach but in my experience, observables cause a performance drop in NestJS applications.</p>

<p>Similar to FeathersJS, core functionalities are well-defined and you can find resources for whatever you want to do in a NestJS application. NestJS can be considered a little more mature compared to FeathersJS.</p>

<p>NestJS is also customizable but due to the way adapters are written, sometimes using a different package can cause a loss of functionality. For example, it is known that <strong>you lose functionality by switching from Express Adapter to Fastify Adapter,</strong> but this is a minor inconvenience for most developers.</p>

<p>Last but not least, <strong>NestJS CLI is capable of managing a monorepo project structure.</strong> Which is very helpful if you are doing <strong>microservices</strong> with NestJS.</p>

<h2>
  
  
  Customization Options
</h2>

<h3>
  
  
  Customization Options - FeathersJS
</h3>

<p>FeathersJS is intentionally made to be very customizable. There are two reasons for that.</p>

<p>Firstly, if you are already developing your backend application in ExpressJS, you can just switch ExpressJS with FeathersJS and your project will work just fine. From there on, you can make the full switch bit by bit. This allows an easier migration path for projects that use ExpressJS.</p>

<p>Secondly, FeathersJS doesn't want to have opinions about how you implement your application. Rather, it aims to lay out best practices and its own implementations for them. It has good solutions that work well, and you can use them whenever you want to.</p>

<h3>
  
  
  Customization Options - NestJS
</h3>

<p>NestJS is intentionally made to be less customizable. </p>

<p>NestJS aims to be the framework for enterprise applications. Enterprises don't like custom solutions. Custom solutions are costly to enterprise because it requires the knowledge of the person who implemented them. Developers can come and go, the project shouldn't be affected by this.</p>

<p>Also, we shouldn't forget NestJS is heavily inspired by AngularJS and it is also one of the less customizable frameworks for frontend.</p>

<p>BUT, this doesn't mean you can't customize your project or every other NestJS developer can immediately start working on existing NestJS projects. The reality is you can customize, but you shouldn't do it. Even if you do leave tracks of the NestJS railway, you will probably go back to the track for using some other functionality to work. Let me make it clear with a simple example:</p>

<p>You can opt out of the class-validator library in NestJS and use AJV for validation. It works without causing you problems but now you can't use automatic OpenAPI generation in NestJS.</p>

<h2>
  
  
  Community and Documentation
</h2>

<h3>
  
  
  Community and Documentation - FeathersJS
</h3>

<p>FeathersJS has a small, helpful, and welcoming community. You can join the community in Discord. One thing very noticeable on the FeathersJS website is the <a href=""https://feathersjs.com/ecosystem/"">Ecosystem</a> page where community-driven FeathersJS packages are promoted!</p>

<p>FeathersJS documentation walks you through everything you need in the framework. It is simple and clear. There are a few amounts of blog posts or online courses for FeathersJS, but I think numbers will go up after the latest release. David Luecke and other core maintainers are putting a lot of effort into the framework for some time, and I hope they get more recognition in the Node.js ecosystem.</p>

<h3>
  
  
  Community and Documentation - NestJS
</h3>

<p>NestJS has a large, helpful, and welcoming community. You can join the community in Discord. NestJS has official online courses <a href=""https://courses.nestjs.com/"">that can be purchased on its website</a>.</p>

<p>I don't know how popular is their course but documentation on their website can get you through most of the things. To solve some problems you might need help from StackOverflow or GitHub issues but other than that, I think documentation and examples are enough. Can't skip here without mentioning <a href=""https://www.udemy.com/course/nestjs-zero-to-hero/"">NestJS Hero to Zero</a> online course by Ariel Weinberger, which I've completed and found helpful.</p>

<p>I haven't had time to review the new <a href=""https://devtools.nestjs.com/login"">Developer Tools</a> by NestJS, but it looks like a very helpful tool. It is a paid tool by NestJS but at a low price. I think it would be much better if they released it for free at least initially.</p>

<h2>
  
  
  Summary
</h2>

<p>You can build applications of any size and functionality whichever you choose. To choose between FeathersJS and NestJS means choosing between two different code styles. In my opinion, the development process in FeathersJS feels more fitting ( natural ) to the Node.js environment, but, I also understand the reason why NestJS is preferred by enterprise applications.</p>

<p>Mad respect to both David Luecke and Kamil Mysliwiec and all the other contributors, and maintainers of both projects for creating two of the strongest backend frameworks for Node.js.</p>

<p>If you have experience in either of the frameworks, I would like to know what you think, please share your experiences and opinions in the comment section.</p>

<p>I hope you learned something new, have a good one!</p>"'https://dev.to/nooptoday/feathersjs-vs-nestjs-compared-in-3-key-areas-35a1'https://res.cloudinary.com/practicaldev/image/fetch/s--IdJ20wAS--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5418jdl8b210xn73wt4.jpg'"['https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--0lkq3ppR--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/508039/ee9485f5-4bf1-4f0f-9eed-c30d801e9de8.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--jKMEq0zA--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/92810/4e315a84-5c71-4af1-adaa-cf55a7df7021.jpeg', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--qSwy0m3Z--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/991922/5a7af7d8-fbce-42a8-a0b9-c46c9131b9fb.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--FsIEpMfu--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/6484/3fc42ed3-3d3b-42aa-8bbb-4bc9e789b063.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--dE9WGJxj--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/508039/ee9485f5-4bf1-4f0f-9eed-c30d801e9de8.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--8t-VGqgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_775/https://dev-to-uploads.s3.amazonaws.com/i/7p7qe33hhlj5zdi3bj82.jpg', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--8Uwdvfwd--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5418jdl8b210xn73wt4.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--hbU6KEd---/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/100355/b13442b4-7ff2-42b4-933a-11bf1931618b.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--rv6x8tmA--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/868273/f23ff476-9a14-44a3-9a80-51ee734dc50d.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--tdo1ASu4--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/106501/3cc6bd9d-3066-4bd1-b450-afe33dcba61f.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--IxrGprDT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_350/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fbsvcwqnj5mgkzuwy24r.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--IdJ20wAS--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5418jdl8b210xn73wt4.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--eczEtvII--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/92810/4e315a84-5c71-4af1-adaa-cf55a7df7021.jpeg', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--oEeVEedl--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/6484/3fc42ed3-3d3b-42aa-8bbb-4bc9e789b063.png']"
8'1'What Are the Best Time Management Tools for Coders & Developers?'"<p>It’s Monday! And what better day of the week to talk about time management? There are a ton of time management tools out there — some general, and some more specific to the needs of coders and developers. </p>

<p>There's the good ol’ Pomodoro Technique, a time management method that involves breaking work into 25-minute intervals that are separated by quick breaks. But there are also so many time-tracking and task management apps, project management software, calendar apps, and note-taking tools. Not to mention code editors like Visual Studio Code and Sublime Text.</p>

<p>Using these tools (the <strong><em>right</em></strong> tools for you…and <strong><em>if</em></strong> you use them) can help you manage your time more effectively and be more productive as a coder or developer. Which do you use? </p>

<p>Which tools and technique do you use? And what would you suggest for newbies who are just getting started and need a way to stay focused?</p>"'https://dev.to/codenewbieteam/what-are-the-best-time-management-tools-for-coders-developers-4249'https://res.cloudinary.com/practicaldev/image/fetch/s--AzSv1wn2--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tv34isgjsobn50wi8y6.png'"['https://res.cloudinary.com/practicaldev/image/fetch/s--qt_66fM4--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2167/a575e4d1-42a8-471a-ab8a-a9240b002aa8.png', 'https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--4E973LfH--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/138869/eaf22844-4f68-4701-abd9-700960b64e1c.jpg', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--MBON_MoM--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tv34isgjsobn50wi8y6.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--MPTV7Jw8--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2167/a575e4d1-42a8-471a-ab8a-a9240b002aa8.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--H92Ev92y--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/992448/7e3e289f-404c-475c-96e9-7032c44b6e27.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--AzSv1wn2--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tv34isgjsobn50wi8y6.png', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--TZxgOuTM--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1/f451a206-11c8-4e3d-8936-143d0a7e65bb.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--08M86K8B--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/75811/65de3b50-9eba-4127-95c2-df2a7de2dfd0.jpg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--8t-VGqgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_775/https://dev-to-uploads.s3.amazonaws.com/i/7p7qe33hhlj5zdi3bj82.jpg', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--mJEmDAY2--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/75811/65de3b50-9eba-4127-95c2-df2a7de2dfd0.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--YIzk_5MJ--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/995013/ac08f63e-6c83-4e04-aa00-eebc7390f35c.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--eMz9HiSt--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/870552/e6ab7f7b-d002-4c06-af3c-0e7f0ea194c1.png', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--N9yjPYHJ--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/138869/eaf22844-4f68-4701-abd9-700960b64e1c.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--PsN9w6FK--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/656421/a0956cd3-1336-462b-9fd4-cb0793446706.png']"
9'1'Guide to Serverless & Lambda Testing — Part 2 — Testing Pyramid'"<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s---pskacX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AAWRDpOSRREI16epOeQBxjg.png""><img alt=""Serverless Testing Pyramid"" height=""534"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s---pskacX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AAWRDpOSRREI16epOeQBxjg.png"" width=""804"" /></a></p>

<p>Software testing increases application quality and reliability. It allows developers to find and fix software bugs, mitigate security issues, and simulate real user use cases.</p>

<p>It is an essential part of any application development.</p>

<p>Serverless is an amazing technology, almost magic-like. Serverless applications, like any other applications, require testing.</p>

<p>However, testing Serverless applications differs from traditional testing and introduces new challenges.</p>

<p>In <a href=""https://www.ranthebuilder.cloud/post/guide-to-serverless-lambda-testing-best-practices-part-1"">part one</a>, you learned why Serverless services introduce new testing challenges and my practical guidelines for testing Serverless services and AWS Lambda functions that mitigate these challenges.</p>

<p><strong>In this post, you will learn to write tests for your Serverless service. We will focus on Lambda functions and provide tips &amp; tricks and code examples by writing tests for a real Serverless application. In addition, you will learn my Serverless adaptation to the classical <a href=""https://martinfowler.com/articles/practical-test-pyramid.html"">testing pyramid</a> and implement it.</strong></p>

<p>**In part three, **you will learn to test AWS Step Functions, Async Serverless services, and other non-Lambda-based Serverless services.</p>

<p><strong>A complimentary Serverless service project that utilizes Serverless testing best practices can be found <a href=""https://github.com/ran-isenberg/aws-lambda-handler-cookbook"">here</a>.</strong></p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--c2kJOo9X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AEJ_dFl7UwvT1BIJu.png""><img alt=""[https://www.ranthebuilder.cloud/](https://www.ranthebuilder.cloud/)"" height=""192"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--c2kJOo9X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AEJ_dFl7UwvT1BIJu.png"" width=""770"" /></a></p>

<p><strong>This blog was originally published on my website <a href=""https://www.ranthebuilder.cloud/"">“Ran The Builder”</a></strong></p>

<h2>
  
  
  The Orders Serverless Service
</h2>

<p>We will use this sample service and write tests for its Lambda function handler.</p>

<p>Here’s the architecture diagram:</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--3PGV6gSw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2960/0%2ArU8qwVNn6qqn2Lub.png""><img alt=""Order service"" height=""326"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--3PGV6gSw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2960/0%2ArU8qwVNn6qqn2Lub.png"" width=""880"" /></a></p>

<p>The ‘order’ service gets customers’ orders for a single product type and saves the orders in the database.</p>

<p>This sample service is simple, an API Gateway that triggers a Lambda function that writes to a DynamoDB table. In addition, the Lambda function uses AppConfig for dynamic configuration and feature flags.</p>

<p>I use AWS CDK to deploy the order service.</p>

<p>I created this serverless template service that incorporated many best practices in the Serverless domain, from CI/CD and CDK to writing good function handlers.</p>

<p>Read more about it <a href=""https://www.ranthebuilder.cloud/post/aws-lambda-cookbook-part-7-how-to-use-the-aws-lambda-cookbook-github-template-project"">here</a> and <a href=""https://ran-isenberg.github.io/aws-lambda-handler-cookbook/"">here</a>.</p>

<p>The repository: <a href=""https://github.com/ran-isenberg/aws-lambda-handler-cookbook"">https://github.com/ran-isenberg/aws-lambda-handler-cookbook</a></p>

<h2>
  
  
  The Serverless Testing Pyramid
</h2>

<h3>
  
  
  Assumptions
</h3>

<ol>
<li><p>The definitions below are not academic; they are my definition. The definition is not as important as the substance. As long as you test these aspects of your Serverless application, you can have confidence in your overall quality.</p></li>
<li><p>While not mandatory, it’s best you read the Serverless testing guidelines I presented in the previous <a href=""https://www.ranthebuilder.cloud/post/guide-to-serverless-lambda-testing-best-practices-part-1"">**post</a>** in the series.</p></li>
<li><p>I use Python in the examples, but the principles are relevant to most Lambda-supported programming languages.</p></li>
</ol>

<p>Let’s go over the Serverless testing pyramid and understand the values and goals each step along the pyramid provides.</p>

<h3>
  
  
  A Pyramid?!
</h3>

<blockquote>
<p>The “Test Pyramid” is a metaphor that tells us to group software tests into buckets of different granularity. It also gives an idea of how many tests we should have in each of these groups. Although the concept of the Test Pyramid has been around for a while, teams still struggle to put it into practice properly” — <a href=""https://martinfowler.com/articles/practical-test-pyramid.html#TheTestPyramid"">Martin Fowle</a>r</p>
</blockquote>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--qrjSWcOq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2960/0%2A4IMZTIscENeNAxZd.png""><img alt=""Serverless testing pyramid"" height=""501"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--qrjSWcOq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2960/0%2A4IMZTIscENeNAxZd.png"" width=""880"" /></a></p>

<p>Let’s make sense of this diagram.</p>

<p>The diagram defines four levels of tests: unit, infrastructure, integration, and end-to-end (E2E). Each test has its purpose and characteristics.</p>

<p>Following my Servleress testing guidelines, all tests are triggered in the IDE, and the developers can add breakpoints to their code.</p>

<p>Each test type gets its folder in the project structure under the main ‘/tests’ folder.</p>

<p>As a side note, I use ‘pytest’ for Python-based applications for the testing engine.</p>

<p>Let’s review the different testing types and their characteristics.</p>

<h2>
  
  
  Unit Tests
</h2>

<p>Unit tests test the functionality of individual units of code. These tests are meant to be <strong>quick</strong>, easy to debug in the IDE with breakpoints, and do not require deployment to AWS, thus making them <strong>isolated</strong>.</p>

<p>Unit tests come into play in the code you write, i.e., the Lambda function code.</p>

<p>I usually use them in two use cases:</p>

<ol>
<li><p>Schema validations logic — I use <a href=""https://docs.pydantic.dev/"">Pydantic</a> for input validation and schema validation (<a href=""https://aws.amazon.com/sdk-for-python/"">boto</a> responses, API responses, input validation, etc.) use cases. The Pydantic schema can contain type and value constraint checks or even more complicated logic with the custom validator code.</p></li>
<li><p>Test small isolated functions or modules that have defined input and output. In this case, I want to test the specific logic of an inner function/module and verify its logic and side effects. If the function requires AWS API calls or deployed resources, stub the call or move the test to the integration tests. I don’t recommend calling the handler itself at this point (it will be done as part of the integration tests), but only small isolated functions.</p></li>
</ol>

<p>If you want to learn more about input validation best practices for AWS Lambda functions, read more <a href=""https://www.ranthebuilder.cloud/post/aws-lambda-cookbook-elevate-your-handler-s-code-part-5-input-validation"">here</a>.</p>

<h3>
  
  
  Unit Tests Examples
</h3>

<p>Let’s write a unit test.</p>

<p>The orders service create order Lambda function expects a JSON document containing two parameters: ‘customer_name’ and ‘order_item_count.’</p>

<p>Our schema defines ‘customer_name’ as a string of lengths between 1 to 20 characters long and ‘order_item_count’ as a positive integer.</p>

<p>Sample valid input looks like this:<br />
</p>
<div class=""ltag_gist-liquid-tag"">
  
</div>
<br />
The matching Pydantic schemas looks like this:<br />
<div class=""ltag_gist-liquid-tag"">
  
</div>
<br />
Now, let’s write unit tests that check both valid and invalid input types:<br />
<div class=""ltag_gist-liquid-tag"">
  
</div>
<br />
The tests check as many error schema types error whether it’s an incorrect type or value constraints.

<p>The test in line 5 checks the constraint that the customer name is a non-empty string, as it expects the schema to raise an exception.</p>

<p>The test in line 21 checks that a non-integer order item count value raises an exception.</p>

<p>These tests might seem trivial, but the more logic and parameters you add to your schemas, the more it increases the possibility of a production bug.</p>

<blockquote>
<p><em>**“</em><em>Input validation should be applied on both **syntactical **and **Semantic **level. — <a href=""https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"">OWASP</a></em></p>
</blockquote>

<p>The complete order service unit tests can be found <a href=""https://github.com/ran-isenberg/aws-lambda-handler-cookbook/tree/main/tests/unit"">here</a>.</p>

<h2>
  
  
  Infrastructure Tests
</h2>

<p>As stated in the guidelines in my previous Servleress testing <a href=""https://www.ranthebuilder.cloud/post/guide-to-serverless-lambda-testing-best-practices-part-1"">post</a>, the application code and infrastructure reside in the same project and are deployed together.</p>

<p>Once your code and infrastructure are deployed, and there’s no turning back.</p>

<p>So, we want to ensure our infrastructure is configured correctly, that there are no missing resources (IaC frameworks have bugs, too), and that we have no security issues.</p>

<p>We want to verify these aspect before deployment, so we don’t disrupt our production environment.</p>

<p>As I’m more familiar with tools that use CloudFormation, I will provide testing tools based on it. The infrastructure tests will go over the CloudFormation template that we are about to deploy and check for numerous issues:</p>

<ol>
<li><p>Missing critical resources — a bucket/DynamoDB table/etc. was removed by mistake.</p></li>
<li><p>Logical ID change of stateful resources — when a logical ID of a resource changes, the previous resource is deleted and the resource is recreates again. For stateful resources, such as DynamoDB, data loss can occur.</p></li>
<li><p>Security issues — verify that role definitions are <a href=""https://aws.amazon.com/blogs/security/techniques-for-writing-least-privilege-iam-policies/"">least privileged</a> and resource configurations are secure: encryption at REST, no public S3 buckets, and more.</p></li>
</ol>

<p>For AWS CDK-specific infra tests example, head over to my AWS CDK best practices <a href=""https://www.ranthebuilder.cloud/post/aws-cdk-best-practices-from-the-trenches"">blog</a> and check out the “AWS CDK tests” section and the “Security Defaults are Not Good Enough” section.</p>

<p>For AWS SAM, check out their <a href=""https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/validate-cfn-lint.html"">linter</a>.</p>

<p>For generic CloudFormation templates, check <a href=""https://github.com/stelligent/cfn_nag"">CFN-NAG</a>.</p>

<h3>
  
  
  Infrastructure Tests Examples
</h3>

<p>Let’s define a CDK security infrastructure test. The test covers our serverless service definition, from API Gateway to Lambda role and function and DynamoDB table.<br />
</p>
<div class=""ltag_gist-liquid-tag"">
  
</div>
<br />
Line 10 synthesizes the CloudFormation template, and line 11 runs a set of tests defined by the <a href=""https://docs.aws.amazon.com/prescriptive-guidance/latest/patterns/check-aws-cdk-applications-or-cloudformation-templates-for-best-practices-by-using-cdk-nag-rule-packs.html"">AWS solution matrix</a>. An exception is raised in case of a security issue.

<p>You can add more security standards; see more information <a href=""https://docs.aws.amazon.com/prescriptive-guidance/latest/patterns/check-aws-cdk-applications-or-cloudformation-templates-for-best-practices-by-using-cdk-nag-rule-packs.html"">here</a>.</p>

<p>Now let’s define a CDK infrastructure test that verifies that our critical resource, the API Gateway, is defined and has not been deleted by mistake or bug.<br />
</p>
<div class=""ltag_gist-liquid-tag"">
  
</div>
<br />
Line 13 synthesizes the CloudFormation template, and line 16 asserts that there’s an API gateway resource. You can expand this test, verify logical ids of stateful resources, and ensure they have not changed.

<p>For other AWS CDK best practices, check out my other <a href=""https://www.ranthebuilder.cloud/post/aws-cdk-best-practices-from-the-trenches"">post</a>.</p>

<p>The complete order service infrastructure tests can be found <a href=""https://github.com/ran-isenberg/aws-lambda-handler-cookbook/tree/main/tests/infrastructure"">here</a>.</p>

<h2>
  
  
  Integration Tests
</h2>

<p>Integration tests are the bread and butter for Lambda function testing.</p>

<p>They test your code and how it integrates and interacts with the infrastructure you created on AWS. You test your Lambda function, a complete software module, either a micro or nano service, from start to its invocation end.</p>

<p>As such, integration tests require the deployment of your resources to AWS, and they typically:</p>

<ol>
<li><p>Run after the deployment phase in the CI/CD pipeline.</p></li>
<li><p>Run locally in IDE, allow to debug with breakpoints.</p></li>
<li><p>Run locally in IDE under the developer role and permissions, not the Lambda role.</p></li>
<li><p>Call the function handler with a generated Lambda function event to simulate a real Lambda integration invocation.</p></li>
<li><p>Require to set up local environment variables, hooks, or mocks required by the function at the beginning of the test (see <a href=""https://www.tutorialspoint.com/pytest/pytest_conftest_py.htm"">conftest</a> for Python).</p></li>
<li><p>Can call AWS services APIs and resources.</p></li>
<li><p>They are typically slower and less isolated.</p></li>
<li><p>Make up the majority of the service tests.</p></li>
<li><p>Contain tests for edge cases with mocks (mock failures or raised exceptions).</p></li>
</ol>

<p>I mentioned in item 4 that you should generate the expected function event. There are at least three options I can think of for finding out the event schema sample:</p>

<ol>
<li><p>Generate it on your AWS account, print the event, and copy-paste it into a factory function that returns it for the integration tests.</p></li>
<li><p>Use the <a href=""https://lambda.101i.de/"">https://lambda.101i.de/</a> schema repository. It contains an absurd number of sample event schemas.</p></li>
<li><p>Read the documentation of the service that invokes your Lambda function. While not perfect, many AWS services have improved documentation and now include sample events.</p></li>
</ol>

<h3>
  
  
  Where to Start
</h3>

<p>I usually develop a new Lambda function handler by writing a “happy” flow input integration test that calls my new function. The happy flow simulates a real business use case and input. That way, I can debug my code locally until the test passes and use real AWS resources, ala <a href=""https://en.wikipedia.org/wiki/Test-driven_development"">TDD</a> style.</p>

<p>Other tests should simulate (with mocks) the following use cases:</p>

<ol>
<li><p>Errors from AWS APIs — verify that we handle the errors correctly, perhaps even retry the action and not crash.</p></li>
<li><p>Raised exceptions in internal layers, verified that they are captured, and the function’s response is correct (Internal server error code for HTTP, etc.).</p></li>
<li><p>Invalid input — verify an HTTP Bad Request response code is returned (when the function is behind an API Gateway).</p></li>
<li><p>Feature flags configuration — I’ve written a post about how to handle testing with feature flags; read it <a href=""https://www.ranthebuilder.cloud/post/manage-your-aws-lambda-feature-flags-like-a-boss"">here</a>.</p></li>
<li><p>Assert function side effects occurred correctly — did your function save an item to the DB? did it contain the expected parameters?</p></li>
</ol>

<h3>
  
  
  Integration Tests Examples
</h3>

<p>Let’s write an integration test for our ‘create order’ API Lambda function. The Lambda takes an input event, parses it and saves it to a DynamoDB table.</p>

<p>Let’s take a look at the Lambda handler we wish to test.<br />
</p>
<div class=""ltag_gist-liquid-tag"">
  
</div>
<br />
The Lambda handler will receive the input, verify the configuration, validate the input, and call the logic layer to create the order. Here’s a snippet of the handler’s signature:

<p>Click <a href=""https://github.com/ran-isenberg/aws-lambda-handler-cookbook/blob/main/service/handlers/create_order.py"">here</a> to view the complete handler code.</p>

<p>Now, let’s start writing the integration test.</p>

<p>In Python’s pytest, we can use conftest files to define <a href=""https://docs.pytest.org/en/6.2.x/fixture.html"">fixtures</a> that run before any test module and set global mocks or environment variables that our Lambda handler requires.<br />
</p>
<div class=""ltag_gist-liquid-tag"">
  
</div>
<br />
We set numerous handler environment variables that the logger, tracer, and feature flags need. In addition, line 18 defines the variable for the DynamoDB table name that we save orders to. In the CDK code that defines the table, I set the table name as a CloudFormation stack <a href=""https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html"">output</a> so it can be loaded up as an environment variable in the test in an effortless manner. It’s a nice trick, and I recommend you do that for all environment variables you need to load up in the integration tests.

<p>In line 21 we create a fixture that will inject the DynamoDB table name as an argument to our handler test.</p>

<p>Now, let’s take a look at the some of the integration tests of this handler.<br />
</p>
<div class=""ltag_gist-liquid-tag"">
  
</div>
<br />
Look at the first happy flow test — ‘test_handler_200_ok’ in line 10.

<p>When the create order handler receives a valid event, we expect it will write it to the DynamoDB table and return HTTP 200 OK code.</p>

<p>Line 13 creates a sample valid input payload of the API.</p>

<p>In line 14, we trigger the create_order Lambda handler with a generated event that contains the valid input and the other API Gateway metadata attributes. We can now add breakpoints to the handler, debug our logic, and ensure the tests pass.</p>

<p>The event generation factory method ‘generate_api_gw_event’ creates a complete AWS API Gateway event with the test payload and can be found <a href=""https://github.com/ran-isenberg/aws-lambda-handler-cookbook/blob/main/tests/utils.py"">here</a>.</p>

<p>Once finished successfully, the test asserts in lines 16–20 that the response schema is valid and contains the expected values.</p>

<p>In lines 22–26, we get the inserted item from the DynamoDB table and verify that the function wrote the item correctly to the table. The table name was populated as an argument to the test (as we saw in the conftest ‘table_name’ fixture).</p>

<h3>
  
  
  Real AWS Services vs. Mocks
</h3>

<p>One significant advantage we gain by running the tests locally with Pytest but against real AWS resources is that we can mock almost anything. In the second test, ‘test_internal_server_error,’ we mock the AWS boto <a href=""https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#table"">Table</a> resource and simulate a DynamoDB client error when we fail to save an item to the database. This simulation allows us to test our retry code and dead letters queue strategy and verify that the function’s return value, in this case, is HTTP <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500"">500</a>.</p>

<p>In line 33, we mock the inner function in the logic layer of the function that creates a ‘boto’ Table resource. The mocked function will raise an exception when called.</p>

<p>Line 37 asserts that the exception was handled correctly, and in line 38, we assert that our mock function object was called to make sure it was the one that raised the exception.</p>

<p>We can choose to mock whatever internal logic we wish to break. We can use real AWS resources and mock only some of them, depending on your logic. Ultimately, you’d want to cover all use cases where you handle exceptions or errors and mock API calls with failures.</p>

<p>Code coverage <a href=""https://coverage.readthedocs.io/en/7.1.0/"">utilities</a> can help you make sure you cover your bases. However, they don’t guarantee that your handler really works. You must simulate real business use cases.</p>

<p>View the complete integration test <a href=""https://github.com/ran-isenberg/aws-lambda-handler-cookbook/blob/main/tests/integration/test_create_order.py"">here</a>.</p>

<h2>
  
  
  End to End Tests (E2E)
</h2>

<p>The end-to-end tests aim to run against the deployed resources, simulate real customers’ use cases, and trigger and event driven process across your architecture.</p>

<p>You want to ensure your infrastructure is configured correctly, that the event traverses between AWS resources correctly, that your AWS Lambda functions run with correct environment variables, and that their roles are configured with all the required permissions.</p>

<p>We will generate locally in the IDE the starting event and verify the responses.</p>

<p>From there, the entire process runs on your AWS account, and we have zero control over it. As such, these are the slowest tests to run as they test the entire chain from start to end on the infrastructure.</p>

<p>Please note that we don’t have any option to mock failures, so I’d recommend testing only customer happy flows and security-related tests (more on that later).</p>

<p>We will not poll or call AWS resources directly but use API calls, the same as the customer would. We must send a REST API call to the API Gateway and assert its response. Any side effect was already tested and proved to be working in the integration tests that use REAL AWS services, so there’s no need to retest it other than to assert Lambda’s response. To put it in context, in the order service, when creating a new order, verify that the response is valid and contains values as expected. However, don’t check the DynamoDB table directly for the inserted item, but use customer facing REST APIs — a ‘get order’ API (it does not exist yet in my example but you get the point) to check the item was inserted.</p>

<p>In part three of this series, I will discuss how to test Step Functions and async services, but for now, let’s focus on the synchronous flow of the order service.</p>

<h3>
  
  
  E2E Tests Examples
</h3>

<p>Let’s take a look at the end to end tests below:<br />
</p>
<div class=""ltag_gist-liquid-tag"">
  
</div>
<br />
In line 15, we start the happy flow of a user creating a valid order request.

<p>We find the full URL of the service with the stack-output mechanism we did in the integration test for the table name.</p>

<p>Line 17 generates the valid input payload.</p>

<p>Line 18 sends a POST REST API request to the API Gateway.</p>

<p>Line 19 asserts the response code from the function, and lines 21 through 23 assert the response data.</p>

<p>In line 26, we test the correct handling of invalid input.</p>

<p>We send in line 28 a malformed payload (does not match the schema) and expect in</p>

<p>lines 29–31 to get an HTTP BAD REQUEST status code with an empty JSON body.</p>

<p>View the complete end to end test <a href=""https://github.com/ran-isenberg/aws-lambda-handler-cookbook/blob/main/tests/e2e/test_create_order.py"">here</a>.</p>

<h3>
  
  
  Debugging E2E Tests
</h3>

<p>Integration tests can pass, but the E2E variation of the test can fail due to misconfigured role permissions, missing imports in the Lambda function ZIP package, missing environment variables, and other “fun” use cases.</p>

<p>The only way to debug them is to open the good old AWS CloudWatch logs, view the error, deploy a fixed version, and rerun the test.</p>

<p>Want to learn the Lambda function logging best practices? Check out my post <a href=""https://www.ranthebuilder.cloud/post/aws-lambda-cookbook-elevate-your-handler-s-code-part-1-logging"">here</a>.</p>

<h3>
  
  
  Security Tests
</h3>

<p>It’s essential to test your authentication and authorization mechanism. Usually, these mechanisms are implemented with a custom Lambda authorizer, IAM authorization, Cognito authorizer, or custom code in the function handler that does both.</p>

<p>These mechanisms (all but the custom function code) are configured in the IaC part (CDK, SAM, etc.), and it is critical to ensure they are configured correctly and were not deleted by accident.</p>

<p>So, It’s important to invoke the function with invalid permissions and ensure the function/API Gateway returns the correct HTTP 40X response. It would be best if you simulated the following use cases:</p>

<ol>
<li><p>Call your function with an invalid token (expired token).</p></li>
<li><p>Call your function with a valid authentication token (log in as a test user) but with invalid permissions (the user is not allowed to execute the API but is logged in to the system).</p></li>
</ol>

<p>Please note that I did not include any authentication/authorization mechanisms in my sample’ order’ service as it would have complicated the example.</p>

<p>Read more about it <a href=""https://docs.aws.amazon.com/prescriptive-guidance/latest/modernization-net-applications-security/iam-production.html"">here</a>.</p>

<h3>
  
  
  Performance Tests
</h3>

<p>Monitoring your Serverless service performance and fine-tuning it from a cost/performance aspect regarding expected customer traffic is essential.</p>

<p>It would be best to run these tests occasionally and at least once before GA productization. These tests provide insight into service bottlenecks and hidden connections and allow you to configure better <a href=""https://docs.aws.amazon.com/lambda/latest/dg/configuration-concurrency.html"">reserved</a> or <a href=""https://docs.aws.amazon.com/lambda/latest/dg/provisioned-concurrency.html"">provisioned</a> concurrency values for your service.</p>

<p>Utilizing tools such as <a href=""https://aws.amazon.com/xray/"">AWS X-Ray</a>, <a href=""https://github.com/alexcasalboni/aws-lambda-power-tuning"">AWS Lambda Power Tuning</a>, and AWS Lambda Powertools <a href=""https://awslabs.github.io/aws-lambda-powertools-python/2.9.0/core/tracer/"">tracer</a> utility is recommended. Read more about it <a href=""https://www.ranthebuilder.cloud/post/aws-lambda-cookbook-elevate-your-handler-s-code-part-2-observability"">here</a>.</p>

<p>You can find more Serverless productization readiness tasks in my post <a href=""https://www.ranthebuilder.cloud/post/serverless-application-productiozation-check-list"">here</a>.</p>

<h2>
  
  
  The Testing Pyramid &amp; CI/CD Pipeline
</h2>

<p>My recommended Serverless CI/CD pipeline will run unit and infra tests, then deploy the application to AWS and run integration and e2e tests.</p>

<p>Failure in any of the steps acts as a gate that fails the entire pipeline and stops it from continuing to the next step.</p>

<p>For a Serverless CI/CD pipeline based on GitHub actions and CDK read my post <a href=""https://www.ranthebuilder.cloud/post/deploy-to-aws-with-github-actions-and-aws-cdk"">here</a>.</p>

<h2>
  
  
  Summary — Why Does This Work?
</h2>

<p>I’ve listed the Serverless testing challenges in part one of the series. By following the guidelines I presented there and by implementing the Serverless testing pyramid, we were able to mitigate most, if not all, of the Serverless testing challenges:</p>

<ol>
<li><p>We provide good developer experience; we can run the test from the IDE and debug locally with integration &amp; unit test.</p></li>
<li><p>We automate all our tests.</p></li>
<li><p>We gain confidence that our code will work in E2E because we use actual AWS services even in integration tests.</p></li>
<li><p>We test both our infrastructure configuration and service code in the tests.</p></li>
<li><p>We cover both infrastructure, performance, and cost aspects in our tests.</p></li>
<li><p>We run the entire even-driven chain of events from beginning to end.</p></li>
<li><p>We mock failures in both our logic and AWS API calls.</p></li>
<li><p>We cover input validation aspects.</p></li>
</ol>

<h2>
  
  
  In part three of the series, you will learn to test AWS Async Serverless services, and other non Lambda based Serverless services.
</h2>"'https://dev.to/aws-builders/guide-to-serverless-lambda-testing-part-2-testing-pyramid-5amp'https://dev.to/social_previews/article/1398137.png'"['https://res.cloudinary.com/practicaldev/image/fetch/s--qrjSWcOq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2960/0%2A4IMZTIscENeNAxZd.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--3vA9CcCA--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png', 'https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--c2kJOo9X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AEJ_dFl7UwvT1BIJu.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--4aaxQRRr--/c_imagga_scale,f_auto,fl_progressive,h_100,q_66,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/101616/c488dc69-7dca-4855-b291-3711ce5ac7da.gif', 'https://res.cloudinary.com/practicaldev/image/fetch/s--LqgADxKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_350/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jb3sc2966d2rvbcohxvq.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--YxwIAkII--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/210953/29b527cd-2c72-4a08-af7b-a8e4eb778637.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RDRaFlVa--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/738811/c9b4f977-8638-41af-a76e-75461bd1be35.jpeg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--x9bzPwVw--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/365687/c29b2e16-6c61-49c0-8b85-cee9bd20f124.jpeg', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://dev.to/social_previews/article/1398137.png', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--H1_tgykv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_775/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84ohvrdv1c6vsa0laos1.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--vWmcJ-ty--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--3PGV6gSw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2960/0%2ArU8qwVNn6qqn2Lub.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--DhDMHeut--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/808151/4bba0932-b910-4c38-b853-3b1bb64431f2.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s---pskacX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AAWRDpOSRREI16epOeQBxjg.png', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg']"
10'1'Animation -2 : Pure CSS 1 elem moon loader'"<p>Are you looking for animations to enhance your website? We've got you covered with our wide selection of creative and engaging #animations. Say goodbye to endless searching and hello to seamless integration on your website!</p>

<h4>
  
  
  We're excited to introduce our latest YouTube series, which features diverse creative and inspiring website animations.
</h4>




<p>In our short videos, you'll find a variety of #animations that can be easily implemented on your website to enhance user experience.</p>




<h3>
  
  
  Pure CSS 1 elem moon loader
</h3>




<p>

</p>




<h3>
  
  
  <a href=""https://codepen.io/thebabydino/pen/GRqKwqX"">Source code</a>
</h3>




<h2>
  
  
  For more information
</h2>

<ol>
<li><p>Check my GitHub profile<br />
<a href=""https://github.com/amitSharma7741"">https://github.com/amitSharma7741</a></p></li>
<li><p>Check out my Fiver profile if you need any freelancing work<br />
<a href=""https://www.fiverr.com/amit_sharma77"">https://www.fiverr.com/amit_sharma77</a></p></li>
<li><p>Check out my Instagram<br />
<a href=""https://www.instagram.com/fromgoodthings/"">https://www.instagram.com/fromgoodthings/</a></p></li>
<li><p>Linktree<br />
<a href=""https://linktr.ee/jonSnow77"">https://linktr.ee/jonSnow77</a></p></li>
<li><p>Check my project</p></li>
</ol>

<ul>
<li>EVSTART: Electric Vehicle is the Future
<a href=""https://evstart.netlify.app/"">https://evstart.netlify.app/</a>
</li>
<li> News Website in react
<a href=""https://newsmon.netlify.app/"">https://newsmon.netlify.app/</a>
</li>
<li> Hindi jokes API
<a href=""https://hindi-jokes-api.onrender.com/"">https://hindi-jokes-api.onrender.com/</a>
</li>
<li>Sudoku Game And API
<a href=""https://sudoku-game-and-api.netlify.app/"">https://sudoku-game-and-api.netlify.app/</a>
</li>
</ul>"'https://dev.to/jon_snow789/animation-2-pure-css-1-elem-moon-loader-4d21'https://res.cloudinary.com/practicaldev/image/fetch/s--lbH7KQfo--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0s1737tk3nij07t8tiod.png'"['https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--SyVLDp_c--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/920086/6081554f-1b5e-463d-8744-014462b12024.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--TuiG_iSN--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/843519/dbb69e18-5e38-4d12-8700-ebb2315ed087.JPG', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--SPm5hxLZ--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/522915/238cfd20-65e5-4b05-8803-2c4c18f29192.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--5n2haSZ6--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/552451/2a446e8e-4633-445d-adcc-938b20b990e6.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--lbH7KQfo--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0s1737tk3nij07t8tiod.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--HPdWbc1P--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0s1737tk3nij07t8tiod.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--H6wj-TMV--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/428263/ad2e401f-c056-471b-9e20-8a5242c6bc92.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--OyxYqBHm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_775/https://res.cloudinary.com/practicaldev/image/fetch/s--KyzgxqoT--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofoahawoba7xwkazx3jh.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--VrgpWWVI--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/920086/6081554f-1b5e-463d-8744-014462b12024.png', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg']"
11'1'AWS open source newsletter, #148'"<h2>
  
  
  March 13th, 2023 - Instalment #148
</h2>

<p><strong>Welcome</strong></p>

<p>Hello and a warm welcome to edition #148 of the AWS open source newsletter, the only newsletter on the planet that serves you up a weekly dose of the freshest, latest open source projects on AWS. This week we have projects such as ""iam-ape"" a tool to help you grapple with your IAM policies, ""amazon-emr-cli"" a nice command line tool to package and deploy your Spark jobs on Amazon EMR, ""duckdb-athena-extension"" that helps you import data from Amazon Athena into DuckDB, ""terraform-aws-email-files-dropped-in-s3"" a helpful tool to easily email you attachments automatically, ""cloud-queue-for-quantum-devices"" a tool to help Quantum researchers across the world, ""aws-private-ca-matter-infrastructure"" a sample reference architecture for setting up a secure, private certificate authority, ""aws-sam-cli-java-examples"" will help you deploy your Java apps via AWS SAM, ""mpartman"" a PostgreSQL partition manager, ""aws-do-pcluster"" simplifying how to run AWS ParallelCluster, ""staticwebsite-cli"" a very nice too to help you easily deploy static web sites, and more!</p>

<p>If that was not enough, we also feature content on some of your favourite open source technologies. This week we have content covering Kubernetes, OpenSearch, AWS SAM, MySQL, MariaDB, PostgreSQL,  Apache Kafka, Apache Iceberg, Grafana, AWS Copilot, Crossplane, Flux, RabbitMQ, Apache TinkerPop, PyTorch, Apache Hudi, Apache Iceberg, and Delta Lake.</p>

<p>Before diving into the newsletter, make sure you read the next segment if you are using Kubernetes in any way.</p>

<p><strong>ACTION: Important news for Builders who use Kubernetes</strong></p>

<p>If you are using Kubernetes, then please make sure you check out this information post, <a href=""https://aws-oss.beachgeek.co.uk/2lm"">k8s-registry-deprecation</a> about the imminent freezing of the k8s.gcr.io image registry. The Kubernetes project runs a community-owned image registry called registry.k8s.io to host its container images. On the 3rd of April 2023, the old registry k8s.gcr.io will be frozen and no further images for Kubernetes and related subprojects will be pushed to the old registry. This registry registry.k8s.io replaced the old one and has been generally available for several months.  Read more in the post, <a href=""https://aws-oss.beachgeek.co.uk/2ln"">k8s.gcr.io Image Registry Will Be Frozen From the 3rd of April 2023</a></p>

<p><strong>Do you have a .NET on AWS open source project?</strong></p>

<p>The .NET on AWS team is committed to supporting a healthy and thriving .NET OSS ecosystem.  They have put together a GitHub repo,  <a href=""https://aws-oss.beachgeek.co.uk/2lo"">https://github.com/aws/dotnet-foss</a> that shows one of the ways we are supporting open source for .NET Builders. If this is you, make sure you check this out.</p>

<p><strong>Feedback</strong></p>

<p>Please please please take 1 minute to <a href=""https://pulse.buildon.aws/survey/PJRTOUMK"">complete this short survey</a> and get some exclusive content as a thank you.</p>

<h3>
  
  
  Celebrating open source contributors
</h3>

<p>The articles and projects shared in this newsletter are only possible thanks to the many contributors in open source. I would like to shout out and thank those folks who really do power open source and enable us all to learn and build on top of what they have created.</p>

<p>So thank you to the following open source heroes: Cristian Măgherușan-Stanciu, Damon Cortesi, Mehmet Nuri Deveci, Steven Cook, Maximilian Schellhorn, Stephen Mallette,  Arabinda Pani, Abhinav Sarin, Josh Hart, Flora Wu, Daniel Li, Stephen Heverin, Kalyan Janaki, Ankit Mishra, Louis Muller,  Yota Hamaoka, Hailong Cui, Binlong Gao, Zhou Su, Xuesong Luo, Viktor Farcic and Whitney Lee.</p>

<h3>
  
  
  Latest open source projects
</h3>

<p><em>The great thing about open source projects is that you can review the source code. If you like the look of these projects, make sure you that take a look at the code, and if it is useful to you, get in touch with the maintainer to provide feedback, suggestions or even submit a contribution.</em></p>

<h4>
  
  
  Tools
</h4>

<p><strong>staticwebsite-cli</strong></p>

<p><a href=""https://aws-oss.beachgeek.co.uk/2lw"">staticwebsite-cli</a> this Rust CLI tool makes it easy to deploy a static website to AWS. It builds and hosts the website, sets up a CDN and DNS, and provisions an SSL certificate. In order to manage DNS, the tool needs to be able to configure endpoints in your DNS zone. You must have an existing Route53 zone corresponding to the --domain-zone specified. </p>

<p><strong>iam-ape</strong></p>

<p><a href=""https://aws-oss.beachgeek.co.uk/2lz"">iam-ape</a> or AWS Policy Evaluator (APE) is a new project from Orca that takes all of your AWS IAM policies attached to a User, Group, or Role object, and presents you with a single policy, summarising all of their actual permissions. To get a better idea of how this tool works, Tohar Braun has put together a blog post, <a href=""https://aws-oss.beachgeek.co.uk/2m0"">Meet IAM APE: An Open Source Tool to Simplify AWS IAM Policy Management</a> that provides more details on what you can do with it.</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--WuynPcqc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/4aT0XT4zImrnEJWI7D6jqQJWACDYNIyJKPI8RyDsLvrM2Ckac565E4Dn33v8ZTusFUgZ23c38QFYn-4NrRiakPKlia4L_7gO0vBvIeLu3JhaJxSJnmCZEUtO4Z2HUFkphxEeyuNRauaN4AlnFeQweIk""><img alt=""overview of iam-ape tool"" height=""637"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--WuynPcqc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/4aT0XT4zImrnEJWI7D6jqQJWACDYNIyJKPI8RyDsLvrM2Ckac565E4Dn33v8ZTusFUgZ23c38QFYn-4NrRiakPKlia4L_7gO0vBvIeLu3JhaJxSJnmCZEUtO4Z2HUFkphxEeyuNRauaN4AlnFeQweIk"" width=""880"" /></a></p>

<p><strong>duckdb-athena-extension</strong></p>

<p><a href=""https://aws-oss.beachgeek.co.uk/2lj"">duckdb-athena-extension</a> is a new project (very much alpha stage) from all round good egg Damon Cortesi (the first of two contributions this week) that provides an experimental extension for DuckDB, allowing you to import data by scanning an Athena table. Check the docs for the constraints and how to use this project.</p>

<p><strong>amazon-emr-cli</strong></p>

<p><a href=""https://aws-oss.beachgeek.co.uk/2ly"">amazon-emr-cli</a> this is Damon's second project, and this tool helps you package and deploy your Amazon EMR Spark jobs. This is still very fresh, and under active development. Give it a go and provide your feedback to Damon and let him know what you think.</p>

<p><strong>terraform-aws-email-files-dropped-in-s3</strong></p>

<p><a href=""https://aws-oss.beachgeek.co.uk/2li"">terraform-aws-email-files-dropped-in-s3</a> a new project from Cristian Măgherușan-Stanciu, who is on a crusade to create a new open source project every week. This weeks project sends an email when a file is dropped into an S3 bucket, including the file as an attachment.  As Cristian said in a post about the project:</p>

<blockquote>
<p>""The idea came from the AWS Reddit, where someone asked about this.</p>

<p>Then I realized I'd also love to have something like this so I started building it.</p>

<p>My use case is to save time reading the daily CSV reports from the AWS Marketplace, ""conveniently"" - for sure only for the AWS Marketplace team 😀 - dropped in an S3 bucket, one of the many usability papercuts of the AWS Marketplace seller user experience.</p>
</blockquote>

<p><strong>cloud-queue-for-quantum-devices</strong></p>

<p><a href=""https://aws-oss.beachgeek.co.uk/2le"">cloud-queue-for-quantum-devices</a> is an open source, cloud-based application which allows quantum researchers to easily and securely submit and manage workloads destined for quantum devices, from anywhere in the world. This too will help you  collaborate with researchers around the world. You can read more about this by checking out the supporting blog post, <a href=""https://aws-oss.beachgeek.co.uk/2ld"">New open source tool expands access to lab-based quantum prototypes: Cloud Queue for Quantum Devices</a>.</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--406vVbSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/5a5b0f9b7d3f8fc84c3cef8fd8efaaa6c70d75ab/2023/03/06/architecture-1024x613.png""><img alt=""architecture for quantum device queue"" height=""527"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--406vVbSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/5a5b0f9b7d3f8fc84c3cef8fd8efaaa6c70d75ab/2023/03/06/architecture-1024x613.png"" width=""880"" /></a></p>

<p><strong>mpartman</strong></p>

<p><a href=""https://aws-oss.beachgeek.co.uk/2lr"">mpartman</a> is a PostgreSQL partition management package. You can use Mpartman to manage partitions and subpartitions in PostgreSQL versions 11 – 15. With Mpartman, you can create RANGE and LIST partitions, merge, split, detach, and drop partitions. In addition to this, Mpartman supports partition retention fucntion and includes the set of partition information functions and views. The documentation covers typical use cases, installation, usage, and how it works under the cover.</p>

<p><strong>aws-do-pcluster</strong></p>

<p><a href=""https://aws-oss.beachgeek.co.uk/2ls"">aws-do-pcluster</a> the <a href=""https://aws-oss.beachgeek.co.uk/2lt"">Do Framework</a> is a DevOps framework focused on simplicity, intuitiveness, and productivity. It helps you get more done.  This project aims to make it easy to use AWS Parallel Cluster, by leveraging these principals. This project builds a container which contains all prerequisites, tools that are useful when working with Parallel Cluster, and the latest version of the pcluster cli. It comes with useful scripts to configure, create, and delete parallel cluster infrastructure.</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--9lYwaFAo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/aws-do-pcluster/blob/main/aws-pcluster-ui-1024.png%3Fraw%3Dtrue""><img alt=""screenshot of parallel cluster ui"" height=""622"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--9lYwaFAo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/aws-do-pcluster/blob/main/aws-pcluster-ui-1024.png%3Fraw%3Dtrue"" width=""880"" /></a></p>

<h3>
  
  
  Demos, Samples, Solutions and Workshops
</h3>

<p><strong>template-for-closed-network-system-workloads-on-aws</strong></p>

<p><a href=""https://aws-oss.beachgeek.co.uk/2lu"">template-for-closed-network-system-workloads-on-aws</a> if you are operating in highly restrictive environments, then this repo will be of interest. It provides an example architecture that you can provision via CDK, that deploys a closed network infrastructure. The README provide an example use case:</p>

<blockquote>
<p>In local government systems that require a high level security and network restrictions, we need to configure our architecture with characteristics from on-premise, like ""Closed area networks"" and ""Allow NW access routes from AWS to on-premise network"". </p>
</blockquote>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--952a_iUE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/template-for-closed-network-system-workloads-on-aws/blob/main/docs/images/template_architecture_en.png%3Fraw%3Dtrue""><img alt=""architecture of closed networks for workloads "" height=""646"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--952a_iUE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/template-for-closed-network-system-workloads-on-aws/blob/main/docs/images/template_architecture_en.png%3Fraw%3Dtrue"" width=""880"" /></a></p>

<p><strong>amazon-msk-topic-resource</strong></p>

<p><a href=""https://aws-oss.beachgeek.co.uk/2lv"">amazon-msk-topic-resource</a> is a custom CloudFormation resource that can be used to create and manage Kafka topics in MSK clusters. With this repo, you can deploy and manage Kafka topics in the same way you manage other application infrastructure.</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--B2me1UE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/amazon-msk-topic-resource/blob/main/assets/flow.jpg%3Fraw%3Dtrue""><img alt=""how it works"" height=""411"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--B2me1UE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/amazon-msk-topic-resource/blob/main/assets/flow.jpg%3Fraw%3Dtrue"" width=""880"" /></a></p>

<p><strong>aws-private-ca-matter-infrastructure</strong></p>

<p><a href=""https://aws-oss.beachgeek.co.uk/2lp"">aws-private-ca-matter-infrastructure</a> this repo demonstrates the use of AWS CDK to set up Public Key Infrastructure (PKI) infrastructure using AWS Private CA to help you meet the requirements of the Matter PKI Certificate Policy (CP) approved on October 26, 2022. Matter is a new standard for smart home security and device interoperability. Matter uses X.509 digital certificates to identify devices. Matter certificates can be issued only by CAs that comply with the Matter PKI Certificate Policy (CP).</p>

<p><strong>rosa-install-codepipeline</strong></p>

<p><a href=""https://aws-oss.beachgeek.co.uk/2ll"">rosa-install-codepipeline</a> This repository provides AWS CloudFormation templates, a Dockerfile, Bash scripts to deploy a PrivateLink Red Hat OpenShift on AWS (ROSA) cluster using a AWS CodePipeline. Includes security best practices such as use of Secrets Manager, KMS, immutable ECR repository, closed security groups with temporary internet access during installation and routing egress traffic through a separate Egress VPC connected through a Transit Gateway, storage of all installation parameters and logs in CodeBuild etc. This setup creates 3 private VPCs and subnets for deploying a PrivateLink ROSA cluster following AWS best practices. This is an end-to-end setup resulting in a functional ROSA cluster where a Kubernetes application can be readily deployed</p>

<p><strong>aws-codecommit-s3-backups-with-terraform</strong></p>

<p><a href=""https://aws-oss.beachgeek.co.uk/2lk"">aws-codecommit-s3-backups-with-terraform</a> is a Terraform pattern to help you backup your AWS CodeCommit repositories to Amazon S3.</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--rVdKVUXu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/aws-codecommit-s3-backups-with-terraform/blob/main/img/architecture.png%3Fraw%3Dtrue""><img alt=""architecture of codecommit backup"" height=""419"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--rVdKVUXu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/aws-codecommit-s3-backups-with-terraform/blob/main/img/architecture.png%3Fraw%3Dtrue"" width=""880"" /></a></p>

<p><strong>aws-sam-cli-java-examples</strong></p>

<p><a href=""https://aws-oss.beachgeek.co.uk/2lq"">aws-sam-cli-java-examples</a>  provide examples of the different methods that are available to build java applications using AWS SAM. You can follow along in the blog post, <a href=""https://aws-oss.beachgeek.co.uk/2l3"">Building serverless Java applications with the AWS SAM CLI</a> where Mehmet Nuri Deveci, Steven Cook, and Maximilian Schellhorn provide an overview of the common ways to build Java applications for Lambda with the AWS SAM CLI .</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--YwC3G_Us--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2023/02/28/sam6.png""><img alt=""overview of using sam to deploy java applications"" height=""196"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--YwC3G_Us--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2023/02/28/sam6.png"" width=""528"" /></a></p>

<h3>
  
  
  AWS and Community blog posts
</h3>

<p><strong>Open Source Data Lakes</strong></p>

<p>In the post, <a href=""https://aws-oss.beachgeek.co.uk/2lx"">An Introduction to Modern Data Lake Storage Layers</a> colleague Damon Cortesi dives hands on into Apache Hudi, Apache Iceberg, and Delta Lake taking a look at each of these engines and providing insights into how they function under the hood and his thoughts of the differences in each. If you find yourself wanting to know more about these different projects that on the surface do similar things, then I recommend you dive right in. [hands on]</p>

<p><strong>Apache TinkerPop</strong></p>

<p>Apache TinkerPop™ is an open source graph computing framework for both graph databases (OLTP) and graph analytic systems (OLAP). Stephen Mallette takes a look at some of the new features you can find in his post, <a href=""https://aws-oss.beachgeek.co.uk/2l6"">Exploring new features of Apache TinkerPop 3.6.x in Amazon Neptune</a>. There are plenty of new features to get excited about, so whether you are just starting out in graph databases and analytics, or a seasoned pro, dive in and catch up on the new capabilities. [hands on</p>

<p><strong>PostgreSQL</strong></p>

<p>If you are a regular reader of this newsletter, you may know that I love posts that cover collecting and analysing performance metrics. I really enjoyed reading this post, <a href=""https://aws-oss.beachgeek.co.uk/2l7"">Monitor Amazon RDS for PostgreSQL and Amazon Aurora PostgreSQL performance using PGSnapper</a> where Arabinda Pani and Abhinav Sarin look at how you can set up and use PGSnapper to periodically collect PostgreSQL database metrics and run customised queries to identify performance bottlenecks. [hands on]</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--DnSWkfJX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2023/03/03/DBBLOG-2076-image001-cropped.png""><img alt=""architecture of pgsnapper metrics collection"" height=""661"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--DnSWkfJX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2023/03/03/DBBLOG-2076-image001-cropped.png"" width=""713"" /></a></p>

<p>We had more great posts on PostgreSQL last week, and Josh Hart and Maximilian Schellhorn put together this post, <a href=""https://aws-oss.beachgeek.co.uk/2lf"">Choose the right PostgreSQL data access pattern for your SaaS application</a> where they explore the different access patterns for PostgreSQL in a multi-tenant environment. It explores how factors such as AWS IAM Auth, compute isolation model and the database isolation model influence your implementation strategy. Well worth a read. [hands on]</p>

<p><strong>Apache Iceberg</strong></p>

<p>Apache Iceberg is an open table format for very large analytic datasets, which captures metadata information on the state of datasets as they evolve and change over time. In the post, <a href=""https://aws-oss.beachgeek.co.uk/2l8"">Use Apache Iceberg in a data lake to support incremental data processing</a> Flora Wu and Daniel Li look at how the Apache Iceberg framework helps resolve some of the challenges of modern data lakes, and walk you though a solution to process incremental data as well as how to tweak performance. [hands on]</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--7D3L-HVk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2023/02/22/Iceberg_architecture.png""><img alt=""apache iceberg on aws"" height=""670"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--7D3L-HVk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2023/02/22/Iceberg_architecture.png"" width=""643"" /></a></p>

<p><strong>Grafana</strong></p>

<p>Grafana is an open source analytics and interactive visualisation web application. You can use it to visualise any kind of data, and in this post, <a href=""https://aws-oss.beachgeek.co.uk/2l9"">Visualize database privileges on Amazon Redshift using Grafana</a>  Yota Hamaoka shows how you can use some predefined Grafana dashboards to visualisation database privileges of Amazon Redshift.  Database administrators can use these dashboards to quickly navigate through identities, objects, and privileges without writing SQL. [hands on]</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--_dk6ejFC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2023/02/17/BDB-2424-8.png""><img alt=""example dashboard for redshift and grafana"" height=""482"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--_dk6ejFC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2023/02/17/BDB-2424-8.png"" width=""880"" /></a></p>

<p><strong>Other posts and quick reads</strong></p>

<ul>
<li><p><a href=""https://aws-oss.beachgeek.co.uk/2lh"">Implementing a pub/sub architecture with AWS Copilot</a> walks you through how you can use AWS Copilot CLI to easily implement a publisher service and subscriber worker services on Amazon ECS and AWS Fargate [hands on]</p></li>
<li><p><a href=""https://aws-oss.beachgeek.co.uk/2la"">Deploying self-managed MariaDB high availability using Amazon EBS Multi-Attach</a> is a hands on guide on how to set up a self-managed MariaDB with improved availability using the Amazon EBS Multi-Attach feature [hands on]</p></li>
</ul>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--OuI92G3h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/e1822db470e60d090affd0956d743cb0e7cdf113/2023/02/28/Screenshot-2023-02-28-at-11.08.17-AM.png""><img alt=""architecture of self managed MariaDB high availability using EBS"" height=""422"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--OuI92G3h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/e1822db470e60d090affd0956d743cb0e7cdf113/2023/02/28/Screenshot-2023-02-28-at-11.08.17-AM.png"" width=""505"" /></a></p>

<ul>
<li> <a href=""https://aws-oss.beachgeek.co.uk/2lb"">Deploy an Amazon RDS for PostgreSQL and MySQL Multi-AZ DB cluster using Terraform modules</a> shows you how you can implement deployment strategies using Terraform modules to drive consistency with repeatable deployments and ensure best practices are implemented at every stage of continuous delivery and deployment pipelines [hands on]</li>
</ul>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--nJlCdCuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2023/02/11/Picture2.jpg""><img alt=""using terraform to automate RDS postgres and mysql deployments"" height=""412"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--nJlCdCuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2023/02/11/Picture2.jpg"" width=""880"" /></a></p>

<ul>
<li>
<a href=""https://aws-oss.beachgeek.co.uk/2lc"">Hosting YOLOv8 PyTorch models on Amazon SageMaker Endpoints</a>  explains how to host a pre-trained YOLOv8 (a popular object detection model) PyTorchModel on a SageMaker endpoint and test the inference results by invoking the endpoint [hands on]</li>
</ul>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--kRVAuc_n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2023/02/28/ML13353_AWSArchitecture-1024x605.png""><img alt=""architecture of hosting a pytorch model on sagemaker"" height=""520"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--kRVAuc_n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2023/02/28/ML13353_AWSArchitecture-1024x605.png"" width=""880"" /></a></p>

<h3>
  
  
  Quick updates
</h3>

<p><strong>OpenSearch</strong></p>

<p>Hailong Cui, Binlong Gao, Zhou Su, Xuesong Luo provided a quick update on OpenSearch improvements on indexing in their post, <a href=""https://aws-oss.beachgeek.co.uk/2l2"">Index Management UI enhancements</a>. In the post they look at some of the new features added to the UI that help you better manage your indices. </p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--SB8Zkqy2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://opensearch.org/assets/media/blog-images/2023-02-28-admin-panels-for-index-operations/index-mapping-editor.png""><img alt=""example opensearch ui index management screenshot"" height=""332"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--SB8Zkqy2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://opensearch.org/assets/media/blog-images/2023-02-28-admin-panels-for-index-operations/index-mapping-editor.png"" width=""880"" /></a></p>

<p><strong>RabbitMQ</strong></p>

<p>Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easier to set up and operate message brokers on AWS.  Amazon MQ now provides support for RabbitMQ version 3.10.17, which includes several important fixes and performance optimisations to the previously supported version, RabbitMQ 3.10.10. </p>

<p><strong>MariaDB</strong></p>

<p>Amazon Relational Database Service (Amazon RDS) for MariaDB now supports Amazon RDS Optimized Writes enabling up to 2x higher write throughput at no additional cost. This is especially useful for RDS for MariaDB customers with write-intensive database workloads, commonly found in applications such as digital payments, financial trading, and online gaming.</p>

<p>In RDS for MariaDB, you are protected from data loss due to unexpected events, such as a power failure, using a built-in feature called the “doublewrite buffer”. But this method of writing takes up to twice as long, consumes twice as much I/O bandwidth, and reduces the throughput and performance of your database. Starting today, Amazon RDS Optimized Writes provides you with up to 2x improvement in write transaction throughput on RDS for MariaDB by writing only once while protecting you from data loss and at no additional cost. Optimized Writes uses Torn Write Prevention, a feature of the AWS Nitro System, to reliably and durably write to table storage in one step.</p>

<p>Amazon RDS Optimized Writes is available as a default option from RDS for MariaDB version 10.6.10 and higher on db.r6i, db.r6g, db.r5b, db.x2iedn and db.x2idn database instances. </p>

<p><strong>MySQL</strong></p>

<p>Amazon Aurora MySQL-Compatible Edition now supports authentication of database users using Microsoft Active Directory. You can use Active Directory to authenticate with Amazon Aurora using AWS Directory Service for Microsoft Active Directory or with your on-premise Active Directory by establishing a trusted domain relationship.</p>

<p>With support for Active Directory authentication in Amazon Aurora MySQL-Compatible Edition, you have access to single sign-on and centralised authentication of database users. Single sign-on reduces the operational overhead of database user management across multiple authentication approaches and credentials. Moreover, a centralised authentication approach enables customers to leverage native Active Directory credential management capabilities to manage password complexities and rotation. This allows you to effectively keep pace with the myriad of compliance and security requirements across the globe and improve the security posture of your critical business assets.</p>

<p>Active Directory authentication is supported for Aurora MySQL version 3.03 (compatible with MySQL 8.0.26) and higher.</p>

<p><strong>PostgreSQL</strong></p>

<p>Amazon Relational Database Service (Amazon RDS) for PostgreSQL now supports the latest minor versions PostgreSQL 14.7, 13.10, 12.14, and 11.19. </p>

<p><strong>Apache Kafka</strong></p>

<p>Amazon Managed Streaming for Apache Kafka (Amazon MSK) now supports Apache Kafka version 3.3.2 for new and existing clusters. Apache Kafka 3.3.2 includes several bug fixes and new features that improve performance. Some of the key features include enhancements to fetch from the closest replica and metrics. Amazon MSK will continue to use and manage Zookeeper for quorum management in this release. </p>

<p>For a complete list of improvements and bug fixes, see the Apache Kafka <a href=""https://aws-oss.beachgeek.co.uk/2l4"">release notes for 3.3.2</a>.</p>

<h3>
  
  
  Videos of the week
</h3>

<p><strong>Building Internal Developer Platforms (IDPs) with Crossplane and Flux</strong></p>

<p>Join the Containers from the Couch crew and Viktor Farcic and Whitney Lee as they  look at popular GitOps concepts and tooling like Crossplane and Flux, and demo Crossplane.</p>

<p>

</p>

<p><strong>Apache Kafka</strong></p>

<p>Join Stephen Heverin, Kalyan Janaki, Ankit Mishra, and Louis Muller as they uncover Amazon MSK Operational Best Practices. Expect plenty of good info and live demos.</p>

<p>

</p>

<p><strong>Build on Open Source</strong></p>

<p>For those unfamiliar with this show, Build on Open Source is where we go over this newsletter and then invite special guests to dive deep into their open source project. Expect plenty of code, demos and hopefully laughs. We have put together a playlist so that you can easily access all (eight) of the episodes of the Build on Open Source show. <a href=""https://aws-oss.beachgeek.co.uk/24u"">Build on Open Source playlist</a></p>

<h1>
  
  
  Events for your diary
</h1>

<p>If you are planning any events in 2023, either virtual, in person, or hybrid, get in touch as I would love to share details of your event with readers. </p>

<p><strong>Build on Open Source</strong><br />
<strong>March 17th, twitch.tv/aws</strong></p>

<p>The third episode of Build on Open Source features special guest AWS Community Builder John Preston who will be showing us ecs-compose-x, an open source tool to help simplify how you configure and deploy applications on AWS. This project got a name check from the Containers from the Couch crew last week, giving it the big thumbs up so make sure you tune in and find out more about this project. Really looking forward to this one as John is a super star open source developer.</p>

<p>See you there on <a href=""https://twitch.tv/aws"">twitch.tv/aws</a>, Friday 17th March at 9am GMT, 10am CET.</p>

<p><strong>Power Up your Kubernetes</strong><br />
<strong>March 15th, AWS Office Zurich, Switzerland</strong></p>

<p>If you want to improve architecture, scaling and monitoring of your applications that run on AWS Elastic Kubernetes Service, this event is for you. During this event you will learn to scale Kubernetes applications with Karpenter, monitor your workloads, and build SaaS architectures for Kubernetes. </p>

<p>Find out more and save your place by heading over to the registration page, <a href=""https://aws-oss.beachgeek.co.uk/2jd"">Power up your Kubernetes on AWS</a></p>

<p><strong>Everything Open</strong><br />
<strong>March14-15th Melbourne, Australia</strong></p>

<p>A new event for the fine folks in Australia. Everything Open is running for the first time, and the organisers (Linux Australia) have decided to run this event to provide a space for a cross-section of the open technologies communities to come together in person. Check out the <a href=""https://aws-oss.beachgeek.co.uk/2ds"">event details here</a>. The CFP us currently open, so why not take a look and submit something if you can.</p>

<p><strong>FOSSASIA</strong><br />
<strong>April 13th-15th, Singapore</strong></p>

<p>FOSSASIA Summit 2023 returns as an in-person and online event, taking place from Thursday 13th April to Saturday 15th April at the Lifelong Learning Institute in Singapore. </p>

<p>If you are interested in attending in person, or virtually, find out more about the event at the <a href=""https://aws-oss.beachgeek.co.uk/2iq"">FOSSASIA Summit 2023 page</a>.</p>

<p><strong>AWS Community Nordics</strong><br />
<strong>April, 20th Helsinki</strong></p>

<p>The AWS Community Day Nordics is a free full day event for AWS users to come together to network, learn from each other and get inspired. The event is organised by the community - for the community. The cfp is currently open, so if you are in the area and want to talk then here is your chance. Check out the full event details and save your space here, <a href=""https://aws-oss.beachgeek.co.uk/2l5"">AWS Community Nordics registration page</a></p>

<p><strong>Cortex</strong><br />
<strong>Every other Thursday, next one 16th February</strong></p>

<p>The Cortex community call happens every two weeks on Thursday, alternating at 1200 UTC and 1700 UTC. You can check out the GitHub project for more details, go to the <a href=""https://aws-oss.beachgeek.co.uk/2h5"">Community Meetings</a> section. The community calls keep a rolling doc of previous meetings, so you can catch up on the previous discussions. Check the <a href=""https://aws-oss.beachgeek.co.uk/2h6"">Cortex Community Meetings Notes</a> for more info.</p>

<p><strong>OpenSearch</strong><br />
<strong>Every other Tuesday, 3pm GMT</strong></p>

<p>This regular meet-up is for anyone interested in OpenSearch &amp; Open Distro. All skill levels are welcome and they cover and welcome talks on topics including: search, logging, log analytics, and data visualisation.</p>

<p>Sign up to the next session, <a href=""https://aws-oss.beachgeek.co.uk/1az"">OpenSearch Community Meeting</a></p>

<h3>
  
  
  Stay in touch with open source at AWS
</h3>

<p>Remember to check out the <a href=""https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;opensource-all.sort-order=asc"">Open Source homepage</a> to keep up to date with all our activity in open source by following us on <a href=""https://twitter.com/AWSOpen"">@AWSOpen</a></p>




<p>title: 'AWS open source newsletter #148'<br />
date: '2023-03-013'<br />
tags : [ oss-newsletter, aws open source, Kubernetes, OpenSearch, AWS SAM, MySQL, MariaDB, PostgreSQL,  Apache Kafka, Apache Iceberg, Grafana, AWS Copilot, Crossplane, Flux,RabbitMQ, Apache TinkerPop, PyTorch, Apache Hudi, Apache Iceberg, Delta Lake ]</p>"'https://dev.to/aws/aws-open-source-newsletter-148-5h2b'https://res.cloudinary.com/practicaldev/image/fetch/s--RetTnwdq--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8fd8avbhw9wu08hdn8vp.jpg'"['https://res.cloudinary.com/practicaldev/image/fetch/s--_dk6ejFC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2023/02/17/BDB-2424-8.png', 'https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RetTnwdq--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8fd8avbhw9wu08hdn8vp.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--406vVbSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/5a5b0f9b7d3f8fc84c3cef8fd8efaaa6c70d75ab/2023/03/06/architecture-1024x613.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--3La_YGzH--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/827667/5bbe7d25-4b6a-4f70-8f9c-07fa9d6aacc3.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--2EubRye9--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/868250/969aae9e-130a-4966-a0d8-84d4278b28fa.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--WuynPcqc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/4aT0XT4zImrnEJWI7D6jqQJWACDYNIyJKPI8RyDsLvrM2Ckac565E4Dn33v8ZTusFUgZ23c38QFYn-4NrRiakPKlia4L_7gO0vBvIeLu3JhaJxSJnmCZEUtO4Z2HUFkphxEeyuNRauaN4AlnFeQweIk', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--nJlCdCuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2023/02/11/Picture2.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--PhooKB3X--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1726/f2ea4274-e9a6-499e-8f82-d94f5d83b85d.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--OuI92G3h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/e1822db470e60d090affd0956d743cb0e7cdf113/2023/02/28/Screenshot-2023-02-28-at-11.08.17-AM.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--7zmiQtS3--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1037283/15427c0a-6a72-4997-8c7f-0660ff351be1.jpeg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--B2me1UE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/amazon-msk-topic-resource/blob/main/assets/flow.jpg%3Fraw%3Dtrue', 'https://res.cloudinary.com/practicaldev/image/fetch/s--7D3L-HVk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2023/02/22/Iceberg_architecture.png', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--hM6H-Uxw--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1726/f2ea4274-e9a6-499e-8f82-d94f5d83b85d.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--DnSWkfJX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2023/03/03/DBBLOG-2076-image001-cropped.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--YwC3G_Us--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2023/02/28/sam6.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--kRVAuc_n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2023/02/28/ML13353_AWSArchitecture-1024x605.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--9lYwaFAo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/aws-do-pcluster/blob/main/aws-pcluster-ui-1024.png%3Fraw%3Dtrue', 'https://res.cloudinary.com/practicaldev/image/fetch/s--rVdKVUXu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/aws-codecommit-s3-backups-with-terraform/blob/main/img/architecture.png%3Fraw%3Dtrue', 'https://res.cloudinary.com/practicaldev/image/fetch/s--ohW2OoLp--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8fd8avbhw9wu08hdn8vp.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--G6Yi5gII--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/222568/a3308896-d537-4f9d-b802-862f43f44f97.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--SB8Zkqy2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://opensearch.org/assets/media/blog-images/2023-02-28-admin-panels-for-index-operations/index-mapping-editor.png', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--Kw6zyyrR--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/317528/498401bc-9cb6-4bf5-8902-08eeb3285c1d.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--952a_iUE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/template-for-closed-network-system-workloads-on-aws/blob/main/docs/images/template_architecture_en.png%3Fraw%3Dtrue']"
