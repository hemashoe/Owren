post_id'post_id'title'description'source_link'body'image'images
0'720264'«База знаний — не самурай». 7+ ключевых советов про БЗ от техписов и не только'В феврале мы в «Лаборатории Касперского» провели большой митап «База знаний здорового техписа». Пятеро наших коллег из разных компаний, которые занимаются менеджментом знаний и руководят работой с...'https://habr.com/ru/post/720264/'"Прежде чем создавать Базу знаний, нужно определить, действительно ли она нужна и какие проблемы будет решать. Может быть, в вашем конкретном случае получится обойтись огрызком бумажки условным гуглодоком и сэкономить компании много денег и человекочасов. Тем более спонтанные Базы знаний – как падающие звезды: они, может, и способны жить ярко, но только жизнь их будет очень недолгой. Так что оставьте всякие «нет цели, есть только путь» самураям и распильщикам бюджетов. Поскольку все БЗ здоровых техписов живут в вебе, то и развивать БЗ надо именно как веб-ресурс. Вкладываться поиск и SEO, использовать веб-аналитику, собирать обратную связь от пользователей через форму и т.д. Причем сама площадка не так важна – это может быть сайт, Confluence, SharePoint, что угодно. Контент для Базы знаний буквально валяется у вас под ногами. Будьте как хомяк, тащите в норку все и везде: от ответов в чатах, черновиков, личных записей, meeting minutes до копипасты условной статьи на хабре (например, нашей))). Внутренняя База знаний может быть частью менеджмента знаний в компании, но База знаний не равно менеджмент знаний. Короче говоря, наличие БЗ не закрывает весь пласт knowledge management. Но все же БЗ может использоваться как его часть при онбординге, для обучения сотрудников, для обмена опытом и вот этого вот всего. Чтобы База знаний взлетела и не упала, у нее должна быть поддержка от руководства компании. Ну а чтобы БЗ работала, а не просто «была чтобы была», ее надо продвигать.



Поддержкой заручиться просто. Первое – фиксируете всю дичь, которая происходит в компании без Базы знаний. Второе – общаетесь с теми, кто от этой дичи страдает, чтобы пострашнее раскрасить все эти ужасы. Третье – на каждую проблему придумываете, как БЗ ее поможет решить. Четвертое – идете продавать идею начальству. PROFIT!



А чтобы продвигать БЗ, пишите дайджесты, проводите интервью, привлекайте людей из самых разных отделов и показывайте выгоду, которую они получат. Потом эти люди расскажут о вас другим своим коллегам. Активным пользователям вручайте ящик пива подарки, мерч, в общем, всяческие плюшки. Как это «у нас никто не любит пиво?!» FAQ – это классно, но не всегда нужно. Если у FAQ будет четкая и определенная задача, и он будет составлен на основе анализа проблем пользователей, которые у них чаще всего возникают, а вдобавок еще и SEO-оптимизирован, то это крутейший инструмент deflection. А вот если это просто модная страничка почти как в предыдущем пункте, «ну как же – у всех есть, значит и мне надо», то готовьтесь клонировать себя: вероятнее всего, пользы будет мало, а вот ресурсы на ее обновление и поддержку придется откуда-то брать. Ключевые показатели эффективности БЗ – посещения, CSAT и deflection rate. В некоторых случаях также полезен bounce rate, который поможет проанализировать поведение и активность посетителей. Впрочем, фейковых KPI у Базы знаний не будет – каждая метрика будет показывать что-то полезное. Но все же некоторые метрики могут различаться в зависимости от задач, которые стоят перед БЗ. А вот те, которые мы привели выше – железобетонные.

В феврале мы в «Лаборатории Касперского» провели большой митап «База знаний здорового техписа». Пятеро наших коллег из разных компаний, которые занимаются менеджментом знаний и руководят работой с технической документацией и веб-контентом, рассказали о том, как у них это устроено.Здесь в посте — краткая выжимка эфира в семи ключевых тезисах. Если же вам интересно послушать более развернутую дискуссию и аргументы участников, посмотрите запись митапа здесь или в виджете ниже. А еще можно свободно пообщаться с участниками эфира в этом чате Не пропустите наши следующие события . Регистрируйтесь, и мы напомним вам о митапе и пришлем ссылку для подключения перед началом."'https://habrastorage.org/webt/ma/3u/al/ma3ualbta1d_2gjnsxgln6vdono.png'"['https://habrastorage.org/r/w32/getpro/habr/avatars/fe4/0e2/2a9/fe40e22a957a2624684a47d3da2d924f.png', 'https://habrastorage.org/webt/ma/3u/al/ma3ualbta1d_2gjnsxgln6vdono.png', 'https://habrastorage.org/r/w1560/webt/ma/3u/al/ma3ualbta1d_2gjnsxgln6vdono.png', 'https://habrastorage.org/getpro/habr/company/8a6/991/272/8a69912727889ab6bdd5244d5f2e4a2c.png', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/getpro/habr/avatars/fe4/0e2/2a9/fe40e22a957a2624684a47d3da2d924f.png']"
1'720194'Как спрогнозировать спрос на самокаты и не захламить город, версия Whoosh'Типичное обсуждение легитимности внедрения ML - алгоритмов. Нельзя просто так взять и расставить электросамокаты в городе. Надо, чтобы они находились в нужное время, в нужном месте и в нужном...'https://habr.com/ru/post/720194/'"Типичное обсуждение легитимности внедрения ML - алгоритмов.

Нельзя просто так взять и расставить электросамокаты в городе. Надо, чтобы они находились в нужное время, в нужном месте и в нужном количестве, чтобы выполнять свою транспортную задачу. Спрос на поездки в разных локациях неодинаковый, поэтому если поставить самокаты ровным слоем на улицах города – будет неэффективно. Нельзя также расставить их только в местах сильного пользовательского притяжения, забыв при этом про периферию.

Нужен хоббит алгоритм, который бы рассчитал, какое количество поездок можно ожидать на определенной парковке в определенный временной промежуток.

Меня зовут Никита Зеленский, я руковожу отделом по работе с данными в Whoosh, разработчике технологических решений и операторе микромобильности. Эту статью мы написали вместе с Иваном Маричевым, дата-сайнтистом Whoosh. Он же и автор алгоритма, о котором пойдет речь.

Здесь мы расскажем, как мы реализовывали модель прогнозирования спроса на самокаты, с чем сталкивались при прототипировании, какие модели были протестированы, чем наш случай отличается от прогнозирования спроса в каршеринге, спроса для пополнения запасов в дарксторе и т.п. (Самокат, самокаты Whoosh передают привет!)

История получилась про наши подходы и грабли, которые мы в итоге собрали. Чуть-чуть про технику, чуть-чуть про бизнес – нескучно и с ветерком (как на самокате).

Whoosh!

Проблематика

Зачем менять устоявшуюся схему, разрабатывать ML-модель, если можно все сделать в Экселе ?

Основная причина - текущая ребалансировка (расстановка на парковках и перемещение по локациям) самокатов покрывала не весь пользовательский спрос. Иногда пользователям, чтобы взять в аренду самокат, приходилось идти на другую парковку, что порой неудобно и отнимает время. В долгосрочной перспективе это способствует оттоку клиентов, а наша задача – сделать микромобильный транспорт доступным и регулярным.

Вопрос – почему бы просто не выставлять сильно завышенное количество техники? Представим следующую картину: в среднестатистическом городе Х имеется 350-400 парковок (если не брать в расчет города-миллионники). По каждой парковке мы собираем статистику: какое количество поездок пользователи на ней начали и закончили. Зная эти цифры, можно было бы оставлять на них количество самокатов, равное скользящему среднему от количества поездок за 7 дней + 20%? Но не все так просто:

Флот << прогноз. Маловероятно, что прогнозируемое таким образом количество техники будет возможно предоставить в рамках флота, доступного в городе. Даже если вы лидер отрасли и у вас большое количество самокатов в локации – это сильно неразумный способ, который замедлит интеграцию в новые регионы и районы. Логистика. После появления такого количества флота на парковке, неизбежно вырастут расходы на ребалансировку, которые напрямую зависят от количества регулярно перевозимых самокатов. Актуальность. Метод скользящего среднего не сможет удовлетворять пиковый спрос внутри дня. Спрос на поездки зависит от времени суток, поэтому нам важно, чтобы наши самокаты были там, где они нужны в конкретный час: когда вы утром идете на работу, спрос выше у метро и остановок общественного транспорта, а вечером - наоборот, самокаты требуются преимущественно от работы до других локаций города. Урбанистика. Отдельное ""спасибо"" можно ожидать от горожан и властей, которые явно не одобрят загромождение городских пешеходных зон большим количеством неиспользуемой техники. Неэкономично. Выставление техники на парковки с запасом неизбежно приведет к простою самокатов, когда в теории они могут быть востребованы для поездок по другим маршрутам.

И это только самые очевидные причины, почему такой подход в долгосрочной перспективе не годится. Мы не отменяем важность решений на основании дедукции и опыта людей, которые работают в операционных центрах в городах нашего присутствия – у них есть понимание специфики конкретных локаций. Но с таким потоком данных и постоянно изменяющихся бизнес-условий лучше справится машинный “мозг”.

EDA.

Ключевой этап при создание любой модели - сбор данных, а именно их чистота и репрезентативность, т.е. насколько наши данные корректны и содержат ли всю необходимую информацию (это тот случай, когда принцип GIGO актуален как никогда). Также необходимо быть готовым, что создание ML-моделей – процесс крайне итеративный, и часто при оценке метрик моделей может потребоваться произвести новую выборку признаков или обогатить исходный датасет новыми данными.

Что мы имеем на входе?

Нерегулярность спроса: для кикшеринга характерен нерегулярный спрос. Влияет множество факторов: погода, праздники, пробки и т.п. Наши исторические данные по поездкам агрегированы по 30 минут – и при такой форме агрегации в данных не будет ни тенденции, ни дневной сезонности.

Суточная структура временного ряда парковки при агрегации по 3 часа

Суточная структура временного ряда парковки при агрегации по 30 минут

Различная структура парковок: парковки могут быть “топовыми”, т.е. пользоваться высоким спросом, в том числе иметь ярко выраженную дневную сезонность, и “слабо востребованными”, где спрос на поездки по своей структуре больше спорадический. Это будет влиять непосредственно на стационарность временного ряда спроса на парковках с различной структурой.

Пример “топовой” парковки

Пример “слабо востребованной” парковки

Пропуски в данных. Наш бизнес имеет определенную сезонную динамику. В большинстве городов мы работаем 9 месяцев: с марта по ноябрь. А анализируя временные ряды, такие пробелы между датами (с декабря по февраль) просто так не выкинешь - их необходимо правильно обрабатывать: подсказывать модели периоды завершения сезона и его начала, что было между этими датами, а также периоды, когда локация встает на кратковременную паузу. В противном случае, мы будем иметь “кривую” линию тренда с завышенным или заниженным показателями.

Также в ходе EDA было определено, что прогнозирование на все 100% парковок для города не имеет бизнес-смысла, так как 40% “топовых” парковок генерировали 80% всех поездок города.

В качестве тестового города выступает город Сочи в связи с тем, что сезон аренды самокатов в городах южного округа продолжается круглогодично. Тем самым мы, конечно, немного проигнорируем п.3 из списка нюансов выше, но у нас другие цели для MVP:

Проверить работоспособность алгоритма (а это проще сделать без разрыва во временных рядах)

Протестировать его в реальных условиях в период межсезонья, чтобы принять решение о возможном масштабировании на все города.

Выбор модели.

С вводными разобрались, теперь приступим к выбору обучающей модели. Как упоминалось ранее, парковок, и, соответственно, рядов для прогнозирования, много — десятки тысяч. Для нас скорость обучения важна не менее (если не более), чем точность самой модели, поэтому при принятии решения какую модель (или модели) выбирать, мы основывались на показателях RMSE и среднему времени, которое мы получаем при прогнозировании данных для n-парковок. Мы протестировали модели SARIMAX, LightGBM, Prophet и NeuralProphet.

Как мы обучали модели, проводили валидацию, проверяли стационарность и сам код мы решили не писать — есть очень много подробных инструкций и примеров (например, тут ); в этой части статьи расскажем про наши результаты и выводы.

SARIMAX — стандартная ARIMA (авторегрессионное интегрированное скользящее среднее) — наиболее популярный метод для однофакторного прогнозирования данных временных рядов. Недостатки ARIMA в том, что при построении прогноза учитываются только данные самого ряда, без внешних факторов-регрессоров. Так как наши показатели спроса напрямую зависят от множества факторов (погода, праздники, пробки и т.д.), в нашей ситуации алгоритм не будет работать.

SARIMAX же является расширением ARIMA с добавленными алгоритмами обработки сезонности и экзогенных переменных — регрессоров (используемые гиперпараметры - SARIMAX(3, 0, 2)x(2, 1, 1)).

Прогноз SARIMAX

Плюсы:

Высокая точность уже “из коробки”, учитывая доверительный интервал прогноза;

Развёрнутая документация

Из всех моделей прогнозирования временных рядов она является наиболее интерпретируемой, т.к. имеет четкое математическое обоснование.

Минусы:

долгий подбор гиперпараметров (около 10 минут на парковку).

LightGBM — реализация градиентного бустинга за авторством Microsoft. По опыту примения бустинговых моделей (чаще всего в регрессионных задачах, хотя и в двоичной\множественной классификации алгоритм также хорош), LightGBM — явный фаворит в связи с более высокой (x1.5 - x2) скоростью обучения при практически идентичной точности (разница на уровне погрешности ± 1%) в сравнении с XGBoost, CatBoost, etc.



Плюсы:

Высокая скорость обучения

Большой набор гиперпараметров

Менее ресурсоемко по сравнению с аналогами

Возможность параллельного и GPU - обучения

Минусы:

К сожалению, мы получили переобучение. Даже при автоматизированном подборе гиперпараметров, на тесте так же отсутствует предсказательная способность. Решили не закапываться и поискать возможные альтернативы.

Результаты экспериментов с моделью lightGBM на трейн

Результаты экспериментов с моделью lightGBM на тесте

Prophet — относительно молодая библиотека прогнозирования от “ЛицоКниги”. Prophet является расширением авторегрессионных моделей, которое позволяет использовать не только лаговые значения целевой переменной, но и дополнительные признаки (реализовано через ​​применение ряда Фурье к таргету), т.е. позволяет использовать дополнительные переменные — регрессоры. Для нас это было особенно актуально, так как сами лаговые значения таргета не обеспечивают точного прогноза, и требуются дополнительные независимые переменные.



Prophet имеет ряд других полезных функций, например:

Высокая точность и скорость обучения “из коробки”

Удобно реализованы базовые функции (в частности, добавления регрессоров)

Отслеживание изменений тенденции

Функционал создания пула дат со значениями-аутлаерами (праздниками, спортивными событиями), которые исключались из построения общего тренда + сезонности.

Поддерживается и регулярно обновляется разработчиками

И пара минусов:

По умолчанию нет настроек нормализации временного ряда и сопутствующих регрессоров

Пропуски\аутлаеры в данных лучше обработать вручную

Результаты экспериментов с моделью Prophet

NeuralProphet — модификация базовой библиотеки Prophet с добавлением нейронного слоя. По сравнению с Prophet бэкэнд переехал со Stan на PyTorch. Идея использовать Prophet, обладающий высокими результатами (особенно после тюнинга) по функциям потери\времени, и при этом добавить однослойную нейронную сеть для теоретического улучшения точности показалась нам крайне интересной, после чего мы построили модель уже на NeuralProphet. API у библиотек практически идентичны, как и почти все ключевые функции, поэтому технически реализовать было несложно. Результаты экспериментов с моделью NeuralProphet

Из плюсов можно выделить:

Хороший уровень точности “из коробки”

В библиотеку интегрирован слой pyTorch, благодаря которому реализован подбор параметров через градиентный спуск

Автоматическая предобработка данных (заполнение пропусков, нормализация и т.д.)

Минусы:

Низкая скорость обучения, связанная с профилированием DL-настроек (количество эпох, learning rate, etc) для каждой парковки в индивидуальности

Что получили на выходе?

Prophet NeuralProphet LightGBM SARIMAX RMSE 1.3 2.19 13.23 1.43 total_time (min) 5.59 32.20 2.33 58.20

Табл.1 сравнения метрики RMSE и времени выполнения алгоритмов на n-парковок.

Не трудно догадаться, что из всего зоопарка моделей нами в качестве рабочей был выбран Prophet. Связано это в первую очередь с простотой настройки модели и ее гипер-параметров, удобным добавлением регрессоров и достаточной гибкостью при работе с различными структурами временных рядов.

Разумеется, как бы хороша библиотека не была, чуда “по умолчанию” не произошло, и прежде чем Prophet начал демонстрировать приемлемые результаты предстояло решить ряд проблем. Например, данные по температуре меньше -1°C модель принимала как NaN и пришлось видоизменять датасет с погодой под этот баг. На старте прототипирования у нас были сложности с прогнозированием пиков, так как к дневной сезонности прибавлялись естественные шумы. Решить эту проблему получилось путем добавлением регрессоров с высокой корреляцией к таргету, в первую очередь, связанные с погодными метриками и пользовательской активностью.

Большие надежды также возлагались на NeuralProphet, так как библиотека позиционируется как “быстрее-выше-сильнее Prophet во всем”, однако в нашем случае это оказалось не совсем верно. Небольшую прибавку в точности (+3-5%) получалась только путем значительного увеличения количества эпох, как следствие - всего времени обучения в 2 - 2,5 раза.

В случае с топовыми и дефицитными парковками Prophet позволил умеренно-эффективно прогнозировать данные не только там, где присутствует явная структура (тренд + сезонность), но и там, где спрос не обладает устойчивой структурой.

Результаты работы модели Prophet на “топовой” парковке

Результаты работы модели Prophet на “слабо востребованной” парковке

Общая модель ребаланса.

Необходимо учитывать, что парковки обладают различной структурой не только в плане спроса (“топовые” и “слабо востребованные”), но и в плане ориентированности.

Часть парковок являются кольцевыми, то есть начало поездки и ее окончание — это одна и та же парковка. Как правило, это актуально для парковок возле парков или других крупных точек притяжения. Другая часть парковок являются однонаправленными — с парковки часто стартуют, и редко финишируют (или наоборот). Это обычная картина для парковок с большим количеством близлежащих жилых домов. Что это нам дает? Это значит, что старты на отдельной взятой парковке могут быть распределены нормально, а вот финиши — нет.

Искушенный аналитик спросит — для чего вообще рассчитывать финиши, если они, в отличие от стартов, не аккумулируют прибыль и их нет необходимости как-либо обеспечивать со стороны ребаланса?

Мы научились с минимальной погрешностью прогнозировать количество стартов на несколько тысяч парковок. Но в нашем случае это лишь подзадача в более масштабном проекте — спроектировать алгоритм ребаланса, который бы выполнял роль планировщика для сотрудников операционных центров, прямо указывая, к какому промежутку времени какое количество самокатов необходимо будет подвести, чтобы покрыть потребительский спрос. Одного верного предсказанного количества стартов в данном случае будет недостаточно, так как в конечном виде потребность в ребалансе парковки - функция из несколький переменных.

Берем последнее историческое наблюдение количества самокатов (scooters_last). Прогнозируем количество стартов на ближайшие X-часов (starts_forecast). Прогнозируем количество финишей на тоже количество X-часов (finishes_forecast).

Необходимый флот на парковку = scooters_last - starts_forecast + finishes_forecast

Схема ребаланса

Соответственно, для каждой парковки у нас развернуты 2 модели: на расчет стартов и финишей, которые на выходе суммируются с предподготовлеными агрегированными по времени данными о актуальном количестве самокатов.

На выходе мы получаем таблицу такого вида:

Финальная таблица ребаланса

где:

ds - время, к которому подвезти самокаты,

parking_id - номер парковки,

rebalance - фактическое значение ребаланса (положительное - профицит, отрицательное - дефицит),

class_ - тип парковки, требуется для приоритизации парковок для сервисных центров.

Вывод

В статье кратко рассказали, как мы реализовывали алгоритм расчета ребаланса, основная цель которого - оптимизировать человеко-часы и облегчить жизнь нашим сервисным командам, которые обеспечивают пользователей самокатами.

Разумеется, это далеко не весь список задач, в который у нас внедрен ML: здесь и классификации (в том числе и гео-классификации по индексу Морана), и регрессионные модели расчета целевых бизнес метрик, и многое другое.

Если статья показалась вам интересной, и вы хотите продолжения — пишите в комментариях, мы с удовольствием ответим на вопросы по теме.

Уважайте пешеходов, водите осторожно и до встречи на улицах

Whoosh!"'https://habrastorage.org/getpro/habr/upload_files/e20/229/58c/e2022958cfe8db69c3d77f9778a115f6.jpg'"['https://habrastorage.org/r/w1560/getpro/habr/upload_files/81e/f6b/09b/81ef6b09b18bfcb6d8d3a7bda91f8fba.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/ae9/b6f/cf3/ae9b6fcf3029965a5e4cf0e88313654a.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/2e8/bd7/0ab/2e8bd70ab56355cad15b40c18cea8ad0.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/a81/887/439/a81887439f0871acd6d5b215aca78556.png', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/8ac/b0e/d03/8acb0ed03babfb079b3e0799790bb6ed.jpeg', 'https://habrastorage.org/getpro/habr/upload_files/e20/229/58c/e2022958cfe8db69c3d77f9778a115f6.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/62f/f14/8fb/62ff148fb5bfac1c9be54d5327fe047c.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/288/ef3/cfb/288ef3cfb613ac459d8fa4ac6af6fa0b.png', 'https://habrastorage.org/getpro/habr/company/0dd/808/238/0dd808238b8928f2c2c1b36a625f22ba.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/e49/ffd/86b/e49ffd86bd46e58b63104af48208b0b6.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/7e8/c78/091/7e8c78091202a63025ac22380b5a2d99.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/9d1/922/0d3/9d19220d3492a1bb73ca91d26234fa4a.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/3b6/8a4/523/3b68a4523db453ed1c72079953f4352c.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/cba/b0b/568/cbab0b56825937abe39edfdc25d1f401.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/d1a/762/b74/d1a762b7440cddb9d62a42cd124f6538.png', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/262/72c/bad/26272cbad29d60e1bb94b2f7de1c2c2e.png']"
2'720250'Как учат детей в средней школе'Шахматный клуб в Le Sallay Диалог В эмиграции перед родителями часто стоят две серьезные проблемы: сохранение русского языка и самоидентификация ребенка. Но существует еще и третья проблема в целом...'https://habr.com/ru/post/720250/'"Шахматный клуб в Le Sallay Диалог

В эмиграции перед родителями часто стоят две серьезные проблемы: сохранение русского языка и самоидентификация ребенка. Но существует еще и третья проблема в целом по миру — сохранение учебной мотивации в средней школе. Эта проблема есть во всех странах.

Можно долго говорить о том, как это получилось, тому есть самые разные причины: социальные, исторические, финансовые, политические. Но результат один: исследования по всему миру, начиная с девяностых годов, показывают, что за первый год в средней школе у детей катастрофически падает мотивация. Специалисты видели это давно, а сейчас уже и родители стали говорить о том, что современная средняя школа больше всего похожа на передержку, куда ребенка сдают просто потому, что он не может быть дома один целый день, а родителям надо работать. Почему это действительно так?

Как устроена современная система образования? В начальной школе детям прививают навыки социализации, учат их простейшим чтению и счету. Даже если начальная школа не справляется с этими задачами (а, судя по количеству детей с дисграфией, дислексией и дискалькулией, она не справляется), ничего страшного не происходит. Детей хвалят, а учителя продолжают работать по старым программам и методикам.

Потом наступает средняя школа. Ее основная задача — продержать детей до того момента, когда они будут выбирать дальнейший образовательный путь, без ущерба для их здоровья и урона для общества.

И тут мы видим то, что видим. Классы огромные. Программы мозаичные и внутренне нелогичные. Задачи перед учителями неясные. Дети, которых хвалили в начальной школе за все, внезапно понимают, что есть отметки и что, судя по ним, ученики совсем не так прекрасны, как казались самим себе еще вчера. Им скучно, неприятно, тяжело и депрессивно. Только самые стойкие умеют в таких условиях ставить себе цели и не унывать. А большинство просто надолго (хорошо, если не навсегда) решает, что школа — это унылый ад, и перестает даже делать вид, что хочет учиться.

А потом — старшие классы. Не существует ни одной страны, где бы не было высокой конкуренции за поступление в «хорошую» старшую школу. Родители борются, чтобы их ребенок попал в школу, из которой выше процент поступления в престижные университеты. Школа тоже оказывается в непростой ситуации: у нее конкурс, она может выбирать учеников. И возникает соблазн брать только «форматных» детей. Чем выше статус школы, тем раньше она начинает отбраковывать «неформатных» детей. Сейчас, как известно, в некоторых местах есть серьезные экзамены уже в началку. И, хорошо понимая, почему школы вынуждены так делать, назовем эту практику все-таки крайне порочной и негуманной. В средней школе ребенок не должен быть озабочен вопросами формата. Он должен учиться. Это все, что от него требуется.

И тут возникает вопрос: куда идти детям, которые по каким-то причинам не вписываются в привычную картину? А ведь среди них может оказаться очень много талантливых и даже гениальных детей, которые могли бы раскрыть свой потенциал, если бы им кто-то помог.

Ведь средняя школа — это лучший возраст, когда ребенок может попробовать все. Посмотреть, как устроен корпус знаний, какие бывают науки, чем можно заниматься, что вообще есть в этом мире. Ему еще не надо поступать в вуз, и он может позволить себе спокойно оглядеться и выбрать то, что интересно. Но, чтобы выбирать, нужно иметь возможность посмотреть и попробовать, а не просто пройти мимо.

Ребенок должен в старших классах определить предметы, которые он будет изучать дальше. А на основании чего он может это определить, если, например, он не видит красоты математики, не понимает, про что это? Может быть, он вообще математически одаренный, но ведь он так никогда об этом не узнает! То же самое с физикой и химией, а если ему не повезло с учителями, то, возможно, и с литературой и историей.

Ребенок говорит: «Да ну, история — это занудно и неинтересно». А он просто не знает, что такое история, у него этого не было в школе. Одно дело, когда ты получаешь набор разрозненных фактов. И совсем другое, когда тебе на истории рассказывают, почему это было важно, что произошло, что при этом думали люди.

Когда учителю нравится преподавать, когда он в контакте и в диалоге с детьми, они тоже подтягиваются. В хорошей школе почти не бывает, чтобы дети совсем не хотели учиться.

В Le Sallay Диалог программа прописана на все пять лет обучения по всем предметам. Мы знаем, что и в каком возрасте дети должны знать и уметь. Куррикулум шире, чем программа средней школы примерно любой страны. Не считая национальной истории и литературы — они локально специфические. Сильная математика, гуманитарные, естественные и социальные науки, английский язык — полный курс предметов за среднюю школу.

Кстати, чтобы ребенок не терял в средней школе учебную мотивацию, сильно помогают кружки, секции и другие дополнительные занятия. Чаще это происходит в тех случаях, когда семья ребенка прикладывает большие усилия, чтобы найти что-то, что ребенку действительно интересно. В Le Sallay Диалог, например, это называется клубами, где дети, в зависимости от своих увлечений, могут попробовать любые науки и предметы, от программирования до 3D-моделирования. В других случаях бремя поиска кружков и клубов для ребенка ложится на плечи родителей. Поэтому очень важно в этом возрасте искать школу, в которой и учителя, и весь школьный коллектив были бы озабочены тем, чтобы ребенок мог всесторонне развиваться.

Кроме того, сейчас много говорят про навыки soft skills, самопрезентацию, работу в группе. Несомненно, современным детям это нужно. Они часто сами плохо устанавливают социальные отношения, многие из них не умеют работать ни со своими, ни с чужими эмоциями. Поэтому так популярны сейчас всевозможные кружки по soft skills. У нас в школе эта работа интенсивно ведется на очных сессиях, которые помогают детям завязывать дружеские отношения, чтобы потом их укрепить, сделать более теплыми, более ресурсными, более приятными для всех.

Ведь что такое очные сессии в школе смешанного образования?

Учебный год в Le Sallay Диалог начинается с того, что у детей две недели очного обучения и общения на полном пансионе. Они приезжают и не просто садятся учиться — они знакомятся друг с другом, с учителями, устанавливают эмоциональные контакты. А это важная часть учебного процесса в этом возрасте. Сочетание работы учителей и работы вожатых (те самые клубы и тренинги) дает отличный результат.

Внутри учебного года происходит чередование очных выездов и онлайн-периодов. Они тоже построены максимально полезно и комфортно для детей: занятия малым составом (четыре-семь человек) позволяет сохранять эмоциональный контакт с группой и учителями и не дает им возможности потерять учебную мотивацию. А через два месяца — снова очная сессия.

Все так организовано, потому что мы пытались решить задачу: как обучать одновременно детей десяти — двенадцати лет со всего мира? Это не может быть только онлайн-обучение — все исследования показывают, что дети (на самом деле и взрослые тоже) не могут учиться онлайн больше двух-трех месяцев. Это не может быть интернат, потому что ребенок до двенадцати лет не может жить в интернате — он слишком маленький, ему нужна мама, нужна семья. Да, ему, конечно, хочется хорошую, интересную школу, но мама важнее. Две-три недели дети выдерживают по динамике, кстати, очень хорошо. Они много работают и только к концу периода начинают уставать — без мамы, без дома, без эмоционального контакта с семьей. И это правильное время, чтобы разъехаться по домам.

Еще для сохранения учебной мотивации мы отказались от идеи классов, привязанных к возрасту, и делим детей по разным другим критериям: по уровню знаний, интересам, эмоциональной зрелости, по тому, насколько долго они могут концентрироваться. Потому что не только все дети разные — но, когда у вас международная школа, дети одного и того же возраста из разных стран могут знать разное.

Поэтому один и тот же одиннадцатилетний ребенок может быть по одному предмету в одной группе с десятилетними, а по другому — с двенадцатилетними. И это, конечно, очень важно, что дети общаются не только со сверстниками и взрослыми учителями, но и с детьми старше и младше, с вожатыми, которым часто двадцать с небольшим лет.

Оценки тоже влияют на мотивацию детей. В нашей школе оценок нет. Есть тесты на уровень освоения предмета. Во всем остальном — мы пишем отчеты для родителей по итогам каждого семестра, где отмечаем, чего ребенок достиг, где мы будем его подтягивать, какие у него успехи, на что следует обратить внимание. Разумеется, мы озвучиваем это и детям — и они сами знают, что им удается лучше, а что хуже.

То же самое с подготовкой к поступлению в старшие школы и сдаче финальных тестов. В России это было ОГЭ, во Франции — brevet, в других странах это как-то еще называется. К таким экзаменам мы их, конечно же, готовим. Но оценочной системы все равно нет. Мы просто показываем, сколько процентов программы они усвоили, и наши будущие выпускники (в основном уже выбравшие старшую школу) сами понимают, где нужно еще поднажать, а где у них все хорошо. При этом все необходимые аттестационные документы мы предоставляем.

Какой можно сделать вывод? Безусловно, можно просто пересидеть этот период, ведь ребенок еще намучается в старших классах. А можно использовать этот благодатный возраст — 10–15 лет — так, что результаты будут блестящими: психологически уравновешенный, интеллектуально развитый, увлеченный подросток. А значит, все же крайне важно найти школу, в которой, с одной стороны, будет сильная и разносторонняя учебная программа, чтобы не потерять эти важные годы зря, а с другой — чтобы ребенок занимался в комфортной, уважительной обстановке, где на первом месте ученик и его интересы.

Рассказала психолог Екатерина Кадиева."'https://habrastorage.org/getpro/habr/upload_files/b8d/81e/0b4/b8d81e0b4488b7b519bb9f153f90eaa0.jpeg'"['https://habrastorage.org/getpro/habr/company/dbe/755/9a7/dbe7559a705fbe95165d84f662a15632.png', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/b8d/81e/0b4/b8d81e0b4488b7b519bb9f153f90eaa0.jpeg', 'https://habrastorage.org/r/w32/getpro/habr/avatars/d84/7ac/8f7/d847ac8f7566c62447494b604d0931f8.png', 'https://habrastorage.org/getpro/habr/upload_files/b8d/81e/0b4/b8d81e0b4488b7b519bb9f153f90eaa0.jpeg', 'https://habrastorage.org/getpro/habr/avatars/d84/7ac/8f7/d847ac8f7566c62447494b604d0931f8.png', 'https://mc.yandex.ru/watch/24049213']"
3'720254'[Перевод] Как повысить эффективность обработки данных в сфере авиации. Кейс Xiamen Airlines'Привет, друзья! Сегодня команда Business Intelligence GlowByte поделится материалом от китайских партнеров из FanRuan – кейсом внедрения FineBI в авиации. Статья объемная (и “визуальная”), состоит из...'https://habr.com/ru/post/720254/'"Привет, друзья! Сегодня команда Business Intelligence GlowByte поделится материалом от китайских партнеров из FanRuan – кейсом внедрения FineBI в авиации. Статья объемная (и “визуальная”), состоит из двух частей. В первой рассказывается о компании и проблемах, с которыми она столкнулась в работе с большими данными, во второй рассматриваются сценарии использования BI-инструментов в авиации.

В настоящее время гражданская авиация переживает исторический и сложный момент. Эпидемия коронавирусной инфекции, риски в сфере безопасности, региональные конфликты – все это оказывает негативное влияние на бизнес. Поэтому у Xiamen Airlines появилась потребность срочно начать использовать огромные объемы накопившихся данных.

Краткое описание Xiamen Airlines

Авиакомпания Xiamen Airlines, член Skyteam, была основана 25 июля 1984 года со штаб-квартирой в городе Сямынь, провинция Фуцзянь. Это одна из немногих авиакомпания, которая уже свыше 35 лет сохраняет прибыльность в авиаперевозках Китая. По состоянию на декабрь 2021 года парк Xiamen Airlines насчитывает 209 самолетов, который обслуживает более 400 внутренних и зарубежных маршрутов. Годовой пассажиропоток составляет почти 40 миллионов пассажиров. Xiamen Airlines входит в топ-30* по объему выручки, в топ-15* по объему пассажиропотока и в топ-10* по прибыльности.

*Среди более чем 270 авиакомпаний-членов Международной ассоциации воздушного транспорта (IATA).

На протяжении многих лет авиакомпания Xiamen Airlines неустанно прилагала усилия для обеспечения авиационной безопасности и повышения качества обслуживания. Одно из достижений компании – 7 миллионов часов безопасных полетов и премия «5 звезд за безопасность». Xiamen Airlines семь лет подряд становилась «Лучшей авиакомпанией» по мнению китайских пассажиров. В декабре 2020 года APEX, всемирно известное агентство по оценке авиационных услуг, присвоило Xiamen Airlines звание «Международной авиакомпании 5 звезд».

Проблемы и задачи, с которыми столкнулась компания

Авиакомпания Xiamen Airlines накопила огромные объемы данных в процессе цифровизации, однако, как и у большинства компаний, эти данные не использовались должным образом и не приносили пользу. Xiamen Airlines столкнулась с четырьмя основными проблемами:

1. Разрозненные данные.

За 20-летний опыт цифровизации Xiamen Airlines накопила большое количество данных. Однако они были разбросаны по сотням тысяч таблиц в сотнях систем. Сотрудникам было трудно оперативно найти необходимые сведения, часто они даже не представляли, какие данные у них были.

2. Сложности с доступом к данным.

Некоторые данные нельзя было использовать из-за существующих проблем с доступом. Из-за стереотипов традиционного мышления подразделения компании не были готовы обмениваться данными между собой. Это приводило к большим трудозатратам, неясным правам и обязанностям, а также трудностям в обмене и использовании информации. Заявки на использование некоторых данных часто требовали многократного уточнения и подтверждения, и даже по прошествии длительного времени не всегда получалось достичь согласования.

3. Некачественные (“грязные”) данные.

Неправильный ввод данных, несовершенная модель данных и сложные операционные процессы — все это повлияло на качество данных. В каждой операционной системе есть некоторые “грязные” данные. При создании отчетов и визуализаций половина времени использовалась для проверки и очистки данных.

4. Недостаточный анализ данных.

Отсутствие системного подхода к данным, мощных инструментов для анализа и платформы для визуализации привело к тому, что данные использовались поверхностно: область применения была относительно узкая, интеграций и сценариев применения было недостаточно. В результате этого из “песка” данных было трудно собрать “замок”, чтобы в полной мере использовать потенциал и ценность огромного количества данных.

Решение

В ходе проекта компания Xiamen Airlines провела исследование и внедрила решения по управлению данными на следующих четырех уровнях.

1. Подключение хранилищ данных и усовершенствование сбора данных

Подключив корпоративное хранилище данных, Xiamen Airlines постоянно совершенствует его технические решения, улучшает применяемые open-source-продукты, что значительно повышает способность хранилища к агрегации данных в крупномасштабных высокопоточных сценариях с низкой задержкой. В настоящее время к хранилищу данных Xiamen Airlines подключено более 200 бизнес-систем, в которых ежедневно выполняется более 10 000 вычислительных задач в двух режимах – реального времени и автономном, синхронизируется более 3 миллиардов единиц данных, объединяется более 100 ТБ данных.

Опираясь на успешный опыт отрасли, собственные исследования и практику, Xiamen Airlines самостоятельно создала цифровую архитектуру с двумя основными возможностями – агрегацией данных и обслуживанием данных на основе характеристик потока данных авиакомпании, что позволило интегрировать разрозненные и фрагментированные массивы данных и нарушить статус-кво изолированных данных.

2. Устранение барьеров для передачи данных и стандартизация каталогов данных

Авиакомпания создала в общей сложности 8 совместных проектных групп по управлению данными о полетах, авиационном обслуживании, транспортном контроле, маркетинге, финансах и других областях. Каждая проектная команда сформировала рабочую модель годового планирования, ежеквартального подведения итогов и ежемесячного продвижения. Им удалось создать эффективное управление данными, а также наладить процесс обмена опытом. Это сотрудничество сформировало глубокую интеграцию бизнеса с технологиями и позволило добиться хороших результатов.

Авиакомпания выпустила ""Спецификацию целевого формирования ресурсов данных Xiamen Airlines"", в которой предусматривается, что стандарт данных должен содержать полное описание данных по трем направлениям: операции, технологии и управление. Xiamen Airlines также провела более 20 специальных тренингов в области составления каталогов данных, знаний методов и инструментов управления данными. Сотрудники различных подразделений ознакомились с соответствующими требованиями, освоили навыки управления данными, узнали об их безопасном хранении, а также начали использовать в работе модели совместных проектных групп.

3. Контроль качества данных и формирование чистых данных

Xiamen Airlines разработала и внедрила 8 вспомогательных инструментов управления данными, в том числе “Систему управления стандартами данных”, “Систему управления моделями данных” и “Систему управления основными данными”, которые в значительной степени способствуют внедрению спецификаций управления данными и реализуют ""процесс внедрения, стандартизацию операций и автоматизацию развертывания"" всей цепочки управления данными, значительно снижая трудозатраты и повышая эффективность процесса.

Опираясь на успешный опыт ""Эталонной архитектуры Open Group для коммерческой авиации"" и ""Путь данных Huawei"", Xiamen Airlines разработала комплексную архитектуру данных компании, включающую четыре компонента:

каталог активов данных,

модель данных,

стандарт данных,

распространение данных.

Это было сделано для того, чтобы работники могли понимать всю картину данных предприятия, регулировать производство, хранение и использование данных с самого начала, когда создаются новые проекты, и уменьшать трудности управления на более позднем этапе. Создание архитектуры корпоративных данных дало возможность для управления данными на уровне источника, эффективного обмена данными и повышения гибкости бизнеса.

4. Поощрение обмена данными и распространение использования BI

В 2021 году Xiamen Airlines провела общекорпоративный ""Конкурс инноваций в области данных"", в котором команды использовали инструмент FineBI в качестве платформы для разработки ""эффективных решений"" и ""золотых идей"" для повышения эффективности безопасности полетов, обработки процессов и эксплуатации маршрутов. В конкурсе приняли участие в общей сложности 90 команд, 251 сотрудник из 25 подразделений.

Мероприятие позволило стереть границы между подразделениями компании, создать условия для обмена опытом и идеями. Это стало хорошей практикой продвижения и развития культуры управления данными в компании, что в свою очередь стало стимулом формирования экосистемы для инноваций в цифровой индустрии по принципу “совместного строительства, обмена информацией и взаимовыгодного сотрудничества”.

Как BI-инструменты помогают авиации: 4 сценария на примере Xiamen Airlines и FineBI

В авиации существует множество факторов и ограничений, связанных с летной эксплуатацией: человеческий фактор, воздушные суда и их передвижения, аэропорты, погодные условия и т. д. Для функционирования авиакомпании важное значение имеет:

в полной мере собирать, анализировать и применять данные в сложной операционной среде в условиях ограничений,

своевременно докладывать лицам принимающим решения, о проблемах и прогнозах, выявленных в процессе анализа,

оперативно принимать верные решения для обеспечения безопасности и эффективности полетов, стабильного роста доходов компании, баланса между безопасностью и эффективностью.

В прошлом Xiamen Airlines использовала различные платформы для сбора, обработки и анализа данных. Благодаря FineReport и FineBI различные виды анализа были централизованы, а аварийные сигналы стали своевременно передаваться лицам, принимающим решения.

Цель: максимальное использование данных для обеспечения устойчивого роста компании.

Решение: 4 типичных сценария:

Анализ процесса летной эксплуатации. Анализ эффективности полетов. Платформа по профилактике и борьбе с эпидемиями. Оптимизация и управление корпоративными процессами.

Сценарий 1: Анализ процесса летной эксплуатации

Проблемы и потребности бизнеса

Гражданская авиация всегда стремилась к тому, чтобы в полной мере использовать большие объемы накопленных данных для поиска возможностей сэкономить топливо при условии обеспечения безопасности полетов.

Xiamen Airlines существует уже более 35 лет и накопила большой объем операционных данных из различных систем, но не использовала инструменты для статистического анализа и обеспечения поддержки принятия оперативных решений в режиме реального времени.

В области анализа данных существовали следующие болевые точки:

1) В процессе анализа в большей степени использовались данные управления и производительности и практически не анализировались данные из отдела поддержки и эксплуатации.

2) Практика анализа данных была не распространена внутри компании. Большинство программ были написаны разработчиками, и операционные сотрудники не могли оперативно менять систему или подстраивать ее для своих задач.

3) Неудобный интерфейс. Для всех групп пользователей существовал единый интерфейс программы.

4) Отсутствие оценки качества данных.

Решение

1) Создание и функционирование больших данных

Создание и эксплуатация платформы big data для интеграции 12 хранилищ данных, в частности полетной эксплуатации, планов полета, информации о персонале, QAR, ACARS, данных о ценах на нефть, данных о затратах, метеорологических и разведывательных данных, информации о самолете и др. Создание 360-градусного “обзора полета”, охватывающего траекторию, объем, расход топлива и другую информацию, необходимую для анализа.

2) Создание системы анализа всего процесса летной эксплуатации

Созданная в FineBI и FineReport система анализа позволила:

мониторить весь процесс использования топлива в полете,

уточнять и анализировать расход топлива на каждом этапе полета,

использовать потенциальные возможности для экономии топлива,

рассчитывать эффект экономии топлива,

обеспечивать поддержку точных данных для энергосбережения и сокращения выбросов.

3) Уточненные аналитические измерения и показатели

Для достижения контроля расхода и экономии топлива были разработаны операционные показатели, которые позволили проводить анализ общей ситуации с экономией топлива в компании, отслеживать тенденции изменения основных показателей расхода топлива, в частности почасовое потребление и на отрезке маршрута, а также подсчитывать профили экономии топлива и понимать эффекты такой экономии.

Благодаря анализу траектории полетов, изучению отклонений от маршрутов и тщательному анализу процедур захода и выхода из аэропорта удалось создать систему, которая:

своевременно находит оптимальную траекторию полета,

рекомендует необходимую высоту,

находит наилучшую процедуру захода и выхода пассажиров из самолета.

1) Этап ожидания трапа и вождения самолета

Посредством анализа различных аэропортов оценивается распределение использования источника питания, установленного на трапе, между различными положениями трапа. Проводится анализ аэропортов с низким уровнем доступа к трапу, поиск проблем и подготовка предложений по комплексному повышению коэффициента использования источника питания трапа.

Проводится подсчет количества рейсов, совершаемых по линии руления на стоянке рядом с аэропортом, и сравнивается с эксплуатационными данными: временем до разгона, расходом топлива до разгона.

2) Этап выруливания

Анализ времени взлета и посадки в различных аэропортах позволил принимать наилучшие решения по заправке самолетов, избегать риска задержек рейсов, вызванных длительностью посадки.

Анализ количества рейсов и аэропортов, где разные пилоты используют укороченные ВПП для взлета. Поощрение пилотов в использовании преимущественно сокращенных ВПП для взлета в условиях соблюдения требований безопасности и эксплуатационных ограничений для экономии энергии и сокращения выбросов.

3) Этап набора высоты

Анализ использования снижения тяги для различных аэропортов, самолетов и двигателей. Поиск новых возможностей и улучшений.

4) Этап крейсерского полета

Анализ планируемой и фактической высоты, расхода топлива и других факторов. Анализ причин, по которым необходимо увеличивать или уменьшать как летное время, так и расход топлива.

С помощью автоматического отбора беспосадочных рейсов производится подсчет их количества, расчет расстояния полета и экономии топлива и поиск потенциальных беспосадочных сегментов.

Оптимизация индекса стоимости оказывает прямое влияние на временные затраты и затраты на топливо, также существует много возможностей для снижения прямых эксплуатационных расходов.

5) Этап прилета/ вылета в аэропорт

Анализ процедур прилета, вылета и сравнение времени потребления топлива между различными аэропортами, а также оптимизация маршрутов прилета и вылета в целях экономии топлива.

6) Комплексный анализ маршрутов

Комплексный анализ маршрутов осуществляется путем настройки параметров объема расхода топлива, выбора даты маршрута и др. для автоматического расчета маршрута, соответствующего условиям, а также последующий анализ причин инцидентов на маршруте для принятия решений и внесения предложений.

Благодаря вышеуказанным исследованиям компания эффективно сократила большое количество затрат на топливо.

4) Создание платформы визуализации энергосбережения и сокращения выбросов

Для облегчения мониторинга показателей в режиме реального времени компания визуализировала ключевые данные.

Результаты

Благодаря точному контролю количества используемого топлива в 2022 году было достигнуто сокращение потребления топлива на 4,8% по сравнению с 2021 годом. По подсчетам специалистов, проект позволит экономить 2040 тонн топлива в год, сократить выбросы углекислого газа примерно на 6430 тонн и сэкономить 10 миллионов юаней на топливные расходы. (Примечание: в качестве основы использовались данные 231300 рейсов за 2021 год.)

За счет оптимизации направления маршрута, процедур прилета/вылета в аэропорт, высоты полета и др. совокупный расход топлива в 2022 году снизился на 1,4% по сравнению с 2021 годом.

В целом проект позволяет экономить 19670 тонн топлива в год, сокращает выбросы углекислого газа на 61960 тонн, снижает топливные расходы примерно на 98,4 миллиона юаней.

Сценарий 2: Анализ эффективности полетов

Проблемы и потребности бизнеса

Основным субъектом, обеспечивающим безопасность авиации, является пилот. Пилоты, в свою очередь, обеспечивают безопасность опираясь на свои знания регламентов, постоянное обучение и работу над ошибками. Часто то, каким образом проводится работа над ошибками, зависит от инициативности, самоконтроля и мотивации пилотов. Компания проводит целенаправленное обучение для улучшения навыков и обеспечения безопасности при эксплуатации.

Решение

Для начинающих пилотов используется персонализированное обучение на основе данных. Для этого выбираются пять измеренных значений с высокой достоверностью и проверенные данные для оценки маневренности пилота. Вместе с данными о небезопасных инцидентах выбирается необходимое дополнительное обучение. Для пилотов с невысокой квалификацией, но с высокими показателями управления самолетом данные используются для их отбора в конкретную категорию и для улучшения летных навыков в плохую погоду.

Ценность сценария

Ценность первого случая заключается в обучении пилотов самостоятельно управлять воздушным судном, находить недостатки и проводить целенаправленную подготовку для улучшения своих способностей и обеспечения безопасности. Второго – содействие программе по выявлению специалистов с выдающимися навыками, улучшению летных возможностей и обеспечению эксплуатации самолета. Использование данных таким образом способствует обучению и безопасности.

Сценарий 3: Платформа по профилактике и борьбе с эпидемиями

Проблемы и потребности бизнеса

Авиация является важным международным транспортным каналом. С момента начала пандемии авиакомпания Xiamen Airlines настояла на непрерывности международных рейсов. В то же время она активно выполняла задачи по эвакуации китайских граждан, оказанию помощи и организации чартерных рейсов в интересах правительства, предприятий и учреждений.

На данный момент совершаются рейсы в 48 стран и 98 городов, из которых после пандемии было открыто почти 40 новых зарубежных пунктов назначения, включая Ирак, Афганистан, Африканский континент. Из-за тесных контактов с внешним миром нагрузка по профилактике пандемии и контроль за ней была огромна, поэтому необходимо было срочно предложить единый мониторинг ситуации с пандемией как в стране, так и за рубежом в режиме реального времени. Также было необходимо оперативно отслеживать динамику заболеваемости среди персонала и статус полетов.

Решение

Руководствуясь различными нормативными документами Государственного совета, Управления гражданской авиации и местных органов власти, Xiamen Airlines стала первой в области профилактики пандемии и борьбы с ней. В ходе фактической эксплуатации компания сформулировала и улучшила план внедрения замкнутого цикла международных (региональных) рейсов, план работы для наземных операций.

Ценность сценария

Благодаря мониторингу данных по всей цепочке профилактических мероприятий и борьбы с пандемией была повышена эффективность дезинфекции и снижены затраты на персонал. Как результат – Сямынь (является третьим по величине пунктом пропуска для въезда из-за границы) имеет показатель завоза больных ковидом на 50% ниже, чем в среднем по стране. На Национальной конференции по борьбе с эпидемией авиакомпания Xiamen Airlines получила две высшие награды за свой вклад.

Сценарий 4: Оптимизация и управление корпоративными процессами

Дашборд эффективности на уровне компании

Дашборды эффективности на уровне подразделения

Анализ процессов

Проблемы и потребности бизнеса

Преимущества и недостатки процесса напрямую связаны с эффективностью функционирования предприятия и управления им, что, в свою очередь, влияет на его конечную стоимость. Рациональные процессы отличают успешные компании от конкурентов и создают экономическое преимущество для первых. Нерациональные процессы увеличивают скрытые управленческие издержки предприятия, незаметно нанося ущерб конкурентному преимуществу компании.

Решение

Существует четыре типа людей, которые больше всего заботятся об эффективности процессов: руководители компаний, руководители подразделений, подразделения по оптимизации процессов и пользователи процессов. На основании этого проводится анализ по нескольким группам показателей. Рассмотрим их ниже.

1) Эффективность на уровне компании – учет общего объема задач, сравнение и концентрация внимания на изменениях тенденций:

с точки зрения общего объема задач показатели KPI акцентируют внимание на динамических изменениях;

с точки зрения структуры 57 шаблонных процессов в компании объединены в 9 категорий в соответствии с характером операций. Это помогает проводить структурный анализ;

с точки зрения тенденций анализируются изменения во внешней среде и накладываются на общие тенденции развития компании.

2) Сточки зрения административного регулирования проводятся сравнение и поиск недостатков, разрабатываются регламенты и правила:

сравнение показателей KPI между подразделениями (анализ эффективности помогает определить исключительных сотрудников, оптимизировать и мотивировать персонал), анализ среднего уровня эффективности компании;

с точки зрения тенденций проводится анализ количества ежегодных, ежемесячных и еженедельных операций, это позволяет получить справочные данные о рабочих привычках и условиях труда в рабочее время;

с точки зрения структуры компании анализируются процессы и ситуации, требующие большого количества времени, определяются причины таких ситуаций и предоставляются данные для их решения.

3) С точки зрения оптимизации рассматриваются слабые места процесса и проводится поиск вариантов для решения проблемы:

поиск отклонений: проводится анализ точечной диаграммы распределения категорий и конкретных примеров объектов отклонения;

вспомогательная корректировка: проводится целевой анализ количества операций, участников, фактического количества операций в процессе и ранжирования продолжительности процесса, указываются слабые звенья, представляются портреты слабых процессов. Путем наглядного сравнения с другими типами процессов выявляются проблемы процесса, что позволяет проводить постоянную оптимизацию.

с точки зрения использования процесса выделяются привычки, требующие большого количества времени, проводится их проверка, оказывается содействие в рациональном планировании, указываются наиболее трудоемкие задачи, создаются различные шаблоны процессов, и пользователям предоставляются визуальные основания для предварительного планирования.

Ценность сценария

Подход ориентирован на разные типы людей с различными требованиями к эффективности процессов, а именно на руководителей, оптимизаторов процессов и пользователей. Разработаны доски Kanban с четырех точек зрения управления компанией, подразделением, оптимизации и использования процессов. Инструмент используется для мониторинга эффективности процесса управления компанией и обеспечения поддержки данных для общего повышения эффективности работы.

После оптимизации процесса эффективность компании в 2022 году увеличилась на 6% по сравнению с 2021 годом, а избыточные процессы сократились на 23 пункта. Это помогает компании органично и эффективно расти и развиваться.

Заключение

В настоящее время гражданская авиация переживает исторический и сложный момент. Как мы упомянули в начале, эпидемия коронавирусной инфекции, риски в сфере безопасности, региональные конфликты оказывают негативное влияние на эту область. Поэтому Xiamen выбрала для себя путь эффективного использования больших данных для принятия решений.

FineBI – это мощный инструмент для анализа ценности данных и повышения их производительности. С момента внедрения FineBI в 2021 году авиакомпанией Xiamen Airlines инструмент начали использовать в области полетов и эксплуатации, маркетинге и финансах, авиационном обслуживании, HR и других подразделениях. Это побудило операционный персонал и ИТ-специалистов нарушить устаревшие организационные и рабочие ритуалы, интегрировать инструмент и создать пространство для инноваций.

Благодаря развитию культуры обработки данных Xiamen Airlines сформировала атмосферу управления данными, а также создала экосистему совместных инноваций в цифровой индустрии “совместного строительства, обмена информацией и взаимовыгодного сотрудничества”.

Xiamen Airlines продолжает фокусироваться на ценности анализа и управления данными, изучать ценность большего числа бизнес-сценариев, а также применять на практике корпоративные приложения для обработки данных. Вступив на путь цифровой трансформации, Xiamen Airlines выступила новаторами в своей области и продолжает вносить вклад в развитие гражданской авиации."'https://habrastorage.org/getpro/habr/upload_files/5cb/202/bb7/5cb202bb75d853209d45fa7b3a1678ac.png'"['https://habrastorage.org/getpro/habr/avatars/7d7/e83/266/7d7e83266982e52d03e25e15ab286db7.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/a87/e6a/843/a87e6a843d7132f309ffb66acbb9c29b.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/7e3/2a0/9dd/7e32a09dd358b5f58321e00c59e48c83.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/4b0/bba/2c3/4b0bba2c3ce5aa44d5ac5c9dfd34966a.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/d7f/876/115/d7f876115a4c86abcda8f32d864f19c8.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/39c/40d/1b3/39c40d1b3943e800d623aebdb89c235a.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/fc8/4ad/b0d/fc84adb0dd0e39562ae35d95913cc916.png', 'https://habrastorage.org/r/w32/getpro/habr/avatars/7d7/e83/266/7d7e83266982e52d03e25e15ab286db7.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/5cb/202/bb7/5cb202bb75d853209d45fa7b3a1678ac.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/fc1/719/ba1/fc1719ba10917cede0c248e4c9db6d28.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/652/714/a92/652714a92c32188a5d69e18c79755a4e.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/381/488/29d/38148829d1d723c2ea9df07f8bcec272.png', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/902/865/b25/902865b25900a504ab5dfe8f4915e851.jpeg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/60b/f0b/ddb/60bf0bddb9c14cf809a867009262bfa2.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/33f/030/1d0/33f0301d0fb34f39bd5ef7fa4f4e2495.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/fc0/d20/cb2/fc0d20cb2a56ba91f706fc9b1c1f75ad.png', 'https://habrastorage.org/getpro/habr/company/3de/e51/4a7/3dee514a7358ecd8db4f7f4733042e35.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/f68/0ad/e5e/f680ade5e138667fea88b5c6c1e30f1a.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/ab1/aab/458/ab1aab458bfbd2d741265d75cb03e87d.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/c13/b82/7a0/c13b827a09bf558213f76d46a2d0a431.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/90f/178/3a9/90f1783a9ea18bbfa637cc35ddfed6fd.png', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/d81/dbf/6f0/d81dbf6f0048c3eeba84410fee9229f6.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/b8a/6c6/8e8/b8a6c68e8ded755d0321bfaaa204ca55.png', 'https://habrastorage.org/getpro/habr/upload_files/5cb/202/bb7/5cb202bb75d853209d45fa7b3a1678ac.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/328/b75/fe9/328b75fe92db0645ea4506d360ebc44a.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/85e/7bb/eeb/85e7bbeeb44f0e9e0ac8e4a5df8d36d9.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/3d8/08e/fcf/3d808efcf1d700af4af4d69e760dbc26.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/0cb/6ec/7e7/0cb6ec7e76bfe8bf45c8e9ed12ea85ec.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/930/c4f/732/930c4f732702c45dbe2655d319f3f7d7.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/b96/51a/fca/b9651afca250a6a2a7fa0a31202070c5.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/b93/770/080/b93770080ec77691806f2cdab25108c6.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/f7e/aea/14d/f7eaea14d670a7b0ab376c1029feb835.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/a54/a8a/b75/a54a8ab7588ff2822b7679d4e6e7545e.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/7d2/44e/a45/7d244ea458327f81363cbc8ee569cf17.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/b2c/655/131/b2c655131a6d818f173b63f6ef37e219.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/c7d/aa8/be8/c7daa8be8dc27ac4a7896f3385a1ff52.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/8b9/159/b38/8b9159b3891fcd2af382df622baf7305.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/1f6/606/025/1f66060254c4101823ad4c18558fa576.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/263/d77/af5/263d77af536a55f4bb9cad06eab8abe1.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/d33/b44/45f/d33b4445f3e54d3df6d48dd69cae25db.png']"
4'719710'Сроки доставки заказов: как в Авито сделали прогноз более точным'Привет! Меня зовут Андрей Васильченко, я аналитик в команде Авито Доставки. Несколько лет назад мы запустили это направление, чтобы дать возможность покупателям и продавцам из разных регионов...'https://habr.com/ru/post/719710/'"Привет! Меня зовут Андрей Васильченко, я аналитик в команде Авито Доставки. Несколько лет назад мы запустили это направление, чтобы дать возможность покупателям и продавцам из разных регионов отправлять товар друг другу. Мы доставляем товары в пункты выдачи, постаматы и курьером до двери.

В этой статье я расскажу, почему мы считаем, что нужно работать над улучшением прогнозов сроков доставки для покупателей, как мы предсказывали их раньше, что изменили сейчас и что хотим учесть в будущем.

Доставка или самовывоз: как покупатели принимают решение

При выборе между доставкой и личной встречей с продавцом покупатели ориентируются не только на срок доставки. На их решение также влияют:

цена доставки;

близость пункта выдачи;

бренд пункта выдачи;

прошлый опыт заказов.

Идеальная доставка для покупателя — бесплатная, в пункт выдачи рядом с домом, за 1–2 дня.

Срок, в который покупатель получит заказ, зависит от способа доставки, расстояния от продавца до покупателя, скорости обработки заказов на складах и других факторов. Мы анализируем эти данные и показываем предполагаемое время доставки при оформлении заказа.

Карточка товара, срок доставки, карта пунктов самовывоза

Почему срок доставки важен для покупателей

Мы проанализировали исторические данные о заказах с доставкой и выделили две причины, по которым стоит работать со сроками:

Срок доставки влияет на конверсию в заказ. Пользователи чаще выбирают доставку, если знают, что заказ приедет быстро. Чем больше срок, тем ниже конверсия в покупку. На скрине приведена разница в конверсии на одном из шагов воронки.

Конверсия в покупку в Москве при разных сроках доставки

Опоздание доставки снижает retention покупателей в следующую покупку. Пользователи, которые получили заказ с опозданием, реже возвращаются за новой покупкой.

Мы предположили, что если уменьшить сроки и не допускать опозданий, то заказов будет больше и покупатели будут выбирать доставку, а не встречу с продавцом. В задаче улучшения сроков есть простор для оптимизации: у нас более 100 000 направлений, 10 служб доставки, 50 000 пунктов выдачи.

Сложности в оценке сроков доставки

На момент запуска Авито Доставки в расчете сроков для покупателя мы учитывали несколько факторов:

как быстро продавец отправит товар;

как быстро служба доставки довезет товар до покупателя

нерабочие дни / праздники

Сложность в том, что Авито может учитывать эти факторы, но не может на них влиять. Например, мы не знаем, как быстро продавец отнесёт заказ в пункт приёма. Поэтому на этом этапе нужно учитывать возможные задержки.

Меньше трети продавцов отправляют заказы в тот же день, остальные — на следующий день или позже

Другой фактор, на который мы не можем повлиять - как быстро служба доставки довезет товар до покупателя. Cлужбы доставки предоставляют сроки, в которые они обещают доставить товар по данному направлению. Но они часто завышают их, чтобы не портить свою статистику возможными опозданиями. По факту доставка часто происходит быстрее заявленных сроков, и мы хотим показывать это покупателям.

Итоговые сроки по некоторым направлениям дольше, чем нам хотелось бы

Как мы оценивали качество сроков на запуске доставки

В мире логистики есть стандартная метрика — PSDD (promise shipment delivery date), которая помогает оценить качество прогнозирования сроков. Предсказание считается хорошим, если заказ доставлен за 1–2 дня до окончания срока. Если за 3 дня и раньше — то это плохое предсказание, и в этом недостаток метрики.

Например, мы показали пользователю срок доставки от 2 до 5 дней. Чтобы заказ попал в категорию правильно предсказанных сроков, его должны доставить за 3, 4 или 5 дней.

Если заказ доставят за 2 дня, предсказание будет считаться плохим. Хотя доставили быстро и в указанном интервале

По этой метрике мы получали всего 55% хороших заказов при небольшой разнице между минимальной и максимальной датой доставки. Для направлений, где разброс сроков доставки больше, она становится еще неинформативнее. Допустим, у нас есть данные о реальных сроках доставки в конкретном направлении:

Разброс времени доставки от 1 до 10 дней, честным прогнозом для покупателя тут будет срок от 2 до 8 дней (потому что 90+% заказов приедет в этот срок). При этом для максимизации метрики PSDD нужно сдвинуть 3ех дневное окно так, чтобы в него попала наибольшая доля заказов. В данном кейсе вряд ли удастся найти такое положение, где число хороших заказов будет больше 50%. А если мы начнем подгонять прогноз так, чтобы увеличить число хороших заказов, это не сделает пользователей счастливее тк много заказов приедет не в заявленный слот.

Как мы меняли метрику и выбрали подходящую

Стандартная метрика нам не подошла. Прежде чем выбирать другую, мы в команде определили, что идеальная для нас метрика:

Легко объяснима коллегам и руководству.

Связана со счастьем пользователя и помогает нам делать продукт лучше.

Покрывает функциональность продукта: если метрика достигает целевых значений, то продукт не может быть плохим для пользователей.

Чувствительна к изменениям в продукте.

С учётом этих идей мы выбрали две простые метрики, для которых рассчитали нужные нам значения:

Мы считаем заказ хорошим, если попали в спрогнозированный интервал. Таких заказов должно быть не меньше 90%. Предполагаемый интервал доставки должен быть как можно короче. Идеально — не больше 3 дней.

Хорошими считаются все заказы, которые попали в предсказанный интервал

Мы сравнили результаты старого и нового подходов к оценке предсказанных сроков. Новые метрики показали, что на самом деле в срок приезжают 60% заказов, и ещё 37% доставляются раньше.

Результаты оценки сроков доставки по старой и новым метрикам

В результате новая метрика дала прирост заказов с верной оценкой срока — с 55 до 60%. Это всё ещё далеко от желаемых 90%. Но то, что 37% покупателей получают заказ раньше срока, помогло нам увидеть потенциал для оптимизации и прироста конверсии в заказ.

Оптимизация предсказания сроков доставки с помощью ML

Срок доставки товара может зависеть от направления, конкретной службы доставки, дня недели и времени отправки заказа, графика работы пункта приема и выдачи товаров, сезона и других факторов. Мы решили собрать данные по каждому фактору за несколько месяцев и обучить на них ML-модель.

Задача модели - предсказать минимальный и максимальный срок доставки для покупателя так, чтобы 90% заказов приезжали в срок, при этом максимизируя точность сроков (то есть минимизируя разницу между максимальным и минимальным сроком). Таргеты модели - 5 и 95 перцентили распределения реального срока доставки.

В качестве модели использовался Quantile Random Forest. Стандартная модель Random Forest вычисляет среднее значение целевой переменной в каждом листе дерева и затем усредняет по всем деревьям. Quantile Random Forest же вместо усреднения по всем деревьям получает распределение целевой переменной и вычисляет необходимые перцентили.

В качестве датасета для обучения одной модели использовали все заказы по одному направлению (пары городов). Были обучены модели для топ 1000 направлений доставки за 2 месяца. Следующий месяц использовался в качестве теста.

ML-модель предсказывает сроки намного точнее, чем получалось в ручном режиме по данным от служб доставки

Модель показала хорошие результаты по метрикам: 92% заказов в тесте приезжает в срок, а средний интервал доставки сократился до 3 дней. Оба значения совпали с целевыми, поэтому можно было внедрять модель в продакшен.

Кроме того, мы увидели что если в исходном датасете присутствуют час отправки заказа и график работы ПВЗ приема/выдачи, то итоговая модель имеет на 2пп (90% -> 92%) больше заказов в срок, чем без этих фичей (при том же среднем интервале в 3 дня). То есть теперь у нас есть количественная оценка того, насколько мы можем улучшить качество сроков, если учтем дополнительные параметры.

Однако в итоге мы отказались от идеи внедрять ML в прод.

Три причины, по которым мы отказались от реализации модели:

Запустить в продакшене ML-модель, которая работает в реальном времени для всех пользователей — это долго и сложно для разработки. Нам хотелось быстрого результата. Модель требует много ресурсов на поддержку аналитиками. Придётся постоянно следить, не сломалось ли что-то в данных. Предсказывающую модель сложно интерпретировать. Если руководство спросит, почему мы устанавливаем именно этот срок доставки по этому направлению, объяснить это можно будет только коэффициентами у модели.

Но всё-таки ML-модель наглядно показала, что качество предсказаний можно улучшить, поэтому мы начали искать другой подход к оптимизации.

Использование простых эвристик для уточнения сроков доставки

Есть несколько популярных направлений, по которым накопилось много исторических данных. Одно из них — Москва–Санкт-Петербург.

Реальный срок доставки по направлению Мск–Спб — от 2 до 5 дней

Мы можем показывать пользователю срок с разбросом в 4 дня, но хочется сделать предсказание более точным. Чтобы сузить диапазон до 3 дней, нужен дополнительный разрез данных. Мы решили проверить, как на срок доставки влияет день отправления заказа. Данные разбили по дням недели.

Заказы, отправленные в выходные, в среднем доставляются на 1 день дольше

Новые разрезы показали, что если покупатель смотрит товар в рабочий день, ему можно показать интервал 2–4 дня, а если в выходной — 3–5 дней.

Но этот подход сложно применить к направлениям, где нет достаточного объема исторических данных.

Для пары Тамбов–Анапа разброс срока доставки большой, но данных по количеству доставок недостаточно для прогноза

Для таких направлений мы решили смотреть разрез не по городам, а по регионам: вместо направления Тамбов–Анапа анализируем сроки доставки из Тамбовской области в Краснодарский край.

Данных о доставках между регионами больше, можно сделать более точный прогноз

В прогнозе мы также учитываем, что продавцы используют разные службы доставки. У каждой из них есть своя специфика, которая влияет на скорость. Например, одна возит товары на машинах, а другая — отправляет самолётом.

Пример для доставки по направлению Москва–Краснодар. У двух служб доставки реальный срок различается в среднем на день

В итоге мы получили алгоритм на основе нескольких простых эвристик, который можно использовать для всех направлений:

Берём направление в разрезах по дню отправки и службе доставки.

Если заказов по этому направлению больше N, то прогнозный срок рассчитывается по паре городов.

Если заказов по направлению меньше N, то прогнозный срок рассчитывается по паре регионов.

Минимальный срок соответствует 5-му перцентилю от всех заказов, а максимальный — 95-му.

учитываем праздничные дни на исторических данных.

После реализации алгоритма мы сравнили результат его работы с предсказанием ML-модели. Оказалось, что он делает предсказание немного хуже.

Число заказов, доставленных в срок, немного снизилось, средний интервал вырос, но оба значения близки к целевым

Стоит ли продолжать улучшать предсказание сроков

Когда стало понятно, что эвристики работают, мы решили проверить, есть ли смысл ещё больше погружаться в оптимизацию сроков. Мы запустили эксперимент, в котором проверили три гипотезы:

1. Снижение срока доставки увеличит количество заказов

Мы предположили, что сокращение срока доставки на 1 день (например там где было 2–3 дня показать 1–2 дня) значимо увеличит конверсию покупателей в заказ.

Эта гипотеза подтвердилась: число заказов в некоторых направлениях выросло более чем на 5%. Это значит, что действительно имеет смысл искать способы снизить срок доставки.

2. Увеличение сроков доставки сократит долю опозданий и предотвратит падение retention

Если показать пользователю заведомо больший срок доставки, то товар скорее всего приедет в этот срок. Значит, пользователь не будет огорчен задержкой и снова воспользуется доставкой.

Гипотеза также подтвердилась: retention в тестовой группе был выше на 5%. Но при этом количество заказов уменьшилось. Это значит, что просто снижать сроки доставки нельзя т.к. мы увеличим заказы в моменте, но потеряем в будущем.

3. Больший срок доставки снизит количество обращений в техническую поддержку

Пользователи не будут обращаться в поддержку, если заказы приезжают вовремя.

Эта гипотеза не подтвердилась: сроки доставки никак не повлияли на количество обращений в поддержку. Мы выяснили что пользователи обращаются не из-за опозданий заказов, а из-за того что не могут найти прогнозный срок в интерфейсе.

Что мы планируем делать дальше

Работа по проекту ещё не закончилась. Для более точных прогнозов имеет смысл учесть ещё два разреза данных т.к. благодаря ML-модели мы знаем, что они улучшают качество прогноза:

График работы пунктов выдачи в городах продавца и покупателя. Например, если мы знаем что пункт выдачи не работает в выходные, то это можно заложить в срок доставки. Время суток, в которое отправлен заказ. Если продавец передал товары в доставку утром, то они окажутся в дороге раньше, чем если бы их передали вечером.

Ещё один способ сократить время доставки — мотивировать продавцов быстрее отправлять товары, тогда и покупателю они придут быстрее. Мы знаем, что многие предпочитают накапливать заказы за 1–2 дня и потом передавать их в доставку разом. Сейчас мы ищем способ сделать быструю отправку более выгодной.

Также мы знаем, что сроки имеют сезонность: зимой заказы доставляется дольше, чем летом. Мы планируем автоматизировать учёт этой сезонности в продакшене.

Итоги

Сроки доставки — это важный фактор для покупателя при принятии решения воспользоваться Авито Доставкой. Мы проанализировали исторические данные и убедились в том, что более точные и короткие сроки положительно влияют на retention и конверсию в покупку.

Нам удалось сделать то, что мы запланировали:

выбрать подходящую метрику для оценки качества прогнозирования сроков доставки: понятную, чувствительную к изменениям, коррелирующую со счастьем пользователей;

выбрать подходящий метод прогнозирования сроков: мы попробовали ML, но пока остановились на простых эвристиках т.к. они позволили достичь целевых значений по метрике и оказались проще в реализации

увеличить количество заказов с качественными сроками до 90%;

с помощью АБ-теста с искусственным уменьшением сроков убедиться, что дальнейшая оптимизация сроков приведет к росту заказов

Таким образом, в дальнейшем у нас есть все возможности, чтобы показывать покупателям сроки, которые будут ещё короче и точнее. Так мы будем наращивать количество заказов через Авито Доставку и делать пользователей Авито счастливее.

Предыдущая статья: Как осознать себя в роли руководителя тимлидов"'https://habrastorage.org/getpro/habr/upload_files/3a1/36a/aaa/3a136aaaafd625fc409b8f9556cb0578.jpg'"['https://habrastorage.org/r/w780q1/getpro/habr/upload_files/46e/bf5/dc2/46ebf5dc2abc5d2b3ec3c6d9ba98bcdb.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/9da/fb4/b26/9dafb4b26c5bd2a068f2a11ffb3f5700.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/9b1/a45/372/9b1a453727a976189a3b0a72523fe5c1.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/177/22b/778/17722b7789cf5c601e578bd5ee014fca.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/cd2/071/fa0/cd2071fa07927e95249572efa6f3f179.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/155/c24/d16/155c24d16b64d334b753a59a87a3630f.png', 'https://habrastorage.org/getpro/habr/upload_files/3a1/36a/aaa/3a136aaaafd625fc409b8f9556cb0578.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/ba6/625/090/ba6625090a6827307f9ab13fac95c5d3.png', 'https://habrastorage.org/getpro/habr/company/b6b/ab3/2ea/b6bab32eacd6556cda8fd93860a1b4c0.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/504/7f5/fd2/5047f5fd20e0dd3080b2e05f0efe09cf.png', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/12d/121/08a/12d12108a0eb9a902fd1ccf346f8f7bc.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/31e/a56/a4e/31ea56a4ef952ab88b64bb13a7f30eb9.png', 'https://habrastorage.org/r/w32/getpro/habr/avatars/d43/ad2/7d9/d43ad27d90a0976d16d2c5cba824940e.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/59a/230/3fe/59a2303feff7dff2a1a3f5eb0ef852df.png', 'https://habrastorage.org/getpro/habr/avatars/d43/ad2/7d9/d43ad27d90a0976d16d2c5cba824940e.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/f8e/c72/dc2/f8ec72dc283cffe31d125a50ff401914.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/e0a/e20/416/e0ae20416c6c0f8fcf6c3af6e0812a91.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/2ea/d05/3b3/2ead053b3ce4df28b12b6f5ca9f21874.png', 'https://habrastorage.org/getpro/habr/branding/b25/c21/b0c/b25c21b0cbc0844e892412540a28307e.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/8ad/4b0/a65/8ad4b0a6518e5b05323769727e381a2e.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/dc4/0e7/eb9/dc40e7eb979f35852d69364bfb7f8b4c.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/751/d34/1af/751d341afb87ead7a25e3a5dff61943b.png']"
5'720252'Почему сайт не почему… Главная ошибка UX/UI + чек-лист для повышения конверсии'Всем привет! Я разрабатываю веб- и графические дизайны, фирменный стиль и сайты «под ключ», а так же взлетающие страницы: )) —  Лендинги. К нам часто обращаются клиенты с проблемой «сайт не...'https://habr.com/ru/post/720252/'"Всем привет! Я разрабатываю веб- и графические дизайны, фирменный стиль и сайты «под ключ», а так же взлетающие страницы: )) — Лендинги.

К нам часто обращаются клиенты с проблемой «сайт не продает». Трафик на сайт идет, в проект вложены деньги, но лидов нет и он не окупается. В этой статье я расскажу, почему так происходит и дам рекомендации, как наконец заставить сайт продавать за вас и перестать тратить рекламный бюджет впустую.

Главная причина – непонимание UX/UI

Давайте откровенно. Если сайт не продает, значит что-то пошло не так на этапах проектирования и сборки. Чаще всего неудачные проекты создают люди, которые не знают принципов UX/UI. Почему кнопка должна быть расположена справа, а форма захвата под третьим экраном? Ну, вот у М. Видео так. Они не ответят внятно на ваш вопрос. Это как если построить дом из подручных материалов без проекта. Скорее всего потолок упадет на голову.

Главная ошибка – сэкономить, доверить свой проект самоучке, который не понимает базовых принципов UX/UI и не желает отвечать за результат своей работы.

Также проблемы могут быть в:

неправильно определенной целевой аудитории;

непонятном позиционировании продукта;

отсутствии продающих триггеров на сайте;

хаотичной структуре целевой страницы;

размытой упаковке смыслов.

Так что делать, если сайт не продает? Пройтись по чек-листу

Для начала не паниковать. Любой проект можно реанимировать. Для этого я предлагаю вам прямо сейчас открыть сайт, проанализировать его по чек-листу ниже и самостоятельно внести правки.

Итак, поехали:

1. Оцените ситуацию, какая конверсия сайта сейчас. И поставьте цель, какую конверсию хотите после внесения изменений.

2. Зайдите в систему аналитики и определите самую слабую страницу, где ниже всего конверсия и высокий показатель отказов. Если у вас лендинг, то пропустите этот пункт.

3. Оцените скорость загрузки страницы. Оптимально – 1-2 секунды. Если скорость загрузки больше 3 секунд, то пользователи могут уходить, не дождавшись открытия страницы.

4. Посмотрите сайт на разных устройствах. И на смартфонах, и на ноутбуках, планшетах страница должна быть адаптивной, а верстка красивой без перекосов.

5. Изучите структуру страницы. Один информационный блок должен как бы перетекать в другой. Правильная структура едина и логична. По заголовкам и подзаголовкам пользователь должен понять, что ему предлагают и на каких условиях.

6. Посмотрите, есть ли на странице интуитивно понятные иконки. Они должны сопровождать текстовые пункты везде, где это возможно.

7. Попробуйте сами совершить целевые действия, которые ждете от пользователей. Удобно ли это делать, сколько времени занимает, работает ли?

8. Прочитайте, что у вас написано на первом экране. Нужно сделать так, чтобы по слогану, логотипу, заголовку, изображениям пользователь за 2-3 секунды понял, что вы предлагаете.

9. Протестируйте активные элементы страницы. Не заставляйте пользователя думать или искать! Кнопки, формы заявки, корзина, контакты должны быть доступны в 1 клик.

10. Выделите главные кнопки ярче, чем остальные элементы сайта. CTA должны привлекать внимание и удобно располагаться на странице.

11. Перестаньте раздражать посетителей. Отключите чрезмерную анимацию и самовоспроизведение медиафайлов, уберите перегруженность страницы.

12. Подстройтесь под паттерны сканирования. Наиболее значимый контент лучше размещать слева страницы или посередине.

13. Проверьте в рекламном кабинете, на какую страницу попадают пользователи после клика по объявлению. Часто бывает, что ссылка битая или ведет не на целевую страницу.

Конечно же, это лишь малая часть рекомендаций для увеличения конверсии продающей страницы. Но внедрив хотя бы несколько пунктов на свой сайт, вы сможете сделать его более удобным и полезным для пользователей. Это обязательно увеличит количество заявок на ваши товары или услуги.

Если у вас не получается пройтись по чек-листу своими руками, то делегируйте эту задачу помощнику. Либо обратитесь к профессионалу, который найдет причины низкой конверсии сайта и доработает проект до желанных KPI.

Кстати, сколько ошибок вы нашли на своем сайте по чек-листу? Пишите в комментариях."'https://habrastorage.org/getpro/habr/upload_files/a0b/9b1/774/a0b9b177447dce9f80ba8c03b9889ec2.webp'"['https://habrastorage.org/getpro/habr/upload_files/a0b/9b1/774/a0b9b177447dce9f80ba8c03b9889ec2.webp', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/r/w32/getpro/habr/avatars/554/ddb/04a/554ddb04abd3bcfd55116e08251a31e9.jpg', 'https://habrastorage.org/getpro/habr/avatars/554/ddb/04a/554ddb04abd3bcfd55116e08251a31e9.jpg']"
6'720184'Как мы выбирали технологию для фронтенда и что из этого вышло'Привет, «Хабр», меня зовут Иван Матвиенко, я несколько лет отвечал за web-технологии в Mango Office, а теперь занимаю должность руководителя направления разработки. В статье хочу рассказать, как мы в...'https://habr.com/ru/post/720184/'"Привет, «Хабр», меня зовут Иван Матвиенко, я несколько лет отвечал за web-технологии в Mango Office, а теперь занимаю должность руководителя направления разработки.

В статье хочу рассказать, как мы в Mango подошли к выбору единой технологии для фронтенда, с какими трудностями столкнулись и что в конце концов из этого вышло. Забегая вперед, скажу, что наш окончательный выбор пал на Angular.

История началась в уже далеком 2016 году. На тот момент основными технологиями были jQuery и библиотека виджетов jQuery UI, которые использовались в нашем самом крупном web-приложении: Личном кабинете Mango Office. Еще один внутренний продукт был написан на ExtJS. Кроме того, некоторые команды экспериментировали с React и AngularJS. Однако использование этих фреймворков и библиотек носило хаотичный характер, и выбор конкретного подхода оставался на усмотрение команды. А о повторном использовании наработок одной команды в другой и речи не было. В связи с этой неопределенностью назрел вопрос унификации стека и выбора технологии для фронта, с которой мы будем жить долгое время.

Выбор технологии

Выбор технологии мы начали с формирования списка требований со стороны продуктовых и технических подразделений. В опросе участвовали отделы продуктов, бизнес-анализа, системного анализа, разработки и тестирования. Первичный список критериев состоял из 31 одного пункта, после отбрасывания не влияющих на выбор осталось 19. Из них 12 были техническими и 7 — от бизнеса. Затем мы попросили подразделения расставить вес критериев по важности. Усреднив, получили вес каждого критерия.

Итоговый список:

Критерий Вес Кросплатформенность. Работа в приложениях на десктопах, смартфонах, планшетах, на платформах Android, iOS, Windows Phone. Работа с touch-устройствами 8,3 % Производительность фреймворка при большом количестве данных 8,3 % Легкая реализация кастомных элементов слоя представления 6,8 % Полноценная документация 6,3 % Базовое быстродействие (без нагрузки в виде большого количества данных) 6,3 % Большая компонентная база 6,3 % Доступность специалистов на рынке 6,3 % Перспективы развития в горизонте 5-10 лет. Риск заморозки работы над фреймворком минимален 5,9 % Наличие инструментов отладка исходного кода, лёгкость локализации ошибок 5,8 % Возможность реализации слоя представления в виде HTML-верстки 5,6 % Низкий порог вхождения для новых сотрудников 5,5 % Наличие механизмов для реализации unit- и авто-тестирования 5,3 % Развитое сообщество 5,0 % Развитая высокоуровневая базовая модель данных инструмента, наличие высокоуровневых шаблонов 3,8 % Отсутствие необходимости программисту работы с DOM-моделью 3,5 % Поддержка стандарта JavaScript ES6+ и TypeScript 3,5 % Низкие трудозатраты при необходимости реализации нестандартных компонентов 3,4 % Локализация приложения в различные иностранные языки 2,7 % Отсутствие ограничивающих лицензий 1,5 %

Сейчас читателю часть критериев может показаться бесполезными, но семь лет назад они были актуальны.

Следующим шагом стало составление списка фреймворков и библиотек для сравнения. В него, с одной стороны, вошли уже используемые в компании, с другой, — лидеры рынка на тот момент. Часть исключили по блокирующим критериям: ограничениям лицензий, непригодности для решения наших задач и другим.

Что в итоге получилось:

AngularJS;

Angular 2;

Backbone;

ExtJS;

React+Backbone;

React+Redux.

От jQuery собирались уходить, поэтому в сравнение он не попал. Также в списке нет Vue. В те годы фреймворк был еще мало распространен, нам не хватало промышленных примеров удачного использования для его рассмотрения. Кроме того, он ничем не выделялся на фоне многочисленных аналогов.

В выборку мы включили Angular 2, потому что он воспринимался как новая версия популярного AngularJS. На момент исследования он находился на стадии Release Candidate. Официальный выпуск произошел осенью 2016, к тому моменту мы в Mango уже вели на нем разработку. Собственно, «молодость» фреймворка была основным риском использования технологии. Но та стратегия развития, которую озвучивала компания Google, и вкладываемые ей ресурсы послужили поводом добавить Angular 2 в наше исследование.

Оценку фреймворков по критериям осуществляли по пятибалльной шкале на основе двух факторов: экспертное мнение разработчиков и архитекторов компании, работавших с несколькими из перечисленных технологий, и публичные исследования и официальные стратегии развития фреймворков.

Итоговый балл вышел следующий:

Технология Средняя оценка с учетом веса критериев Angular 2 4,06 AngularJS 4,00 React+Redux 3,80 React+Backbone 3,61 ExtJS 3,57 Backbone 2,27

В лидерах оказались Angular 2 и AngularJS, и выбор склонялся в пользу первого. Делать ставку на AngularJS было бы не прагматично: Angular 2 приходил ему на смену. Но все же мы явно выписали ключевые риски использования Angular:

Проект быстро закончит развиваться.

Проект будет долгое время нестабильным.

Не было готовых специалистов со знанием стандарта ES6 и языка TypeScript.

Не было хорошей документации.

Не было готовых сторонних компонентов.

Мы приняли эти риски. Angular стал в Mango основной технологией.

Второй этап оценки

Через год мы вернулись к оценке Angular. Хотелось еще раз свежим взглядом оценить, правильно ли был выбран вектор развития. Я вышел на исследование популярности web-технологий от аналитического агентства Developer Nation, выпущенное весной 2017.

Из данных исследования вытекало, что обеими версиями Angular в мире пользуется больше разработчиков, чем React: 21 % против 9 %. Это удивительно, так как по популярности в статьях и оценках на GitHub напрашивался противоположный вывод.

Также выяснилось, что Angular в большей мере предпочитают разработчики с опытом в Enterprise-технологиях, таких как Java или .NET. Это стало еще одним плюсом в пользу нашего выбора.

Внедрение: сложности и решения

Внедрение фреймворка мы начали в двух продуктовых командах. Они активно развивали новые сервисы, и использование новой технологии для них было проще всего. В главном web-проекте — личном кабинете Mango Office — перейти на новую технологию с наскока не получилось бы. В этом продукте внедрять Angular мы начали спустя несколько лет, после того как накопили опыт в других командах.

Личный кабинет Mango Office — это большое фулстек-приложение с бэкендом на PHP и фронтендом на jQuery. У него длинная история — больше 15 лет. Внедрить фронтенд технологии было непросто. Мы стали двигаться в двух направлениях: новые модули стали писать уже на Angular, а в текущем личном кабинете постепенно отказывались от jQuery в пользу React, тем более что пробное использование React уже было запущено. Мы переписывали виджеты с jQuery на React, что позволило постепенно улучшать интерфейс, не уходя надолго в рефакторинг кабинета.

Внедрению фронтенд-технологии сопутствовали изменения в бэкенде. Бэкенд также переписывался на микросервисы, в которые выносилась ключевая бизнес-логика. Фронтенд всегда шел за бэкендом. Перенос бизнес-бизнес логики — дело не быстрое, поэтому и перевод фронта на новую технологию шел не тем темпом, как хотелось бы.

Разумеется, в компании есть продукты, где внедрение такого крупного фреймворка, как Angular, было нецелесообразно. В первую очередь, к ним относятся виджеты, которые встраиваются на сайты клиентов и плагины для других систем (например, CRM). Там мы оставили использование более легковесных Vue и React, а в последствии частично перешли на чистый JavaScript.

Микрофронтенды

Данная тема заслуживает отдельной статьи, затрону ее здесь кратко. На определенном этапе мы пришли к тому, что разработку личного кабинета Mango Office должны вести разные продуктовые команды. На бэкенде благодаря микросервисной архитектуре разделение ответственности между командами произошло легко. На фронте пришлось внедрять микрофронтенды.

Архитектуру микрофронтендов построили на базе модуля Federation @angular-architects/module-federation . Большинство разделов начали встраивать как микрофронтенды. Бонусом такого подхода стало то, что мы смогли гладко встроить в единое приложение модули, написанные на React. Для этого оказалось достаточно завернуть React-приложение в Angular-обертку. Над разработкой модулей-микрофронтендов теперь могли работать разные команды.

Дизайн-система и библиотека компонентов

Внедрение единой технологии для фронтенда упростило внедрение корпоративной дизайн-системы в web-проекты. Разные команды годами пользовались разными библиотеками компонентов. Это усложняло пользовательский опыт и приводило к лишним трудозатратам по унификации UX/UI.

Пару лет назад мы приступили к разработке общей для всей компании библиотеки собственных компонентов в едином стиле Mango. На текущий момент вырос большой UI-kit на Angular и чуть поменьше на React. Этих библиотек хватает для разработки типового интерфейса в личном кабинете Mango Office.

В будущем, возможно, мы выложим наши наработки по дизайн-системе в открытый доступ.

Результаты

Подведем итоги за семь лет.

Большая часть фронтовых команд использует Angular. Треть продолжает писать на React, Vue и чистом JavaScript. Кому-то большой фреймворк не подходит, кому-то нужен чистый JS. Также остается один старый внутренний проект на ExtJS.

Риски, которые мы принимали, выбирая Angular, не сработали.

Разберем результаты:

Проект закончит развиваться. Технология развивается и поддерживается крупными вендорами. На нем написано уже столько кода, что в ближайшие годы окончание поддержки не предвидится.

Нехватка готовых специалистов . Специалистов со знанием Angular на рынке труда достаточно. Среднее время поиска меньше, чем для бэкендеров. Я считаю, это хороший показатель.

Слабое сообщество, документация, мало сторонних библиотек. Сообщество развито, много литературы, оригинальных решений, сторонних библиотек и пр. Конечно, для React всего этого в разы больше, зато для Angular качество в среднем выше.

Какие плюсы мы получили от использования единой технологии:

Angular оказался большим фреймворком, способным закрыть многие потребности команд. Использовать сторонние библиотеки и компоненты приходится редко.

Из первого пункта вытекает простота обновления версий базового фреймворка во всех проектах, что позволяет нам идти в ногу со временем. К использованию единой версии мы еще не пришли, но сделать это в будущем будет не трудно.

Сокращение трудозатрат и унификация интерфейсов за счет единой технологии и дизайн-системы.

Но не все надежды оправдали ожидания. Главный минус — распространение технологии в проектах идет не так быстро, как хотелось бы, и до сих пор не завершено. Причина — не в выбранной технологии, а в том, что переписывание многолетней кодовой базы не всегда целесообразно и рентабельно. Приходится, так сказать, есть слона по кускам.

Послесловие

Я постарался осветить опыт, который компания Mango Office накопила на пути внедрения единой технологии для фронтенда. Моей целью было продемонстрировать, что унификация влечет больше плюсов, чем минусов. Мы начинали с целого «зоопарка» устаревших технологий и пришли к желаемому единообразию. Выбор Angular себя полностью оправдал. Этот фреймворк достоин быть корпоративным стандартом.

Возможно у вас есть истории — успешные или не очень — о внедрении нового фреймворка. Расскажите в комментариях, будет интересно сравнить ваш и наш опыт.

Подписывайтесь на наши соцсети:

Аккаунты Mango Office"'https://habrastorage.org/getpro/habr/upload_files/085/7dc/490/0857dc49066906536a623fd5ab116e60.jpg'"['https://habrastorage.org/getpro/habr/company/14c/d12/8ef/14cd128efcec56e346d1f61c4743d069.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/085/7dc/490/0857dc49066906536a623fd5ab116e60.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/b60/c4c/63a/b60c4c63aabf7ce680f7821866dcd865.png', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/getpro/habr/upload_files/085/7dc/490/0857dc49066906536a623fd5ab116e60.jpg']"
7'720248'Про маркетплейсы и кота в мешке'Большинство читателей Хабра хотя бы раз покупали товары на маркетплейсах и каждый раз эта покупка похожа на игру в лотерею - повезет или не повезет. Ниже будет личное мнение и крик души покупателя,...'https://habr.com/ru/post/720248/'"Большинство читателей Хабра хотя бы раз покупали товары на маркетплейсах и каждый раз эта покупка похожа на игру в лотерею - повезет или не повезет. Ниже будет личное мнение и крик души покупателя, без какой-либо аналитики, но с робкой надеждой, что его может быть услышат.

Одна из причин такой игры в лотерею - это отсутствие документации от производителя. Маркетплейсы, а это, например, Озон, Вилдберис или Алиэкспресс, категорически запрещают продавцам давать ссылки на инструкции от производителей, внешние сайты или группы поддержки в социальных сетях. Впрочем, этим страдают не только маркетплейсы, но и простые интернет-магазины. Вот если вы покупаете электронику, допустим, какие-нибудь транзисторы, в Терраэлектронике или ЧИПиДИПе, то, скорей всего в карточке товара будет стоять даташит от производителя со всеми параметрами. А если покупаете в Озоне или на Алиэкспрессе, то в карточке товара будет только то, что продавец в меру своих возможностей и понимания смог переписать в карточку из даташита. В последнее время на Озоне еще и со знанием русского языка у части продавцов проблемы. Если покупаете лекарство в интернет-аптеке, то содержание обязательного вкладыша в коробке с лекарством совпадает с текстом аннотации на сайте. Но для для сложных товаров на маркетплейсах нет никаких инструкций в карточке товара. Продавец мог бы это сделать, но инструментов для этого нет! Покупатель не хочет покупать кота в мешке, добросовестный продавец не хочет продавать кота в мешке, но маркетологи с разработчиками маркетплейсов считают, что и так сойдет."'https://habrastorage.org/getpro/habr/upload_files/883/158/ada/883158adae29786a073a9f1a3c6b5edc.jpg'"['https://habrastorage.org/getpro/habr/upload_files/883/158/ada/883158adae29786a073a9f1a3c6b5edc.jpg', 'https://habrastorage.org/getpro/habr/avatars/e4d/be0/84e/e4dbe084e741f0d59a8040c000065c0b.gif', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/883/158/ada/883158adae29786a073a9f1a3c6b5edc.jpg', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/a7f/9be/233/a7f9be233e347af7aa0b8b7e815c2544.jpg']"
8'720246'29 вопросов аналитику данных'Герой сегодняшнего интервью - Егор. Егор родом из Читы, но сейчас живет и работает аналитиком данных в Чехии. Что из себя представляет работа аналитика? Как нашёл первую работу? Какие плюсы и минусы...'https://habr.com/ru/post/720246/'"Герой сегодняшнего интервью - Егор. Егор родом из Читы, но сейчас живет и работает аналитиком данных в Чехии.

Что из себя представляет работа аналитика?

Как нашёл первую работу?

Какие плюсы и минусы жизни Чехии?

Эти и другие вопросы мы зададим нашему герою.

Буду благодарен, как за положительную, так и за отрицательную обратную связь по интервью. Критика поможет делать дальнейший материал лучше.

Также, если вы хотите стать героем интервью и рассказать о своей работе, пишите мне в ТГ @skaynet88

Начинаем!)

1. Добрый день! Меня зовут Роман Гильберт, позвольте в общих чертах сформировать образ о вас. Расскажите о себе?

Здравствуйте! Меня зовут Егор. Мне 24 года.

По образованию я чистый экономист — бакалавриат питерской НИУ ВШЭ по специальности экономика и магистратура в чешско-американском университете по направлению «Экономические исследования», в относительно скором времени надеюсь получить PhD (аналог кандидата\доктора наук) в экономике.

В плане хобби все довольно стандартно :) — книги, фильмы, игры, сериалы и программирование с уклоном в анализ данных. В основном увлекаюсь фэнтези и фантастикой. Например, книги Джо Аберкромби по миру Первого закона (особенно «Герои» и «Лучше подавать холодным»), «Память, что зовется империей» Аркади Мартин, цикл о Киллерботе Марты Уэллс и цикл Пожиратель солнца Кристофера Руоккио. Из игр предпочитаю стратегии и РПГ, например Total War, Warhammer и Divinity Original Sin 2. Сериалы я люблю либо по-мрачнее (первый сезон Настоящего Детектива) или, наоборот, комедии (Бруклин 9-9 и Друзья). В данный момент я работаю на python, соответственно и изучаю в основном его. Но в планах изучение julia – я им пользовался несколько лет, и мне интересно, как этот язык будет развиваться.

Глобальная цель у меня одна — хорошо жить :) Для меня под этим понимается наличие семьи, жилья и возможность работать над тем, что лично мне интересно. В данный момент выполнен полностью последний пункт, практически выполнен первый.

2. Почему именно аналитика данных?

На самом деле, еще до поступления в вуз я хотел стать аудитором с уклоном в бухгалтерский учет. Это желание существовало ровно до первого моего курса по бухучету, который его напрочь отбил. В то же время, у меня были курсы по анализу данных (в формате вводного курса по R и более профильных курсов по статистике и эконометрике), которые мне нравились и которые мне давались относительно легко. Мне в принципе нравится копаться в данных, находить закономерности и, как это ни странно, делать отчеты, в том числе строить графики.

3. Что из себя представляет работа аналитиком данных? Прошу ответить так, чтобы было понятно человеку из любой сферы деятельности.

Лично для меня, работа аналитиком данных — это постоянный поиск развернутого ответа на вопрос. Вообще, в аналитике все начинается с вопроса. Как работает ценообразование на рынке автомобилей? Как поведут себя производители в ответ на дополнительные субсидии? Аналитик должен выдвинуть обоснованное предположение, проверить его с помощью данных, и убедить остальных в том, что он прав. Так что работа состоит из

1. Поиска данных и «вникания» в них;

2. Выдвижения гипотез и их проверка;

3. Презентации результатов.

4. Как вы нашли свою первую работу в этой сфере?

На самом деле, первую работу я нашел достаточно легко, хоть и не совсем самостоятельно.) Я поговорил с преподавателем в своем университете по поводу поиска работы. Она предложила послать мое резюме в компанию, с которой раньше работала и дать мне рекомендацию. После этого у меня было интервью с главой отдела аналитики — нужно было решить одну из задач, которые возникали перед компанией в прошлом. По моему опыту, не столько важны качество кода и полнота решения, сколько хорошая идея (те самые предположения) — опыт работы с python у меня тогда был примерно в месяц, а вот идей было много.) После прохождения этого интервью у меня были собеседования с главой и сотрудниками конкретного отдела, в котором мне предстояло работать. Судя по результату, я все успешно прошел и начал работу.

5. Чем занимается ваша компания, где вы сейчас работаете?

Компания, в которой я работаю занимается торговлей на рынках электроэнергии в Европе и США. То есть мы заключаем контракты на покупку электроэнергии с электростанциями и потом продаем электричество либо на бирже, либо заключаем контракт на поставку с потребителем энергии (например городом или фабрикой).

6. Вы в Чехии родились или переехали? Если переехали, расскажите об этом подробнее

В Чехию я переехал после бакалавриата в 2020 году, оригинально я из Читы — это город в Забайкалье. Во время бакалавриата многие преподаватели работали также в Пражском университете и отзывались о нем достаточно хорошо. Это заинтересовало меня и моего друга — мы посмотрели, какие программы предлагаются и на каких условиях. Оказалось, что программа магистратуры и PhD (программа сдвоенная — первые два года PhD являются полной магистратурой) идеально стыкуются с нашим бакалавриатом. Относительно большая стипендия тоже сыграла свою роль.) Так что было принято решение пытаться поступить в этот вуз, что и было успешно сделано. В целом, переезд был относительно быстрым, хотя и нервным — все-таки я первый раз уезжал жить в другую страну. Помогла моя девушка, которая поехала со мной, и прекрасная поддержка иностранных студентов со стороны моего университета.

7. Насколько сильно отличается менталитет в Чехии от менталитета РФ?

На самом деле я не могу хорошо ответить на этот вопрос — мой круг общения состоит в основном из иностранцев. По моему опыту, в целом не сильно чешский менталитет отличается от русского. Хотя есть и довольно заметные отличия — Чехи более экспрессивные как по мне.

8. Сложнее ли учить чешский язык по сравнению с тем же английским языком?

Я на самом деле практически не учил английский — в школе я изучал немецкий, а английский «изучал» по играм, сериалам. Позже по учебникам и статьям по экономике и живому общению. Лично для меня английский был довольно легким. А вот с чешским неоднозначные у меня отношения — с одной стороны он похож на русский (много похожих слов и правил), с другой стороны язык довольно сложный с большим количеством «не вполне четких» (по типу в 90% случаев верно, но есть еще 10%, в которых нет, и системы в этом нет)) правил. Но я надеюсь в конце концов изучить чешский частично в живом общении, частично с помощью репетитора\курсов.

9. Как вам культура в Чехии?

Мне в целом нравится — я вообще люблю средневековье, а Прага им пропитана насквозь. Конечно, все мне пока что не доступно из-за незнания языка, но это дело поправимое.) Здесь довольно много событий, так что найти культурное событие не составляет труда. В плане именно поведения людей, здесь очень популярны занятие бегом, собаки и походы в горы.

10. Какие плюсы и минусы жизни в Чехии?

С моей точки зрения есть несколько плюсов:

1. Это не так далеко от России, так что раньше можно было довольно быстро добраться до Санкт-Петербурга или Москвы;

2. Довольно много людей, которые говорят на русском;

3. Чешский сам по себе можно понимать на базовом уровне со знанием русского\украинского;

4. Чехия расположена довольно удобно: легко добраться до Италии, Германии, Франции и т. д. - легко путешествовать;

5. У многих международных компаний есть офисы в Праге — относительно легко трудоустроится в них.

11. Сколько стоит жизнь в Чехии?

По моему опыту, Чехия — это не самая бюджетная страна, особенно сейчас из-за инфляции (хотя крона сейчас укрепилась, так что покупать в Германии за евро можно относительно дешево).

Основная статья расхода — жилье. Квартиру в Праге сейчас снять можно от 900-1000 евро (20-25т крон по курсу 23.37 крон за евро). Плюс ЖКХ в районе 170-200 евро (сумма различается в зависимости от энерго-эффективности дома и типа отопления (газ, вода, электричество). В данный момент приходят довольно большие перерасчеты за оплату ЖКХ за 2022 год. Цены на ЖКХ конечно стали меньше, чем в 2022, но все еще больше чем в 2021, так что месячные платежи за ЖКХ скорее всего будут больше при заключении контракта на съем жилья в этом году.

Продукты на неделю по моему опыту выходят на примерно 40 евро. Эта сумма конечно сильно зависит от индивидуальных предпочтений и готовности вылавливать продукты по скидкам. Бизнес-ланчи стоят примерно 8-10 евро за достаточно большую порцию еды.

Проездной на месяц в Праге стоит 24 евро (дает право ездить на любом транспорте в центральных районах Праги, если нужно выезжать в пригород, то будет дороже). Сотовая связь и мобильный интернет стоят в районе 30 евро в зависимости от тарифа и оператора. Интернет в квартиру стоит 20-25 евро.

В целом в Чехии много скидок для студентов. Например, проездной стоит 4 евро, связь выйдет в 18 евро. Общежития хоть и подняли цены на проживания, но не так же сильно как арендодатели. В общежитии, в котором я жил, сейчас снять место в комнате для двоих стоит 6 евро в день (если вы собираетесь жить там не меньше года).

12. Теперь более о вашей профессиональной деятельности. Какие задачи сейчас решает аналитика данных?

В целом, задача аналитика разобраться в вопросе и предоставить его анализ. Это может заключаться как в описании определенного события или объекта (например цен на электричество), так и в решении определенной проблемы: расчет финансового показателя, оценка возможного эффекта какого-либо нововведения (например увеличения налога), оценка прибыльности существующей стратегии\продукта и т. п. Также аналитик часто помогает техническим специалистам, если им требуется экспертиза: например программист разрабатывает приложение для отслеживания прибыли, а аналитик советует

13. Нужно ли высшее образование аналитику данных? Требуется ли оно при трудоустройстве?

В некоторых случаях, высшее образование может быть заменено опытом работы. Но это работает только при переходе на должность аналитика с другой специальности. У всех моих коллег есть по крайней мере степень бакалавра. По моему мнению высшее образование нужно аналитику данных, так как оно показывает

1. Умение самостоятельно разбираться в теме

2. Усидчивость

3. Умение мыслить в определенном ключе (например в терминах предельных издержек\прибылей) и знакомство с контекстом.

14. Насколько важно знание языков программирования для аналитика данных?

Зависит от места и специфики работы. Excel является довольно мощным инструментом, которые позволяет сделать многое. Но он имеет свои ограничения, так что знание либо языков, специализированных для анализа данных (например R), либо языков общего программирования (здесь конечно лидером выступает python) определенно является плюсом. Также стоит быть морально готовым к работе с контейнерами, базами данных и unix системами.

15. Как вы изучали Python?

У меня был короткий вводный курс в python во время бакалавриата. После этого я пользовался в основном R и julia, так что забыл практически все, что узнал на этом курсе. Восстанавливал я знания уже самостоятельно по видео на youtube и учебникам\гайдам. Также помогла ежедневная практика на работе (в частности помощь более опытных коллег).

16. Как вы изучали SQL?

SQL я изучал на stepik и на личном опыте. Но я в целом использую только базовые функции, а все сложные преобразования делаю уже в python. Так что я определенно не эксперт в SQL.)

17. Нужно ли аналитику данных знание иностранных языков и если нужно, то какие преимущества это дает?

Я считаю, что знание языков никому не повредит. Как минимум, это значительно увеличивает список потенциальных работодателей. Плюс значительное количество учебных материалов на английском языке поможет быстрее разобраться в любом вопросе (и я даже не говорю о том, что практически вся документация по языкам программирования на английском). Для международной компании знание по крайней мере английского является вообще требованием и необходимостью. Я занимаюсь анализом для немецкого рынка, так что знание немецкого является плюсом.

18. Насколько часто пригождаются университетские знания при работе аналитиком?

Лично я ими пользуюсь каждый день.) В основном знаниями по эконометрике и статистике, но и экономическая теория помогает. Например, мне было необходимо подготовить отчет о возможном влиянии определенной реформы на поведения агентов на рынке. Но это конечно может сильно зависеть от образования и специфики работы.

19. В чем плюсы и недостатки работы аналитиком данных?

Плюсы (лично для меня)):

1. Интересные задачи

2. Можно подстроить работу под интересную лично тебе область: больше анализа данных, либо больше программирования

3. Знания, полученные на работе, можно применять и в повседневной жизни

4. Работа поощряет общение с людьми и обмен мнениями

Субъективные минусы:

1. Относительно часто встречаются монотонные задачи

2. Иногда требуются переработки

20. Где удалось поработать? С какими проектами/задачами встретиться?

Я работал над нескольким проектами. Самым большим была разработка приложения для оценивания определенных объектов. В приложение поставлялся определенный набор данных, оно их обрабатывало и выдавало честную цену, по которой мы были готовы его приобрести. Я работал над самой программой, а не интерфейсом. Это был мой первый и самый познавательный проект — я научился довольно многому в плане работы с сырыми данными и лучших практик написания кода. Также я занимался анализом открытых позиций на различных биржах электроэнергии. Например, я оценивал насколько вырастет требование к залогу от биржи при повышении цен на электричество.

21. Есть ли какие-нибудь особенности, что отличают работу аналитика данных от всех остальных профессий?

Как мне кажется, особенность именно аналитики данных в необходимости как в умении находить ответ на вопрос, так и хорошо его презентовать. Так что аналитика данных требует как hard так и soft skills. Плюс аналитику данных зачастую требуется разбираться во многих областях одновременно. Полезно знать не только технический аспект анализа, но и разбираться в индустрии, с которой связана работа. Например, знать то, как работают электростанции и линии электропередач, как добывается уголь и газ при работе с рынками электроэнергии.

22. Ваша работает требует от вас постоянного нахождения в офисе или вполне себя хорошо чувствуете на удаленке?

Очень хорошо чувствую себя на удаленке.) В принципе, аналитик данных может работать самостоятельно. Конечно, нахождение в офисе полезно для вливания в коллектив и обмена мнениями (можно спросить совета у более опытных коллег, просто обсудить проблему с кем-то довольно часто помогает взглянуть на нее под другим углом и найти решение). Но в целом работа на полностью удаленной основе вполне возможно.

23. Сколько можно зарабатывать аналитиком данных в РФ и зарубежом?

Я зарабатываю больше среднего для Чехии. Мои друзья в России на похожих позициях также не испытывают потребности в финансах по моему опыту.

24. Стоит ли идти в аналитику данных, не имея математической и «программерской» базы?

Конечно.) Я не считаю себя особо хорошим математиком, но я не испытываю особых проблем. Изначально низкое знание python также не было особой проблемой. Для аналитика данных скорее важно умение четко мыслить и реализовывать свои идеи на практике.

25. К примеру, я являюсь смышленым человеком средней эрудиции, но без необходимых компетенций для позиции аналитика данных. С чего мне начать, какие источники взять за основу, чтобы освоить вашу профессию?

Лично мне помог данный курс на Stepik по SQL и данный гайд по python (на английском). Также мне нравятся данные каналы на youtube: ArjanCodes, Диджитализируй. Иногда также смотрю RobMulla. Но основа моих знаний была получена на бакалавриате и магистратуре.

26. Сложнее ли стало найти работу аналитиком данных в 2023?

На этот вопрос я ответить не могу — не менял работу в этом году.)

27. На что обращают внимание работодатели при собеседовании в вашей сфере? Технические или коммуникативные навыки в приоритете?

В моей компании 30 на 70 — технические навыки можно подтянуть (даже довольно быстро в зависимости от задач), а вот коммуникативные навыки улучшить сложнее. А аналитик, которые не умеет объяснить свои идеи или результаты, не особо полезен.

28. Сейчас с каждого утюга предрекают восстание машин и замену людского умственного труда интеллектом искусственным. Как считаете, можно ли вашу рабочую деятельность полностью автоматизировать и отдать ИИ?

На основе собственного опыта могу сказать, что нет.) Я пробовал и chatGPT и copilot и его аналоги. Они облегчают работу, но не могут заменить человека. Copilot нужен человек, которые будет встраивать его функции в общий фреймворк. Аналитик данных часто работает с уникальными задачами, в которых нужна человеческая смекалка и мышление.)

29. Что можете посоветовать тем людям, что хотят стать аналитиком данных в 2023?

Я могу посоветовать не бояться попробовать себя в этой области. Это довольно интересно и увлекательно. Плюс можно начать с совершенно обыденных вещей: к примеру, мой коллега самостоятельно записывает данные о своем весе и самочувствии, а потом смотрит, как они меняются в течение года, есть ли какая-то сезональность, что на них влияет.)

Мой канал в телеграмм

Если интервью показалось вам интересным, то буду благодарен за подписку на мой

канал IT-старт t.me/it_begin

где я также публикую обзоры технической литературы, интервью и иную полезную информацию как для действующих, так и для начинающих программистов

Также публикую обзоры книг и интервью на сайте https://russia-it.ru"'https://habrastorage.org/getpro/habr/upload_files/739/2eb/37a/7392eb37aa140e8e9198d741cbe987bc.png'"['https://habrastorage.org/r/w32/getpro/habr/avatars/0b9/e6d/8e3/0b9e6d8e3ab0c17789ce0fb32a1225d7.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/739/2eb/37a/7392eb37aa140e8e9198d741cbe987bc.png', 'https://habrastorage.org/getpro/habr/avatars/0b9/e6d/8e3/0b9e6d8e3ab0c17789ce0fb32a1225d7.jpg', 'https://habrastorage.org/getpro/habr/upload_files/739/2eb/37a/7392eb37aa140e8e9198d741cbe987bc.png', 'https://mc.yandex.ru/watch/24049213']"
9'720044'[Перевод] Sealed классы Java в действии: создание надежных и безопасных приложений'Sealed (закрытые или запечатанные) классы были представлены в Java 15 в качестве способа ограничить иерархию наследования класса или интерфейса. Sealed класс или интерфейс ограничивает набор классов,...'https://habr.com/ru/post/720044/'"Sealed (закрытые или запечатанные) классы были представлены в Java 15 в качестве способа ограничить иерархию наследования класса или интерфейса.

Sealed класс или интерфейс ограничивает набор классов, которые могут наследовать или реализовывать его, что может помочь предотвратить потенциальные ошибки и сделать код более удобным в сопровождении.

Предположим, вы создаете приложение для онлайн магазина, поддерживающее несколько разных способов оплаты, а именно кредитные карты, PayPal и биткоины. Вы можете определить sealed класс PaymentMethod , который имеет список допустимых подклассов (после ключевого слова permits ) под каждый метод оплаты:

public sealed class PaymentMethod permits CreditCard, PayPal, Bitcoin { // Члены класса }

В этом примере PaymentMethod — это sealed класс, который позволяет CreditCard, PayPal и Bitcoin расширять его. Sealed класс может разрешить любому количеству классов расширить его, указав их в списке, разделенном запятыми, после ключевого слова permits .

И это только один пример того, как использование sealed класса может облегчить нашу жизнь.

Итак, давайте разбираться!

Создание иерархии закрытого типа

Sealed классы могут создавать иерархию закрытого типа. Речь идет об ограниченном наборе классов, которые не могут быть расширены или реализованы вне определенного пакета.

Это гарантирует, что могут быть использованы только классы из определенного набора, и предотвращает нежелательные расширения или реализации.

package ca.bazlur public sealed class Animal permits Cat, Dog { // Определение класса } public final class Cat extends Animal { // Определение класса } public final class Dog extends Animal { // Определение класса }

В этом примере Animal является sealed классом, который позволяет расширять его только классам Cat и Dog .

Любая другая попытка расширения Animal приведет к ошибке компиляции.

Создание ограниченного набора реализаций

Sealed классы также могут создавать ограниченный набор реализаций для определенного интерфейса или абстрактного класса. Это нужно, чтобы владельцы интерфейса или абстрактного класса могли контролировать и изменять набор реализаций.

public sealed interface Shape permits Circle, Square { double getArea(); } public final class Circle implements Shape { // Определение класса } public final class Square implements Shape { // Определение класса }

В этом примере Shape — это sealed интерфейс, который позволяет реализовать его только классам Circle и Square .

Это гарантирует, что создать любую другую реализацию Shape будет невозможно.

Улучшение паттерн матчинга в switch-конструкциях

Sealed классы также можно использовать для улучшения паттерн матчинга в операторах ветвления.

Ограничивая набор подтипов, которые могут расширять sealed класс, разработчики могут реализовать паттерн матчинг с исчерпывающими проверками, гарантируя охват всех допустимых подтипов.

public sealed abstract class PaymentMethod permits CreditCard, DebitCard, PayPal { // Определение класса } public class PaymentProcessor { public void processPayment(PaymentMethod paymentMethod, double amount) { switch (paymentMethod) { case CreditCard cc -> { // Обработка платежа кредитной картой } case DebitCard dc -> { // Обработка платежа дебетовой картой } case PayPal pp -> { // Обработка платежа по PayPal } } } }

В этом примере PaymentMethod является sealed классом, который могут расширять классы CreditCard , DebitCard и PayPal .

Метод processPayment в классе PaymentProcessor использует оператор ветвления switch с паттерн матчингом для обработки различных способов оплаты.

Использование sealed класса гарантирует, что оператором switch охватываются все возможные подтипы, благодаря чему мы защищаем себя от еще одной потенциальной ошибки.

Реализация конечного автомата

Sealed классы можно использовать для реализации конечного автомата (или стейт машины) – вычислительной модели, которая определяет поведение системы в ответ на ряд входных данных. В конечном автомате каждое состояние представлено sealed классом, а переход между состояниями реализован с помощью методов, возвращающих новое состояние.

public sealed class State permits IdleState, ActiveState, ErrorState { public State transition(Input input) { // Логика перехода } } public final class IdleState extends State { // Определение класса } public final class ActiveState extends State { // Определение класса } public final class ErrorState extends State { // Определение класса }

В этом примере State является sealed классом, который допускает подклассы IdleState , ActiveState и ErrorState .

Метод transition отвечает за переход между состояниями на основе введенного input .

Использование sealed классов гарантирует, что конечный автомат структурирован должным образом и может быть расширен только ограниченным набором классов.

Создание ограниченного набора исключений

Sealed классы также можно использовать для создания ограниченного набора исключений, которые могут быть сгенерированы методом. Это позволит вам сформировать согласованный набор условий возникновения ошибок и предотвратить создание произвольных типов исключений.

public sealed class DatabaseException extends Exception permits ConnectionException, QueryException { // Определение класса } public final class ConnectionException extends DatabaseException { // Определение класса } public final class QueryException extends DatabaseException { // Определение класса }

В этом примере DatabaseException является sealed классом, который допускает подклассы ConnectionException и QueryException .

Это гарантирует, что любое исключение, генерируемое методом, связанным с операцией над базой данных, имеет четко определенный тип и будет обработано соответствующим образом.

Управление доступом к конструкторам

Sealed классы также могут управлять доступом к конструкторам, что позволяет реализовать определенный набор инвариантов для класса.

public sealed class Person { private final String name; private final int age; private Person(String name, int age) { this.name = name; this.age = age; } public static final class Child extends Person { public Child(String name, int age) { super(name, age); if (age >= 18) { throw new IllegalArgumentException(""Children must be under 18 years old.""); } } } public static final class Adult extends Person { public Adult(String name, int age) { super(name, age); if (age < 18) { throw new IllegalArgumentException(""Adults must be 18 years old or older.""); } } } }

В этом примере Person — это sealed класс с двумя подклассами: Child и Adult .

Конструкторы для классов Child и Adult указаны как public , а конструктор для Person указан как private , в результате чего создание инстансов Person возможно только через его подклассы.

Это позволяет Person обеспечить соблюдение инварианта о том, что дети должны быть моложе 18 лет, а взрослым должно быть 18 лет или больше.

Повышение безопасности кода

Sealed классы также могут повысить безопасность кода, гарантируя, что только доверенный код может расширять или реализовывать их. Это может помочь предотвратить несанкционированный доступ к конфиденциальным частям вашей кодовой базы.

public sealed class SecureCode permits TrustedCode { // Определение класса } // Надежный код public final class TrustedCode extends SecureCode { // Определение класса } // Ненадежный код public final class UntrustedCode extends SecureCode { // Определение класса }

В этом примере SecureCode является sealed классом, который допускает только подкласс TrustedCode .

Это помогает нам гарантировать, что только доверенный код может получить доступ к конфиденциальным частям кодовой базы.

Полиморфизм с исчерпывающим паттерн матчингом

Sealed классы также можно использовать для реализации полиморфизма с исчерпывающим паттерн матчингом.

С помощью sealed классов, разработчики могут гарантировать, что все возможные подтипы охватываются оператором с паттерн матчингом, что позволяет создавать более безопасный и эффективный код.

public sealed class Shape permits Circle, Square { // Определение класса } public final class Circle extends Shape { // Определение класса } public final class Square extends Shape { // Определение класса } public void drawShape(Shape shape) { switch (shape) { case Circle c -> c.drawCircle(); case Square s -> s.drawSquare(); } }

В этом примере Shape — это sealed класс, который позволяет классам Circle и Square расширять его.

Метод drawShape использует паттерн матчинг для отрисовки фигуры, гарантируя, что все возможные подтипы Shape охватываются оператором switch .

Повышение читабельности кода

Sealed классы также можно использовать для улучшения читабельности кода за счет четкого определения набора возможных подтипов.

Ограничивая набор возможных подтипов, разработчикам легче анализировать код и понимать его поведение.

public sealed class Fruit permits Apple, Banana, Orange { // Определение класса } public final class Apple extends Fruit { // Определение класса } public final class Banana extends Fruit { // Определение класса } public final class Orange extends Fruit { // Определение класса }

В этом примере Fruit — это sealed класс, который допускает подклассы Apple , Banana и Orange .

Таким образом мы четко определяем набор допустимых фруктов и повышаем читабельность кода, облегчая его понимание.

Соблюдение контрактов API

Sealed классы также можно использовать для обеспечения соблюдения контрактов API, которые представляют собой набор ожиданий потребителей API в отношении его поведения.

Используя sealed классы, поставщики API могут гарантировать, что набор возможных подтипов четко определен и задокументирован, что повышает удобство использования и поддерживаемость API.

public sealed class Vehicle permits Car, Truck, Motorcycle { // Определение класса } public final class Car extends Vehicle { // Определение класса } public final class Truck extends Vehicle { // Определение класса } public final class Motorcycle extends Vehicle { // Определение класса }

В этом примере Vehicle — это sealed класс, который позволяет расширять его классам Car , Truck и Motorcycle .

Используя sealed класс для определения набора возможных типов транспортных средств, поставщики API могут гарантировать, что контракт API четко определен и может быть соблюден.

Предотвращение нежелательных расширений подтипов

Наконец, sealed классы также можно использовать для предотвращения нежелательных расширений подтипов.

Ограничивая набор возможных подтипов, разработчики могут предотвратить создание произвольных подклассов, которые не согласуются с предполагаемым поведением класса.

public sealed class PaymentMethod { // Определение класса } public final class CreditCard extends PaymentMethod { // Определение класса } public final class DebitCard extends PaymentMethod { // Определение класса } public class StolenCard extends PaymentMethod { // Определение класса }

В этом примере PaymentMethod является sealed классом, который не позволяет никаким подтипам расширять его.

Это предотвращает создание класса StolenCard , который не соответствует предполагаемому поведению класса PaymentMethod .

Повышение типобезопасности коллекций

Sealed классы также могут способствовать повышению типобезопасности коллекций, которые являются фундаментальной частью языка Java.

Используя sealed классы для определения набора возможных элементов в коллекции, разработчики могут гарантировать, что коллекция является типобезопасной и может энфорсить определенные инварианты.

public sealed interface Animal permits Dog, Cat, Bird { // Определение интерфейса } public final class Dog implements Animal { // Определение класса } public final class Cat implements Animal { // Определение класса } public final class Bird implements Animal { // Определение класса }

В этом примере Animal — это sealed интерфейс, который позволяет реализовать его классам Dog , Cat и Bird .

Используя sealed классы для определения набора возможных животных, разработчики могут гарантировать, что коллекция животных будет типобезопасной и может энфорсить определенные инварианты.

List<!--? extends Animal--> animals = List.of(new Dog(), new Cat(), new Bird());

В этом примере animals — это список, содержащий элементы, которые расширяют интерфейс Animal .

Поскольку Animal — sealed интерфейс, набор возможных элементов в списке четко определен и типобезопасен.

Содействие развитию API

Sealed классы также могут способствовать развитию API, то есть обновлению API путем добавления или удаления фич.

Используя sealed классы для определения набора возможных классов, которые могут расширять или реализовывать определенный класс или интерфейс, разработчики могут обеспечить совместимость изменений API с существующим кодом.

public sealed class Animal permits Dog, Cat { // Определение класса } public final class Dog extends Animal { // Определение класса } public final class Cat extends Animal { // Определение класса } public final class Bird extends Animal { // Определение класса }

В этом примере Animal — это sealed класс, который позволяет Dog и Cat расширять его.

Поскольку Animal является sealed классом, добавление нового подтипа Bird будет критическим изменением и потребует изменения версии API.

Таким образом мы гарантируем совместимость изменений API с существующим кодом, что помогает нам поддерживать стабильность кодовой базы.

Вот еще несколько более конкретных и реальных примеров того, как sealed классы можно использовать в Java-разработке:

Представление различных типов сообщений

Во многих распределенных системах данные между различными компонентами или сервисами передаются посредством сообщений.

Sealed классы могут представлять различные типы сообщений и гарантировать, что каждый тип структурирован должным образом и типобезопасен.

public sealed interface Message permits RequestMessage, ResponseMessage { // Определение интерфейса } public final class RequestMessage implements Message { // Определение класса } public final class ResponseMessage implements Message { // Определение класса }

В этом примере Message — это sealed интерфейс, который позволяет классам RequestMessage и ResponseMessage реализовать его.

Используя sealed классы, разработчики могут гарантировать, что каждый тип сообщения является четко определенным и типобезопасным, что может помочь предотвратить ошибки и повысить удобство сопровождения кода.

Определение набора доменных объектов

В предметно-ориентированном проектировании (DDD) доменные объекты представляют концепции и сущности предметной области.

Sealed классы могут определять набор доменных объектов и гарантировать, что каждый тип объекта четко определен и имеет ограниченный набор возможных подтипов.

public sealed interface OrderItem permits ProductItem, ServiceItem { // Определение интерфейса } public final class ProductItem implements OrderItem { // Определение класса } public final class ServiceItem implements OrderItem { // Определение класса }

В этом примере OrderItem — это sealed интерфейс, который позволяет классам ProductItem и ServiceItem реализовать его.

Используя sealed классы, разработчики могут гарантировать, что каждый доменный объект четко определен и имеет ограниченный набор возможных подтипов, что может помочь предотвратить появление ошибок и сделать код более удобным в сопровождении.

Представление различных типов пользователей

Во многих системах пользователи представляют собой лиц, так или иначе взаимодействующих с системой. Sealed классы могут представлять разные типы пользователей и гарантировать, что каждый тип структурирован должным образом и типобезопасен.

public sealed class User permits Customer, Employee, Admin { // Определение класса } public final class Customer extends User { // Определение класса } public final class Employee extends User { // Определение класса } public final class Admin extends User { // Определение класса }

В этом примере User — это sealed класс, который позволяет допускает подклассы Customer , Employee и Admin .

Используя sealed классы, разработчики могут гарантировать, что каждый пользовательский тип четко определен и типобезопасен, что может помочь предотвратить ошибки и сделать код более удобным в сопровождении.

Определение ограниченного набора типов ошибок

Во многих системах ошибки сигнализируют о том, что во время выполнения программы что-то пошло не так.

Sealed классы могут определять ограниченный набор типов ошибок и гарантировать, что каждый тип четко определен и имеет ограниченный набор возможных подтипов.

public sealed class Error permits NetworkError, DatabaseError, SecurityError { // Определение класса } public final class NetworkError extends Error { // Определение класса } public final class DatabaseError extends Error { // Определение класса } public final class SecurityError extends Error { // Определение класса }

В этом примере Error — это sealed класс, который позволяет классам NetworkError , DatabaseError и SecurityError расширять его.

Используя запечатанные классы для определения ограниченного набора типов ошибок, разработчики могут гарантировать, что каждый тип ошибки четко определен и имеет ограниченный набор возможных подтипов, что может помочь сделать код более удобным в сопровождении и более простым для понимания.

Определение ограниченного набора HTTP-методов

Во многих веб-приложениях взаимодействие с веб-ресурсами происходит посредством HTTP-методов.

Sealed классы могут определять ограниченный набор HTTP-методов и гарантировать, что каждый метод четко определен и имеет ограниченный набор возможных подтипов.

public sealed class HttpMethod permits GetMethod, PostMethod, PutMethod { // Определение класса } public final class GetMethod extends HttpMethod { // Определение класса } public final class PostMethod extends HttpMethod { // Определение класса } public final class PutMethod extends HttpMethod { // Определение класса }

В этом примере HttpMethod — это sealed класс, который позволяет классам GetMethod , PostMethod и PutMethod расширять его.

Используя sealed классы для определения ограниченного набора HTTP-методов, разработчики могут гарантировать, что каждый метод четко определен и имеет ограниченный набор возможных подтипов.

Это может помочь сделать код более удобным в сопровождении и более простым для понимания.

Определение ограниченного набора параметров конфигурации

Во многих системах для управления поведением программы используются специальные параметры конфигурации.

Sealed классы могут определять ограниченный набор параметров конфигурации и гарантировать, что каждый параметр четко определен и имеет ограниченный набор возможных подтипов.

public sealed class ConfigurationParameter permits DebugMode, LoggingLevel { // Определение класса } public final class DebugMode extends ConfigurationParameter { // Определение класса } public final class LoggingLevel extends ConfigurationParameter { // Определение класса }

В этом примере ConfigurationParameter является sealed классом, который позволяет классам DebugMode и LoggingLevel расширять его.

Используя sealed классы для определения ограниченного набора параметров конфигурации, разработчики могут гарантировать, что каждый параметр четко определен и имеет ограниченный набор возможных подтипов.

Это может помочь сделать код более удобным в сопровождении и более простым для понимания.

Определение ограниченного набора стратегий доступа к базе данных

Во многих системах для хранения и извлечения данных используются базы данных.

Sealed классы могут определять ограниченный набор стратегий доступа к базе данных и гарантировать, что каждая стратегия четко определена и имеет ограниченный набор возможных подтипов.

public sealed class DatabaseAccessStrategy permits JdbcStrategy, JpaStrategy, HibernateStrategy { // Определение класса } public final class JdbcStrategy extends DatabaseAccessStrategy { // Определение класса } public final class JpaStrategy extends DatabaseAccessStrategy { // Определение класса } public final class HibernateStrategy extends DatabaseAccessStrategy { // Определение класса }

В этом примере DatabaseAccessStrategy — это sealed класс, который допускает подклассы JdbcStrategy , JpaStrategy и HibernateStrategy .

Используя sealed классы для определения ограниченного набора стратегий доступа к базе данных, разработчики могут гарантировать, что каждая стратегия четко определена и имеет ограниченный набор возможных подтипов, что может помочь сделать код более удобным в сопровождении и более простым для понимания.

Определение ограниченного набора методов аутентификации

Во многих системах для проверки личности пользователей используется аутентификация.

Sealed классы могут определять ограниченный набор методов аутентификации и гарантировать, что каждый метод четко определен и имеет ограниченный набор возможных подтипов.

public sealed class AuthenticationMethod permits PasswordMethod, TokenMethod, BiometricMethod { // Определение класса } public final class PasswordMethod extends AuthenticationMethod { // Определение класса } public final class TokenMethod extends AuthenticationMethod { // Определение класса } public final class BiometricMethod extends AuthenticationMethod { // Определение класса }

В этом примере AuthenticationMethod является sealed классом, который позволяет PasswordMethod , TokenMethod и BiometricMethod расширять его.

Используя sealed классы для определения ограниченного набора методов аутентификации, разработчики могут гарантировать, что каждый метод четко определен и имеет ограниченный набор возможных подтипов.

Это может помочь сделать код более удобным в сопровождении и более простым для понимания.

Заключение

В заключение, sealed классы Java — это мощная фича, которая может помочь вам создать более надежный и удобный в сопровождении код, благодаря ограничению иерархии наследования ваших классов и интерфейсов.

Ограничив набор разрешенных подклассов или реализаторов, вы можете предотвратить ошибки и сделать свой код более безопасным и простым в обслуживании.

Освоив sealed классы Java, вы сможете вывести свои навыки программирования на новый уровень, создавая более качественное программное обеспечение.

Приглашаем всех желающих на открытое занятие «Введение в Java Collections: списки и O(n)». На занятии вы познакомитесь со списками в Java и изучите особенности их использования, получите ответ на самый популярный вопрос на собеседованиях по Java. В результате занятия будете знать основные особенности списков в java и скорости их работы. Записаться можно по ссылке."'https://habrastorage.org/getpro/habr/upload_files/8d6/e70/ae0/8d6e70ae04b4cbac51673f5174610e8f.png'"['https://habrastorage.org/getpro/habr/avatars/b9f/baf/5f9/b9fbaf5f96ae52973706a0716bd9216e.jpg', 'https://habrastorage.org/r/w32/getpro/habr/avatars/b9f/baf/5f9/b9fbaf5f96ae52973706a0716bd9216e.jpg', 'https://habrastorage.org/getpro/habr/upload_files/8d6/e70/ae0/8d6e70ae04b4cbac51673f5174610e8f.png', 'https://habrastorage.org/getpro/habr/company/2d5/0ed/b57/2d50edb57cf45fa07cc4f39f53b78395.png', 'https://mc.yandex.ru/watch/24049213']"
10'719786'[Перевод] Пять лучших технических советов, которые я украла у гуманитариев'Постоянный обмен знаниями, осмысление и применение чужого опыта — фундамент для развития любого разработчика. Но стоит ли искать инсайты исключительно в кругу коллег,...'https://habr.com/ru/post/719786/'"Постоянный обмен знаниями, осмысление и применение чужого опыта — фундамент для развития любого разработчика. Но стоит ли искать инсайты исключительно в кругу коллег, или же получать их можно от самых разных людей?

Марианна Беллотти*, тимлид и автор книги « Kill It with Fire «, в стремлении стать хорошим руководителем начала все больше размышлять над советами, которые когда‑то помогли ей вырасти в профессии. И поймала себя на мысли: зачастую лучшие из них исходили от людей без опыта работы с программным обеспечением.

Вот пять ее любимых советов.

*Обращаем ваше внимание, что позиция автора может не всегда совпадать с мнением МойОфис.

Совет №1. «Такие люди, как мы, зарабатывают деньги на швах»

Кто сказал : высокопоставленный сотрудник Агентства национальной безопасности (АНБ) США

Контекст . Можно долго рассказывать о том, как я оказалась в конференц‑зале Госдепартамента вместе с АНБ. Но если коротко, то это была довольно безумная встреча, на которой множество очень важных людей с внушительными титулами говорили кучу глупостей о компьютерной безопасности. Первый из многих случаев за мою карьеру в федеральном правительстве, когда мы приходили с ожиданием продуктивной беседы с высшим руководством, а вместо этого получали совершенно бессмысленное состязание между агентствами с названиями из трех букв. Я помню, что женщина (и да, это была женщина), пыталась перенаправить беседу после того, как ее коллега сказал что‑то некорректное и оскорбительное в ответ на вопрос МНБ . Она хотела разрядить обстановку и вряд ли задумывалась о выборе слов, но ее замечание было точным и эффектным. Ошибки безопасности и надежности чаще всего происходят в соединительных швах. Это означает как буквальные интеграции, так и организационные швы. Вряд ли надлежащий мониторинг будет обеспечен там, где никто не знает, кому что принадлежит или кто за что отвечает. Многое теряется в швах, иногда даже на годы. Так что если ваша компетенция — безопасность или доступность сервисов, то швы — лучший шанс сорвать большой куш.

Как я изменила свой подход . Вскоре после этого для оценки и исправления программных систем я начала применять креативную письменную технику под названием 100:10:1. Идея принципа 100:10:1 проста:

Придумайте 100 проблем, которые могут произойти.

Выберите из этого списка 10 наиболее вероятных и изучите их.

Найдите 1 критическую проблему, на которой собираетесь сосредоточиться.

Сами по себе цифры значения не имеют. Идея 100:10:1 заключается в том, что вы генерируете так много потенциальных идей, что добираетесь до дна и выдвигаете на передний план неочевидное. По мере того как вы выбираете наиболее вероятные, список сокращается. Некоторые идеи оказываются совершенно неправильными, некоторые сливаются с другими или разветвляются, некоторые уходят, потому что их уже кто‑то изучает... В конце концов, вы находите в швах то, что все остальные пропустили.

Такой подход к решению проблем также изменил в лучшую сторону поведение моей команды. Часто самое трудное в командной работе — позволить людям предлагать идеи, которые в конечном итоге будут отвергнуты. Люди склонны к самоцензуре, не желая выглядеть или звучать неправильно, потому что предполагают, что все остальные их оценивают. Когда такое происходит в команде, появляются слепые пятна. К счастью, люди очень плохо просчитывают вероятности. Очень плохо. Я стала спокойно воспринимать, что ошибаюсь в 95% случаев, потому что понимаю: когда я найду тот единственный критический изъян, все прежние отклоненные идеи будут забыты. Обнаружив несколько проблем, которые упустили гораздо более опытные инженеры, я в глазах коллег обрела суперспособность.

Когда я переключилась на управление командами, преимущества стали более очевидны. Мы часто говорим о психологической безопасности и о том, чтобы давать людям возможность высказать свое мнение, но рекомендаций насчет этого не так много. Если человек не боится задавать глупые вопросы и легко высказывает идеи без серьезных споров, возникает среда, в которой нестрашно поправлять друг друга и обсуждать. Процесс нормализуется, и люди перестают оценивать, потому что понимают, что и начальник этого не делает.

Зачастую я нахожу полезным просто признать ситуацию с самого начала: я склонна думать о крайних случаях, но крайние случаи по определению маловероятны. В результате я поднимаю много неуместных тем. Когда вы обсуждаете проблему или ситуацию, есть три основных блока информации: то, что истинно, то, что ложно, и то, что истинно, но не имеет отношения к делу. Подход, при котором люди не пытаются избежать разговоров об истинном, но не имеющем отношения к делу, подразумевает, что в целом принятие лучших технических решений происходит за счет преимуществ от комплексного видения каждого члена команды.

Совет №2. «Знайте, какая экспертность нужна людям от вас»

Кто это сказал : Лесли Райан, мой преподаватель по TOEFL

Контекст . Лесли сертифицировал меня для преподавания английского языка как иностранного, что позволило путешествовать по миру и работать на небольшие НПО, которые не могли иначе платить мне прожиточный минимум или спонсировать визу. Он сказал фразу нашей группе накануне первого индивидуального выступления в классе. У меня сложилось впечатление, что он произносил эту речь перед каждой группой, которую сертифицировал, именно на данном этапе программы. Но эффект не стал меньше.

Лесли заметил, что большинство наших будущих учеников — профессионалы. Им не нужно обучение бизнесу, праву, медицине или экономике. Они уже стали экспертами в этих вопросах. У нас им нужно научиться, как делать то же самое на английском языке. Они хотели получить доступ к нашему свободному владению языком, чтобы дополнить уже существующие навыки. Мы должны позволить им быть экспертами в своей сфере и помнить, ради какой экспертности наняли нас.

Бонусный совет от технического специалиста: «Вы никого не обманули, мы знаем, кого наняли».

Кто сказал : Майки Дикерсон, администратор Государственного департамента США

Контекст . Одна из нескольких встреч, которые я провела с Майки в подвале штаб-квартиры Госдепа на Джексон Плейс прямо напротив Белого дома. Я не помню, о чем именно мы говорили, но помню, что этот комментарий походил на удар в самое сердце. У Майки была привычка быстро переходить к делу. Она нервировала многих, вызывала разногласия и служила бесконечным источником недоразумений и обид, но через некоторое время люди смирялись.

Я не думала, что при принятии решений исхожу из синдрома самозванца, но, работая рядом с некоторыми людьми из Государственного департамента, чувствовала себя совершенно не в своей тарелке. Инженеры, стоявшие у истоков крупнейших и наиболее престижных технологических компаний — Google, Facebook, Twitter, Netflix, Amazon. Люди, которые вырастили эти компании до их нынешнего размера. Как я могла не испытывать потрясения?

Не думаю, что Майки хотел пофилософствовать. Он просто говорил правду, как ее видел: Госдеп понимал, что я не самый лучший инженер-программист в мире. Они представляли, на каком этапе карьеры я нахожусь, каков мой набор навыков и в чем я слаба. Меня взяли на работу, потому что я, похоже, знала, как добиться стабильного выполнения технических задач в правительстве. И именно это они хотели от меня получить.

В том же разговоре Майки сказал: «Я бы заплатил тебе зарплату за весь год только за первые три месяца работы. Даже если бы ты больше ничего не делала, я бы с радостью просто подписывал чеки».

После я перестала думать обо всех великих инженерах и о том, что мне среди них не место, и сосредоточилась на получении как можно большего опыта.

Как я изменила свой подход . Я много думаю о комментарии Лесли во время работы с инженерными командами. Слишком часто инженеры настолько поглощены желанием доказать свое мастерство, что, сами того не осознавая, давят коллег взаимодополняющими навыками. Инженеры-программисты вдруг начинают вести себя так, будто могут быть менеджерами по продуктам, дизайнерами, редакторами и продавцами. Специалистам других дисциплин не всегда понятно, что, когда инженер пытается заменить собой всю команду, то он просто ищет признания и уважения.

Если у меня возникает желание перебить кого-то своими мыслями по поводу некой темы, я пытаюсь спросить себя: «Какая экспертность от меня нужна?» Часто я понимаю, что в своем энтузиазме продемонстрировать случайные знания собираюсь поправить того, кто посвятил значительное количество времени и усилий для развития своих навыков в этой сфере. Я никогда не жалею, что держала рот на замке и позволяла говорить другим.

Совет №3. «Прежде чем что-то исправить, нужно перестать ломать»

Кто сказал : ведущий групповой терапии в NAMI

Контекст . Череда событий, которая привела меня на групповую сессию NAMI для друзей и семей летом 2014 года, слишком длинная и личная для статьи в блоге, но в итоге я оказалась там — с разбитым сердцем и долгами на 14 000 долларов. Тогда я много думала над этим высказыванием. Позже, когда жизнь вернулась в нормальное русло, я поняла, что проблемные модели поведения, с которыми мне пришлось столкнуться, проявляются и в гораздо более банальных ситуациях. Экстремальные условия делают их не уникальными, а лишь очевидными.

Как я изменила свой подход . Большая часть моей работы в качестве руководителя инженерного отдела заключается в том, чтобы не позволять по-настоящему гениальным людям реализовывать планы, начинающиеся со слов «я могу сделать это сам за выходные».

Если вы делаете что-то за коллег и лишаете их возможности участвовать в процессе, вы не помогаете, а вырабатываете у них зависимость. Даже если самостоятельно придете к конечному результату гораздо быстрее.

Не так давно штатный инженер из другой команды связался с моей и предложил перевести нас на новую систему для развертывания. Он только что сделал это для одной из служб своей команды и был уверен, что сможет закончить работу без нашей помощи. Он отметил это как преимущество. Нам не нужно было менять приоритеты. Ему вообще не требовались усилия с нашей стороны! Когда я сказала «нет», то от своей команды получила отпор. Сделка казалась идеальной. Штатный инженер настолько талантлив — почему же я должна отказываться от помощи?

Я указала, что если работу сделает кто-то другой, то у нас не будет знаний о новой системе, и в долгосрочной перспективе это может привести к проблемам, которые сведут на нет время, сэкономленное изначально. Моя команда не была убеждена, поэтому мы пошли на компромисс и попросили о встрече, чтобы обсудить шаги по переходу. Если бы все было так же просто, как звучало, мы бы приняли предложение.

Оказалось, что у нас имелось несколько специфичных требований, еще не доступных в новой системе. Что хуже, некоторые из задач не имели простого решения. Штатный инженер зашел бы в тупик и либо втянул мою команду в миграцию, к которой мы не были готовы, либо бросил ее на полпути, либо принял важные архитектурные решения за нас.

Выполнение задач за других людей редко настолько полезно, как кажется. Если они не понимают, что вы создали, то станет только хуже. Если они не знают, как обслуживать нечто новое, то станет только хуже. Если вы не знаете достаточно для правильной реализации, то станет только хуже. Если люди не думают об использовании или обслуживании системы, потому что не создавали ее и не имеют чувства владения и обязательств, то станет только хуже.

Почти всегда лучшая помощь — поддержать текущие процессы, а не отбирать работу и возвращаться с готовым решением.

Совет №4. «Чтобы пойти налево, поверните направо»

Кто сказал : Сифу Джесси Тисли

Контекст . Я познакомилась с Сифу, когда мне было около 16 лет. У него были дреды, и он научил меня сражаться на мечах. Он также познакомил меня с китайской философией, а именно с даосизмом.

Как я изменила свой подход . Одна из основных концепций даосизма — гармония противоположностей. В общих чертах, даосизм признает, что человеческий разум любит бинарность: белое — черное, правое — левое, мягкое — твердое, добро — зло. Это принцип, по которому устроен наш мозг, но он неверен. Природа не соблюдает таких строгих различий. До такой степени, что даже в их пользе возникают сомнения. Различия облегчают сложное мышление, устраняя некоторые аспекты вариативности, но также делают нас уязвимыми перед большими ошибками, если шаблон не работает.

Даосы понимают, что мы склонны к чрезмерной оптимизации на основе ложной дихотомии. Если в конкретном контексте желательна мягкость, то мы стараемся устранить всю твердость. Если белый цвет предпочтительнее, соскребаем черный. Такие четкие состояния не просто недостижимы, они построены на несуществующей дихотомии. Это понимание оказало влияние на буддизм, особенно на то, что в конечном итоге стало дзен-буддизмом.

Даосы считают, что путь к истине лежит в гармонизации двойственности. Признавая, что люди вряд ли смогут полностью отказаться от бинарности, предлагают просто добавить в белое немного черного, а в черное — белого. Вот почему символом даосизма является инь и ян.

Мне нравилось слушать Сифу, потому что он излагал мысли очень прагматично, благодаря чему они становились менее духовными и более прикладными. Он часто говорил: «Когда вы бьете кого-то, нужно отвести руку назад, прежде чем выкинуть ее вперед. Иначе удар будет слабым». Вариация на ту же тему: мы становимся сильнее, если сначала думаем о противоположности.

Мы все знаем, что предположения следует рассматривать критически, но в первую очередь необходимо осознать, что мы делаем именно предположение, а это не так просто. Проблему решает даосский совет: двигаться в каком-то направлении только после того, как поискал и изучил противоположный путь. Когда ты обречен смотреть на мир бинарно, все является предположением.

Совет №5. «Мышление — это тоже работа»

Кто сказал : неизвестно

Контекст . Я всегда связываю это высказывание с пожилой женщиной, в чьей очаровательной довоенной квартире в Бронксе я оказалась на вечеринке в честь зимнего солнцестояния в студенческие годы, но мы не были знакомы и вряд ли много разговаривали. Я безуспешно пыталась сопоставить этот совет с другими возможными источниками в жизни. Это ложное воспоминание, которое застряло у меня в голове на всю сознательную жизнь.

Как я изменила свой подход . На личном уровне это позволило мне устраивать передышку тогда, когда она нужна. Почему я должна чувствовать вину за то, что покинула офис и прогулялась? Мышление — это тоже работа.

Но также это повлияло на подход к руководству командой инженеров. Когда я работала в традиционной офисной среде, то говорила своим сотрудникам: «Если сейчас два часа дня, а работу на сегодня вы закончили и никаких встреч нет, просто идите домой. Вы не обманываете организацию, вы вкладываете энергию в банк. Она вам потребуется, когда будет ваше дежурство и вызов пришлют в три часа ночи. Или во время тяжелой недели, когда придется работать допоздна, чтобы что-то успеть. Такое случается, и предсказать это невозможно. Если вы закончили работу, идите домой, расслабьтесь, проведите время с семьей. Положите это время в банк, потому что мы обязательно потратим его позже».

Кажется глупым, что людям нужно такое проговаривать, но многих приучили к мысли, что если работу не видно, то руководство примет тебя за бездельника.

Отчасти я воспринимаю свою работу руководителя как работу рекламщика. Моя задача заключается в том, чтобы продавать подчиняющихся мне инженеров обратно организации, которая их в первую очередь и наняла. Сутью организации является стремление к чрезмерной оптимизации. Это означает, что суперпродуктивности сотрудников недостаточно. Необходимо иметь четко определенный метод и процесс, формирующие эту продуктивность, чтобы воспроизводить их и гарантировать результат.

Однако можно заполнить целую библиотеку исследованиями, которые показывают, что эффективные команды создаются и управляются не так. Эффективным командам необходимо доверие. Это не значит, что шаблоны для принятия решений или отслеживания показателей бесполезны, — они крайне важны. Но если заменить доверие процессом, то получится бюрократия. Для того чтобы KPI, OKR, SLO (или любой другой акроним, благодаря которому сейчас продаются книги) работали, сначала требуется доверие.

Со временем доверие также естественным образом деградирует. Итальянские исследователи Кристиано Кастельфранчи и Рино Фальконе разработали модель доверия, в которой ключевым фактором является видимость, а не успех. Согласно их теории, молчаливо преуспевающая организация в конечном итоге получает меньше доверия, чем организация, которая показывает свою неудачу. Если мы быстро и эффективно восстанавливаемся после провала, доверие возрастает. Тогда как если добиваемся успеха, который никто не замечает, то становимся все более неизвестными и неуверенными. Это объясняет так называемый парадокс восстановления доверия, когда потребители больше доверяют поставщику услуг после сбоя, чем до него.

Приходится постоянно напоминать организации, что они наняли замечательных людей, которые знают, что делают. Вначале руководство об этом помнит, но со временем, если ценность сотрудников не видна, доверие ослабевает и бюрократия становится все более привлекательной. Людям нужно говорить, чтобы они брали отгулы, когда есть неограниченный отпуск, или уходили домой пораньше, если заканчивают работу в 14:00, или не отвечали на электронные письма после полуночи, потому что они неосознанно понимают: видимость работы более ценна, чем результат труда.

Очевидно, что из-за этого возникает культура, которая никому не выгодна. Сотрудники выгорают. Эффективность компании снижается. Плохая производительность снижает доверие, что увеличивает бюрократию... Поворотным моментом в моей жизни стал день, когда я поняла, что для управления командой отличных инженеров мне не нужно быть лучшим инженером в мире, а нужно научиться хорошо рекламировать своих людей и их опыт в цепочке команд. Мне нужно было повысить их видимость, чтобы поддерживать высокий уровень доверия и сдерживать бюрократию.

***

Будем рады узнать в комментариях ваше мнение об описанных советах и их применимости в конкретных рабочих задачах. Впереди — еще больше полезных переводов и материалов с ИТ-экспертизой от специалистов МойОфис. Следите за нашими новостями и блогом на Хабре!"'https://habrastorage.org/getpro/habr/upload_files/5ab/fb1/1de/5abfb11deebe002c78004fa0295fbc23.png'"['https://habrastorage.org/getpro/habr/upload_files/5ab/fb1/1de/5abfb11deebe002c78004fa0295fbc23.png', 'https://habrastorage.org/r/w32/getpro/habr/avatars/d7a/462/aef/d7a462aef5791b8e4e58f931a19c3fd6.jpg', 'https://habrastorage.org/getpro/habr/avatars/d7a/462/aef/d7a462aef5791b8e4e58f931a19c3fd6.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/5a3/4fc/5a3/5a34fc5a39709721dedd95b093f32657.png', 'https://habrastorage.org/getpro/habr/company/f39/465/714/f3946571428c1163931a9f6bd797a645.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/849/534/dff/849534dffc247901160bef6f152de09b.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/211/6c3/7d5/2116c37d5564ce481333e5ae61742a4a.png', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/25c/fcc/eb2/25cfcceb22fa24709db99ddc7b0322d6.png']"
11'720234'Что говорят про Southbridge бывшие сотрудники'Docker, Kubernetes, GitLab CI, «работа в классной команде», «интересные задачи», «курсы, тренинги, митапы и конференции» — эти и многие другие заманчивые слова можно встретить...'https://habr.com/ru/post/720234/'"Docker, Kubernetes, GitLab CI, «работа в классной команде», «интересные задачи», «курсы, тренинги, митапы и конференции» — эти и многие другие заманчивые слова можно встретить в вакансиях инженеров. Мы, Southbridge, занимаемся поддержкой нагруженных серверов. У нас есть несколько инженерных команд . Как и в любой компании, иногда наши коллеги увольняются. Мы решили спросить у тех, кто работал с нами раньше, как на самом деле им работалось в Southbridge.

Разбираемся, соответствовала ли реальность ожиданиям, какие плюсы и минусы на самом деле есть в компании и почему от нас уходят. Статья поможет познакомиться с компанией поближе.

Чтобы собрать материал для поста, мы поговорили с несколькими инженерами, которые уволились из Southbridge(SB) за последние три года. Все отзывы и мнения оставляем анонимными.

Откуда пришли инженеры

Сначала мы спросили, как наши бывшие коллеги узнали о компании. Тут неожиданностей не было: три человека пришло через hh, двое — через девопс‑стажировку, которую мы проводили в 2021 году, одного инженера позвал коллега, который тоже у нас работал, ещё один был знаком с компанией по прошлому месту работы.

Инженеры проходили тестовые вопросы, делали тестовое задание по настройке веб‑сервера, кто‑то ходил на техническое интервью. Среди тех, кто работал с нами долго, были инженеры, которые устроились в компанию только по переписке в почте:

«Я не помню уже, пообщались мы с техдиром или нет. По‑моему, даже не пообщались, только в почте. Первое, что удивило: можно удаленно работать и вообще не разговаривать ни с кем — ни видео, ни телефон».

«Было три этапа отбора. Сначала что‑то вроде блиц‑опроса по Linux, потом свободное сочинение о том, какой опыт у меня есть, что я умею. А потом последний этап — практика по Linux‑администрированию, что‑то на сервере нужно было настроить. Ну и всё. До принятия на работу никаких очных интервью не было».

Вот что думают коллеги об этапах отбора:

«Несколько этапов отбора — это нормальная ситуация, когда нужно понять, что умеет кандидат. И, соответственно, кандидату понять, что от него в принципе хотят, какой уровень от него ожидают. По вопросам можно увидеть, насколько тебе компания подходит или не подходит, какие там задачи есть».

«Помню, все этапы отбора проходили через почту. Тогда весь процесс занял две‑три недели. В переписке участвовали несколько сотрудников, среди них были техдир и генеральный директор. Когда всё общение проходит через почту, можно сесть, спокойно поискать информацию, ответить обстоятельно, развёрнуто. Вопросы были грамотные и интересные, при этом не усложнённые. Понравилось, что есть практика. Тебе дают виртуальную машину, надо её привести к какому‑то целевому виду, потом результат за тобой проверяют потенциальные коллеги».

Сейчас, в 2023, мы сохранили три этапа отбора. Это короткие вводные вопросы, на которые надо ответить в переписке с HR-специалистом, тестовые вопросы и третий этап — здесь мы предлагаем на выбор: техническое задание или интервью.

С какими задачами работали

К нам на поддержку приходят разные проекты: это могут быть как проекты, построенные с помощью девопс‑инструментов, так и проекты, где требуется только классическое администрирование Linux‑серверов. Вот какими впечатлениями о задачах по поддержке поделились бывшие коллеги:

«Задачи на самом деле были простые. Мне показалось, что работать в такой команде поддержки — это хороший джамп‑старт для начинающего Linux‑администратора и девопса, потому что уровень вхождения невысокий. Сложность именно в оказании поддержки, но она тоже не запредельная. Грубо говоря, если не нарушать основные правила администратора (работает — не трогай, не знаешь как настроено — не ломай и т. д.), задачи позволяют набить руку, понять, как работает Linux, как работают компании с Linux».

«В Southbridge всё администрируется с помощью Ansible, с самого начала мои задачи по изменениям для клиентов были связаны с ним. Это действительно помогает изучить современный распространённый инструмент, который часто используется в девопс‑практиках. Также в компании используется Git, достаточно быстро можно пощупать Kubernetes».

«Мне нравилось работать с крупными подрядчиками, проводить аудит, решать сложные задачи. Это была такая отдушина, потому что сложных заданий мне действительно не хватало, а я как раз привык больше к ним, но в новом стеке нужно было начинать обучаться с самого начала. Когда проводили аудит, я смог улучшить знания по некоторым технологиям и подключить бэкграунд, который у меня был до этого».

У нас инженеры напрямую общаются с клиентами, при этом не всегда получается сразу договориться. Об этом коллеги тоже упоминали:

«Не доставляет удовольствия спорить с заказчиком, который хочет что‑то сделать, но этим самым, грубо говоря, пилит под собой сук. Тебе нужно его успокоить, объяснить, как будет лучше, договориться. Тем не менее это необходимая часть работы как системного администратора, как девопс‑инженера. Общение — это важно».

Поддержка проектов, конечно, 24/7, поэтому организовано дежурство, есть команда ночных дежурных и дневное дежурство с 10:00 до 22:00, в том числе в выходные и праздники. Вот пара мнений об этом:

«Какие задачи мне не нравились? Понятное дело, дежурство».

«Когда я стал работать в Southbridge, меня очень удивили дежурства. Это очень круто сделано. Дежурства — это, можно сказать, отдельный вид искусства: настолько все чётко организовано, чётко прописаны ответственности, инструкции, есть ночные дежурные. Думаю, когда приходит большая ответственность, значит — ты растёшь, чтобы ответственности соответствовать. Дежурство включает общение с клиентами по телефону, они могут позвонить, какой‑то вопрос задать. Когда все команды уже закончили работу, а ты должен три часа додежуривать, ты «берёшь все проекты на себя» — это такой момент роста. Если какие‑то аварии случаются в это время, ты быстро становишься опытнее».

Как взаимодействовали в командах

Инженеры у нас ведут проекты в командах по три‑четыре человека. У каждой команды свои клиенты, от их количества и сложности задач напрямую зависит зарплата. Некоторые процессы в разных командах отличаются. Ниже мнения про работу в командах.

«Плюсы команды — это то, что мы работаем ради общего блага, это пул проектов, которые мы обслуживаем. Мы в команде друг к другу притираемся и всё равно начинаем работать примерно одинаково, мыслить похожим образом, — это, в целом, большой плюс. Если я какие‑то вещи внедряю, то меня могут поддержать, могут скорректировать. Это важно».

«Можно поработать и пообщаться с ребятами из разных городов, из разных точек России — это очень интересно».

«Плюс команды — мы можем друг на друга положиться, можем посоветоваться, можем проконсультироваться. Задачи не будут темным лесом, потому что мы растем все вместе. Если нужно будет сделать что‑то новое для меня, я уверен, что справлюсь, потому что меня поддержат».

«Мне нравилось работать и общаться с коллегами. Такая теплая, ламповая обстановка была».

Что в компании не нравилось

Конечно, наши коллеги видели минусы во время работы в компании. Этим тоже поделились:

«Минус работы в команде был такой: мы все немного тянули одеяло на себя. У каждого внутри команды были свои проекты, которые он ведёт, были определённые задачи».

«Я работал над своими проектами фактически один. Потому что ребятам на тот момент не были интересны проекты с Kubernetes».

«Из минусов могу назвать зарплату. Знаю, что сейчас с этим лучше. Но в 2020 было время, что около полугода не было новых и интересных проектов, это повлияло на уровень зп».

«Минус тесного коллектива я вижу в том, что если кто‑то не работает, то кто‑то другой работает больше. С одной стороны, это стимулирует работать, чтобы не перекладывать задачи на коллег. С другой стороны, бывали ситуации, когда мне надо куда‑то отъехать, а другие ребята должны в это время сделать за меня работу. Тут из плюса вытекает минус: работа других зависит от тебя тоже. Плотный график, клиент ждёт ответ в определённое время, это по договору прописано».

«Southbridge — это аутсорсинг, который ориентируется на длительные отношения с клиентом, старается не терять клиентов. Из‑за этого может стать скучновато. Когда ты в какой‑то устоявшийся режим вошёл, когда у тебя нет этого стресса, ада, где всё горит, пожар — можешь заскучать».

А что было хорошего

От минусов переходим к плюсам. Вот какие положительные моменты назвали инженеры:

«На тот момент, когда я пришёл в SB, для меня удалённая работа была чем‑то новым. Понравилось, как организован процесс, как формируются команды. Очень понравилась свобода действий, когда тебе скидывают ТЗ и ты делаешь. Свобода выбора, свобода общения с клиентом».

«Могут отметить очень крутой менеджмент в лице Сергея Фомина, СТО. Поддержка и моральная, и психологическая, и техническая, — любая. В техническом плане тоже не было проблем никаких. Наши «старшие братья„, коллеги из команды архитекторов, всё классно делали в плане собственной инфраструктуры Southbridge. Такая работа остаётся за кадром, но тем, кто с этой инфрой работает, понятно, что за ней стоят люди, которые обеспечивают отказоустойчивость по высоким стандартам компании“.

«Плюс вижу в том, что руководство не дистанцируется от сотрудников. Например, если кто‑то пришел с запросом, его услышат и помогут. Один раз мой запрос был в том, что я хочу чего‑то нового, тогда нам в команду дали проекты с Kubernetes».

«Положительный момент — история с выбором клиентов. Команды могут выбирать клиентов. От некоторых проектов можно было отказаться, передать в другую команду, например. А ещё — широкий выбор всяких инструментов, технологий, специфик. Мне удалось поработать в нескольких командах, и там были совершенно разные проекты. В общем, возможность потрогать, пощупать, поизучать — она была постоянно, и это большой плюс».

Какой опыт удалось получить

Кто‑то проработал у нас несколько лет, кто‑то — всего лишь несколько месяцев, но все говорят, что ушли с каким‑то полезным опытом. Посмотрим, как бывшие коллеги описывают полученный опыт:

«Конечно, после SB у меня огромный кругозор, потому что стек разный у всех клиентов. Теперь у меня есть компетенции в разных инструментах. При такой работе со временем становится многое просто и понятно. Например, как лучше эксплуатировать разные языки программирования».

«SB заставляет учиться проектировать надежные сервисы, использовать правильные подходы, я сейчас на новой работе коллег этому учу. Если ты проектируешь сервис, какую‑то архитектуру, то сразу закладывай, отрабатывай все сбои, сразу же отрабатывай алертинг, сразу же рассматривай все аварийные ситуации. А что, если упал ЦОД? А что, если что‑то другое? А что, если нужно что‑то поменять? Во всех ситуациях сервис должен работать. Не просто „задеплоили — оно работает, а упадёт, да и фиг с ним“. Все случаи должны быть отработаны. Если сразу проектировать нормально — всё будет хорошо».

«Для меня это был огромный опыт. Потому что задачи разные, клиенты разные, много разных технологий, разного стека, начиная чуть ли не от закрытых контуров и IP‑телефонии, заканчивая простыми сайтами».

«Я начинал с позиции младшего системного администратора и до этого Nginx видел всего пару раз. За время работы удалось разобраться с большим количеством технологий, подходов и инструментов. Часто бывает, что ты что‑то изучаешь, а тебе негде это попробовать, только на зайцах. В SB такой проблемы не было, это специфика аутсорсинговой компании».

«Мой самый ценный опыт из Southbridge — умение общаться с клиентами. Это крутой опыт взаимодействия: ты должен точно определить проблему, обозначить сроки решения. Важно умение держать связь с клиентом, чтобы он был доволен. Навыки общения, умение донести свою мысль — все это почти так же ценно, как и технические навыки».

Почему ушли из компании

Причины ухода из компании у каждого оказались свои, двух одинаковых не нашлось. Кто‑то устал от аутсорсинга, кто‑то понял, что не хочет заниматься поддержкой, кому‑то стало скучно, кто‑то нашёл зарплату повыше. Ниже немного подробностей.

«Я просто думал, что надо как‑то расти. Если ты четыре‑пять лет работаешь и тебе стало скучновато, наверное, стоит подумать о чем‑то более интересном. Мне тогда интересным показалось предложение, которое получил».

«Хотелось поработать в продуктовой компании, а не в аутсорсинге».

«Во‑первых, понял, что поддержка — это не моё. Пребывание в постоянном стрессе, что тебе может что‑то свалиться — это некомфортно. Я перешёл на работу, где есть проект, ты его закрыл и забыл про него — всё. Он сдан, забыт и закрыт. Каким бы он проблемным ни был, он рано или поздно закончится. В Southbridge, понятное дело, не так, потому что, пока есть клиент, у него будут какие‑то задачи, они будут на тебя валиться. Кроме того, предложили более высокую зарплату».

«Меркантильно, но деньги».

«Конечно же, основная причина — финансовая. Во‑вторых, на новом месте меньше задач, но больше свободы действий».

Про обучение в Слёрме

В Southbridge в 2018 появился учебный центр Слёрм . Теперь это отдельная компания. Все сотрудники SB могут бесплатно проходить любые курсы Слёрма, а ещё можно попробовать себя в качестве спикера. Вот что говорят про обучение:

«Одно дело, когда тебе покупают курсы сторонней компании, а тут ты — внутри компании. Можешь пообщаться со спикерами, всё расспросить. Очень‑очень сильные, конечно, инженеры ведут курсы. Хороший уровень ребят, с кем приходилось работать. Если бы не они — не было бы у меня того профессионального уровня, который есть сейчас. Хорошо, что после обучения по K8s получилось знания применять на практике. Обучение — оно, конечно, прекрасно, но если ты в ближайшие три месяца‑полгода‑год это не применишь, то всё забывается, как у рыбки».

«Меня интересовали технологии, была жажда знаний. Жажду знаний утолил с помощью курсов Слёрма прямо в полной мере».

«У меня был очень интересный опыт в качестве спикера. У Southbridge в то время как раз начался проект Слёрм, и мне посчастливилось попробовать себя в роли спикера на двух‑трёх мероприятиях в разных городах. Это очень развивает. Хотя и стрессово, но запоминается. Интересный, полезный опыт. Мне кажется, многим инженерам стоит себя попробовать в этой роли».

Вот такие мысли про компанию у коллег, которые работали с нами раньше. Мы не подводим здесь итогов и не делаем выводов — вы сможете сделать это сами. Если после прочтения статьи вам захотелось узнать больше о работе в компании, переходите на наш сайт."'https://habrastorage.org/getpro/habr/upload_files/bfe/7b9/9ac/bfe7b99ac7fbf61ff375237cc5f1f9f3.png'"['https://habrastorage.org/getpro/habr/upload_files/bfe/7b9/9ac/bfe7b99ac7fbf61ff375237cc5f1f9f3.png', 'https://habrastorage.org/getpro/habr/company/754/d93/3ca/754d933caeb494c6127add17ff60feb5.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/7ab/70c/507/7ab70c507edf6ebd55170af1ed14c863.png', 'https://habrastorage.org/getpro/habr/avatars/eab/364/193/eab36419344dc0ed056f430c3212263f.png', 'https://habrastorage.org/r/w32/getpro/habr/avatars/eab/364/193/eab36419344dc0ed056f430c3212263f.png', 'https://mc.yandex.ru/watch/24049213']"
12'720242'SEO для разработчика и верстальщика: основные SEO-требования к разработке сайтов'Подготовили подробную инструкцию, как сделать SEO-friendly сайт и учесть все основные SEO-требования на этапе разработки сайта. Это статья очень важна, так как соблюдение SEO-требований на этапе...'https://habr.com/ru/post/720242/'"Подготовили подробную инструкцию, как сделать SEO-friendly сайт и учесть все основные SEO-требования на этапе разработки сайта.

Это статья очень важна, так как соблюдение SEO-требований на этапе создания нового сайта позволяет сэкономить много денег и времени на внесении дополнительных правок.

Ниже представлена подробная инструкция с основными SEO-требования, которые необходимо предусмотреть на этапе создания нового сайта.

Сформировать ЧПУ адреса для всех страниц сайта

ЧПУ (Человеко-понятные URL) — это адреса страниц сайта, которые содержат понятные человеку слова, отражающие содержимое страницы. ЧПУ адреса удобны для пользователей, помогают улучшить юзабилити сайта и облегчают его индексацию поисковыми роботами.

Для формирования ЧПУ адресов для всех страниц необходимо следовать нескольким правилам:

Использовать только латинские символы, цифры, и дефисы.

Слова в адресах следует разделять дефисом, а не пробелами и нижним подчеркиванием.

Использовать строчные буквы в адресах страниц.

Избегать использования слишком длинных адресов страниц.

Проверять уникальность ЧПУ адресов, чтобы избежать дублирования адресов страниц.

Не использовать в конце URL index.html, html.

URL для всех страниц должны быть закрыты слешем / в конце.

Кроме того, при формировании ЧПУ адресов для всех страниц сайта необходимо убедиться, что ЧПУ адреса устанавливаются автоматически для каждой новой страницы. Например, при формировании заголовка h1 автоматически подтягивать заголовок в URL, прописав его транслитом на латинице.

Настроить 301 редиректы на главное зеркало

Главное зеркало рекомендуется указать с https протоколом и без www.

Необходимо настроить 301 редиректы:

С www на без www

С http на https

Со страниц без / на страницы со / в конце

Со страниц с верхним регистром на страницы с нижним регистром символов

C /index.php и /index.html на главную страницу

Добавить тег title на все страницы сайта

На каждой странице в тегах <head> должен быть размещен тег <title> с уникальным содержанием.

На этапе разработки необходимо предусмотреть возможность автоматической генерации тега title по заданному шаблону. Также необходимо предусмотреть, чтобы тег можно было вручную редактировать на всех страницах сайта.

Добавить мета-тег description на все страницы сайта

На каждой странице в тегах <head> должен быть размещен мета-тег description с уникальным описанием страницы. Мета-тег необходимо оформить следующим образом:

<meta name=""description"" content=""Описание страницы сайта."" />

На этапе разработки необходимо предусмотреть возможность автоматической генерации мета-тега title по заданному шаблону. Также необходимо предусмотреть, чтобы мета-тег можно было вручную редактировать на всех страницах сайта.

Мета-тег Keyword оставлять незаполненным

В настоящий момент мета-тег Keyword не учитывается поисковыми системами как фактор ранжирования и не оказывает положительного влияния на позиции сайта. В связи с этим необходимо оставить данный тег незаполненным.

При этом наличие необходимо, если на страницах не будет хватать плотности ключевых слов и оптимизатор примет решение вручную заполнить тег для увеличение плотности ключей в html-коде.

Главное требование к оформлению контента: оформить весь контент в html-коде

Весь текстовый контент и все важные элементы страниц должны быть оформлены в html-коде соответствующими тегами. Не следует допускать загрузку контента с помощью скриптов.

Критично важно оформить в html-коде следующие элементы:

Заголовки

Весь текстовый контент

Все ссылки

Тексты кнопок, форм и других элементов

Функциональные элементы (фильтрация, сортировка)

Изображения

Навигацию (меню, хлебные крошки, футер)

Пагинацию (ссылки на страницы пагинации обязательно должны присутствовать в коде)

Код микроразметки

Выпадающие списки в главном меню

Добавить заголовок h1 на все страницы сайта

На каждой странице сайта должен быть размещен основной заголовок, размеченный тегами <h1>. Данный заголовок должен быть, в том числе, на главной странице сайта.

Тегами <h1> должен быть размечен только один заголовок на странице.

Критично важно не использовать теги <h1> для выделения каких-либо элементов, кроме основного заголовка.

Подзаголовки на страницах размечать тегами h2-h3, либо стилями

Все подзаголовки, как на коммерческих страницах, так и на страницах статей и новостей, необходимо размечать тегами <h2> — <h3>, в соответствии с их иерархией.

Если заголовок не отражает структуру страницы и не имеет большого значения, такие заголовки необходимо размечать стилями, например выделять жирным шрифтом.

Требования к разметке текста

Текстовый контент на страницах сайта необходимо размечать соответствующими тегами, например:

<p> — параграф

<a> — ссылка

<table>, <td>, <tr> — таблицы

<ul> — маркированный список

<ol> — нумерованный список

<li> — элемент списка

Почему это важно? Правильная разметка текста и его элементов позволяет улучшить восприятие контента поисковыми системами. Кроме того, некоторые элементы могут подтянуться в сниппет страницы в поисковых системах, что в свою очередь может положительно сказаться на CTR (например, в некоторых случаях, в сниппеты выводятся табличные данные).

Оформление ссылок

Ссылки необходимо размечать тегами <a>. Ссылки в сквозных блоках необходимо открывать в текущем окне. Также в текущем окне необходимо открывать навигационные ссылки.

Ссылки, размещенные в тексте, а также все ссылки на внешние источники необходимо открывать в новом окне, добавив к ним атрибут target=”_blank”.

Ссылки необходимо оформить цветом, отличающимся от основного текста. Также можно выделить их жирным шрифтом, либо подчеркиванием. При наведении необходимо выделять ссылки.

Настроить 404 код ответа сервера для несуществующих страниц

Все несуществующие страницы должны отдавать 404 код ответа сервера.

При подстановке лишних символов в текущий URL страницы она также должна отдавать 404 код ответа.

Создать страницу 404 ошибки

При попадании на несуществующие страницы сайта, должна открывать страница 404 ошибки с навигационным меню и с предложением перейти на главную страницу или воспользоваться поиском по сайту.

Добавить тег Canonical на все страницы сайта

На всех страницах сайта необходимо разместить тег Canonical, указывающий основной адрес страницы без GET-параметров. Данный тег следует разместить в коде сайта в раздел <head></head>.

При размещении тега необходимо соблюсти последовательность атрибутов тега link:

<link rel=""canonical"" href=""https://site.ru"">

Сгенерировать xml-карту сайта

Необходимо сгенерировать xml-карту в кодировке UTF-8 со списком всех канонических страниц сайта.

Описание формата сайта можно найти по ссылке:

В карте сайта должны присутствовать только ссылки на существующие канонические страницы с 200 кодом ответа. Не следует включать в карту сайта страницы с GET-параметрами.

В карте сайта необходимо разместить ссылку на страницу и дату последнего обновления, пример:

<?xml version=""1.0"" encoding=""UTF-8""?> <urlset xmlns=""https://www.sitemaps.org/schemas/sitemap/0.9""> <url> <loc>https://site.ru/</loc> <lastmod>2022-08-01</lastmod> </url> <url> <loc>https://site.ru/page/</loc> <lastmod>2022-08-01</lastmod> </url> </urlset>

Рекомендуем реализовать автоматическую генерацию карты сайта (чтобы при добавлении на сайт новых страниц они добавлялись в карту сайта). Также рекомендуем автоматически обновлять карту сайта раз в неделю.

Карту сайта необходимо разместить в корневом каталоге сайта с название sitemap.xml.

Пример: https://site.ru/sitemap.xml.

Скорость загрузки страниц и скорость ответа сервера

По данным некоторых исследований и заявлений представителей поисковых систем, для обеспечения удобства работы пользователей с сайтом необходимо достичь следующие показатели по скорости загрузки страниц сайта:

CLS не выше 0,1

LCP не выше 2,5 сек.

FID не выше 100 мс

Скорость ответа сервера не должна превышать 300 мс, а в идеале обеспечить скорость ответа менее 200 мс.

Переезд на защищенный https протокол

Перед релизом необходимо перевести сайт на защищенный https протокол и настроить 301 редирект с http на https. Например, со страницы http://site/ на https://site.ru/.

Оптимизация страниц пагинации

Страницы пагинации должны быть доступны для индексации. В связи с этим необходимо убедиться, что в html-коде сайта присутствуют ссылки на все страницы пагинации.

На страницах пагинации рекомендуем разместить тег Canonical в разделе <head></head>, указывающий адрес страницы пагинации:

<link rel=""canonical"" href=""https://www.site/category/page-2/"">

На страницах пагинации необходимо уникализировать тег title во избежание дублей страниц.

[title] — Страница [номер страницы]

Купить кроссовки в интернет-магазине — Страница 2

Для первых страниц пагинации рекомендуем настроить 301 редирект на основные страницы без GET-параметров.

Например, со страницы https://www.site/catalog/page-1/ на https://www.site/catalog/.

При этом в html-коде необходимо разместить ссылку на основную каноническую страницу с 200 кодом ответа.

Также рекомендуем деоптимизировать страницы пагинации, чтобы не снижать релевантность основной страницы:

Сократить title, например продублировав заголовок h1 + страница (номер страницы)

Удалить SEO-текст или описание категории (если текст присутствует на странице)

Добавить микроразметку Schema.org

Стандартные элементы сайта необходимо разметить микроразметкой Schema.org. Для разметки данных рекомендуем использовать html-код, так как JSON не распознается Яндексом.

Хлебные крошки — https://schema.org/BreadcrumbList

Рейтинг — https://schema.org/AggregateRating

Контакты — https://schema.org/Organization

Новости — https://schema.org/NewsArticle

Товары — https://schema.org/Product

Отзывы — https://schema.org/Review

Статьи — https://schema.org/Article

Вопросы и ответы — https://schema.org/FAQPage

Подробнее о том, что такое микроразметки и готовые примеры кода микроразметки приведены в статье.

Для больших проектов настроить заголовки Last Modified и If-Modified-Since

Для больших сайтов (особенно важно для интернет-магазинов с большим ассортиментом товаров) настроить заголовки Last Modified и If-Modified-Since.

HTTP заголовок Last-Modified сообщает клиенту (браузеру, поисковому роботу) время последнего изменения страницы. Если клиент получил заголовок Last-Modified, то при следующем обращении к адресу, при условии, что страница есть в локальном кэше, он добавит запрос If-Modified-Since (не изменилась ли страница после даты, полученной в Last-Modified). В свою очередь сервер, получив запрос If-Modified-Since должен сверить полученную временную метку с временем последнего изменения страницы и, если страница не изменялась ответить 304 Not Modified.

Таким образом, если поисковый робот получит ответ 304 Not Modified, то он не будет обходить страницу, а будет обрабатывать только страницы с изменениями, тем самым повышая эффективность обхода сайта.

Подробнее: https://last-modified.com/ru/if-modified-since.html

На всех страницах сайта разместить навигационную цепочку Хлебные крошки

На всех страницах сайта, за исключением главной страницы, необходимо разместить навигационную цепочку Хлебные крошки. Навигационную цепочку необходимо разместить в начале страницы перед заголовком h1.

Хлебные крошки должны содержать путь к странице, начиная с главной страницы и включая последнюю страницу цепочки.

Все элементы цепочки, за исключением последней страницы, следует оформить в виде гиперссылок. Последний элемент цепочки следует оформить в виде текста более прозрачным шрифтом, чем остальные элементы цепочки.

Хлебные крошки необходимо разметить микроразметкой https://schema.org/BreadcrumbList.

Оптимизировать изображения

Необходимо использовать современные форматы изображений:

jpeg

jpg

png

svg

Вес изображений не должен превышать 1,5 мб.

Для всех изображений необходимо заполнить атрибут alt. Если данный атрибут не заполнен вручную при добавлении изображения, необходимо заполнить alt автоматически, подтянув в него заголовок h1.

URL изображения желательно оформить в виде ЧПУ.

Если на сайте размещено большое количество изображений, необходимо сгенерировать sitemap.xml для изображений.

Подробнее ознакомиться с файлом Sitemap можно в руководстве Google."'https://habrastorage.org/getpro/habr/upload_files/693/838/4ac/6938384ac496846f1dd654df6a509f8a.jpg'"['https://habrastorage.org/getpro/habr/upload_files/693/838/4ac/6938384ac496846f1dd654df6a509f8a.jpg', 'https://mc.yandex.ru/watch/24049213']"
13'720054'Тысяча и один справочник в Master Data Management Ростелекома Импортозамещение'Всем привет! В предыдущей статье мы рассказали об использовании коробочного продукта Master Data Management и обещали рассказать о дальнейшем развитии подходов управления справочниками...'https://habr.com/ru/post/720054/'"Всем привет! В предыдущей статье мы рассказали об использовании коробочного продукта Master Data Management и обещали рассказать о дальнейшем развитии подходов управления справочниками в компании. Сегодня мы сдержим свое обещание.

Система MDM — специализированное программное решение, которое помогает унифицировать нормативно‑справочную информацию (НСИ) во всех информационных системах предприятия и организовать управление НСИ

Коробочный продукт мы использовали в течение пяти лет. И спустя эти пять лет наша история создания и развития MDM получила логическое продолжение — мы создали свой программный продукт Master Data Management, о котором сегодня и расскажем вам.

Наступило новое время импортозамещения, поменялись платформы в компании, мы активно включились в процесс и разработали концепцию импортозамещенного MDM.

Нам повезло, что за годы использования существующего решения у нас сложилась успешная методика построения MDM в компании. Поэтому методический подход к организации справочников и взаимодействию с системами источниками и подписчиками остался прежним.

С чего начинался продукт

Разработку мы начали традиционно: с функциональных требования, выбора стека и архитектуры будущего продукта.

Был выбран актуальный на сегодняшний день стек:

Java‑платформа для разработки — Spring Boot.

Фреймворк для фронтэнда MVM — Vue.JS.

Для реализации базы данных PostgreSQL.

Почему именно он. Spring Boot предоставляет большую гибкость во внутренней архитектуре приложения и его настройке, базовый проект включает в себя «из коробки» многие вещи, такие как маршрутизацию, соединение с БД, профили, транзакции и многое другое. А почему Vue — из всех наших популярных SPA‑фреймворков (AngularJS, Vue.JS и ReactJS) Vue — один из самых простых с лаконичным синтаксисом кода.

Для себя мы определили назначение системы MDM:

Ведение централизованных справочников.

Ведение эталонных федеральных и отраслевых справочников.

Получение и хранение данных полученных из справочников систем‑источников.

Приведение через мэппинги в соответствие к эталонным справочникам систем‑источников.

Далее определили основные функциональные требования к системе MDM:

Управление справочниками через систему метаданных. Дает возможность создавать новые справочники и изменять их свойства без перезапуска системы и без привлечения программистов.

Создание и ведение эталонных справочников.

Мэппинг справочников, получаемых от систем‑источников на эталонные справочники.

Управление событиями записей базы данных.

Ведение бизнес‑правил.

Получение данных от систем‑источников.

Передача справочников системам‑подписчикам.

Ведение истории изменений записей справочников.

Процессное управление согласованием и утверждением записей справочников.

Разделения прав доступа пользователей к справочникам, выполнение аутентификации и авторизации пользователей. Управление правами пользователей через ролевую модель системы.

Интеграция с Microsoft Excel, для пакетной обработки пользователем большого количества записей справочников.

Предоставление функций REST API для получения системами‑подписчиками справочников.

Архитектура системы

Однозначно, сразу на этапе проектирования применен микросервисный подход, который мы уже применяли в других проектах, четко разделяя все треды для разработки основных ядровых методов. Аналогично, мы совершенно не постеснялись вынести часть бизнес‑логики с приложения на уровень хранимых процедур СУБД. В части обработки данных это оказалось весьма гибким подходом. Организация предобработки данных и бизнес‑правил на уровне слоев загрузки была основана исключительно на хранимых процедурах.

Ниже мы изобразили распределение микросервисов по уровням архитектуры.

Схема взаимодействия уровней:

Метаданные

Основой системы является структура метаданных. Это данные о данных, с помощью которые пользователь моделирует справочники, их свойства и отношения с другими справочниками. Наличие метаданных в IT‑решении это показатель уровня абстракции разработчиков. Метаданные можно рассматривать как способ экономии ресурсов на этапе разработки и получение максимальной гибкости на этапе эксплуатации. И это хорошо, потому что разработчик не несет лишних затрат, а пользователь получает максимально гибкий продукт.

Мы заложили в метаданные такие понятия как:

Система‑источник.

Модель данных.

Справочник.

Атрибут справочника.

Правило связи источник‑справочник.

Правило сравнения записей.

Бизнес‑правило.

Обработчик событий.

Система‑источник — описание источников данных, где указаны их названия, ip‑адреса, способы получения данных.

Модель‑данных — логический способ группировки справочников по их назначению, например, услуги абонентов, каналы IP‑телевидения и т. п.

Справочник — описание свойств справочника, его связей с другими справочниками.

Атрибут справочника — или другими словами — поле справочника, в котором и сохраняются данные.

Правило связи источник‑справочник — описание на языке программирования какие данных получаемых от системы‑источника в какие атрибуты справочника помещаются и какие трансформации данных при этом должны происходить.

Правило сравнения записей — описание на языке программирования какие записи одного справочника должны маппироваться на какие записи другого справочника.

Бизнес‑правило — описание на языке программирования как в справочник должны сохраняться записи, например, вычисление значения атрибутов на основе значений других атрибутов, ограничения по записи в атрибуты, например, допустимые и недопустимые значения.

Обработчик событий — описание на языке программирования действий, выполняемых системой во время событий, например, при добавлении записи, исправлении, удалении.

В результате получилось, что специалист по корпоративным данным получает довольно гибкий инструмент для настройки справочников, а корпорация получает необходимые в работе справочники в кратчайший срок.

Получение данных от систем-источников

Для наполнения корпоративных справочников система MDM, зачастую, получает данные от многочисленных информационных систем. После обработки этими данными наполняются централизованные справочники. Поэтому MDM должна уметь обрабатывать полученные данные.

В основу обработки данных мы заложили идею слоев, в системе реализованы три слоя данных: Landing, Staging и Слой справочников.

Landing — это слой сырых данных, которые получены от источников. Данные помещаются в слой как есть, почти без предварительной обработки.

Staging — этот слой по своей структуре идентичен структуре справочников. Данные в слой переносятся из Landing, но в процессе переноса выполняется трансформация данных: приведение типов, дедубликация, дополнение данных и т. п.

Слой справочников — это слой собственно справочников. Данные в слой переносятся из Staging штатной процедурой, которая гарантирует правильное добавление и исправление записей.

Работа пользователей

При разработке информационной системы не следует забывать о пользователях. Хотя ролевые модели никто не отменяет, но упростить парольную жизнь и связать справочник с AD — это непременно нужно делать. Мы бы не запрашивали отдельно авторизационный профиль из MDM, но, к сожалению, или к счастью, справочники ведутся разные и кроме ограничения до уровня доступа к справочнику есть и ограничения на просмотр конкретных записей или на изменения конкретных атрибутов. Все это приходится учитывать. Поэтому, безусловный доступ у нас ограничен только узким набором справочников.

Изучив на примере нашего предыдущего опыта, как организовать быстрый доступ к данным и фильтрации мы разработали дизайн, максимально позволяющий в несколько кликов получить доступ к справочнику, отфильтровать парой кликов данные, открыть модальное окно, поправить данные, и иметь все, что необходимо в поле зрения.

Главное окно по работе с данными справочников:

На скриншоте мы видим основные элементы работы со справочником:

Строка интерактивного полнотекстового поиска, когда поиск записей выполняется одновременно с набором пользователем искомого текста.

Кнопка добавления записи.

Кнопка добавления записи копированием существующей.

Кнопка выгрузки справочника в Excel для последующего редактирования с использованием возможностей электронной таблицы.

Кнопка журнала истории изменения записей, что важно для корпорации, чтобы при необходимости можно было просмотреть кто из пользователей какие записи добавлял, исправлял, и чтобы была возможность восстановить прежнюю версию записи.

Кнопка фильтрации справочника по любому набору его атрибутов.

Кнопка перехода к справочникам, которые ссылаются на сейчас открытый у пользователя.

Для пользователей будет интересным получить возможность перехода между связанными справочниками. Примером связанных справочников могут служить справочники интерактивного телевидения. Например, есть справочник телевизионных каналов, который имеет связь со справочником пакетов каналов, который в свою очередь имеет связь со справочником населенных пунктов, а тот в свою очередь имеют связь со справочником субъектов РФ.

Имея возможности навигации по связанным справочникам, специалисты отдела управления контентом интерактивного телевидения, без лишних затрат сил могут переходить по связанным записям и выполнять необходимое редактирование данных.

Оказалось, что в некоторых видах деятельности корпорации используется

довольно большое количество справочников, имеющих между собой большое

количество связей. И наш подход к реализации навигации оказался как нельзя

кстати.

Получение справочников системами-подписчиками

Приятно осознавать тот факт, что мы подготовили и содержим в лучшем виде сотни корпоративных справочников, но удовлетворение не будет полным, если их никто не будет использовать. К счастью в корпорации сотни информационных систем, которым справочные данные жизненно необходимы для успешного функционирования.

Для взаимодействия с системами‑подписчиками был разработан REST API. Изменения в структуре справочника сразу после сохранения уже доступны через REST, что гарантирует подписчикам получение актуальных данных.

Чем удобно использование метаданных. Одна и та же система, один раз разработав вызовы стандартного метода из комплекта REST API MDM в дальнейшем может подключать любое кол‑во справочников с данной платформы. Все уже написано, подставляй только имя нового справочника и получай его к себе в систему!

Не хочешь REST API? Давай интегрироваться через ETL! Можно сразу писать и читать Landing‑слои, где сразу после создания справочника

автоматически генерируются структуры для обмена данными.

А что кроме обычных справочников? Перейдем к целевым эталонным витринам?

Конечно, хочется применить сразу всю артиллерию из возможностей новой платформы, иначе зачем делать что‑то похожее. И в итоге, мы начинаем получать синергию, когда один справочник получает данные из 5–10 разных систем, составляя в итоге прообраз золотой записи. Асинхронные задания, сверяют данные прообразов с федеральными и отраслевыми классификаторами, исправляя необходимые атрибуты, бизнес‑правила проводят дедубликацию и вводят необходимую иерархию.

Таким образом, это уже не простой справочник, который просто

централизован, а единый эталонный образ для всей компании, отвечающий на

вопросы различных сегментов, содержащий разнородные, но объединенные в строгом

соответствии друг другу характеристики. Настоящая витрина данных. И минимум ручного сопровождения.

Так, к чему готовиться тем, кто собрался писать свою собственную MDM-платформу?

Конечно, хочется применить сразу всю артиллерию из возможностей новой платформы, иначе зачем делать что‑то похожее. И в итоге, мы начинаем получать синергию, когда один справочник получает данные из 5–10 разных систем, составляя в итоге прообраз золотой записи. Асинхронные задания, сверяют данные прообразов с федеральными и отраслевыми классификаторами, исправляя необходимые атрибуты, бизнес‑правила проводят дедубликацию и вводят необходимую иерархию.

Таким образом, это уже не простой справочник, который просто

централизован, а единый эталонный образ для всей компании, отвечающий на

вопросы различных сегментов, содержащий разнородные, но объединенные в строгом

соответствии друг другу характеристики. Настоящая витрина данных. И минимум ручного сопровождения.

Так, к чему готовиться тем, кто собрался писать свою собственную MDM-платформу?

Самое главное — определить минимальное необходимый скоуп функционала для ядра и хранилища метаданных. Приведем простой пример. Одна из важнейших вещей в MDM это Data Quality, которая в виде отдельного или встроенного решения участвует во многих функциях — от первичной загрузки до контроля регламента ETL‑процессов и обратно. Но АРМ по ее настройке для пользователя очень ресурсоемок. И если такие процессы, как DQ и подобные мы можем реализовать для первой версии системы в виде набора сервисных компонент под капотом, то это тоже решение, которое устроит и бизнес и нас, как разработчиков. Мы экономим на части UI/UX интерфейсов, тратя все ресурсы на ядро.

Также, нельзя забывать о принципах поедания слона по частям. MDM в этой части характерен именно объемами данных, которые в совокупности со всеми инфосистемами, которые надо переводить может стать непосильной ношей для команды. Здесь не стесняемся, декомпозируем все по группам и поэтапно переводим. Даже, если кажется, что можно все перевести за один раз, на практике все старые legacy‑решения оставляют закопанные «мины» в виде кастомно‑костыльного ПО.

И, конечно, Best Practice. Не надо изобретать принципиально новые ядровые решения — используем проверенные и наращиваем функционал. Ведь, если вспомнить опыт эксплуатации рано или поздно к любому интерфейсу можно привыкнуть, а к отсутствию любимых кнопочек, функций настройки и т. д. привыкнуть нельзя — ты ими пользуешься каждый день. И на этом стоит сделать акцент.

Ну и самое главное — ничего не бояться!

Сейчас стало хорошо. А что же дальше?

Конечно, самое интересное наступает, когда решены все текущие задачи и можно заниматься развитием платформы. Здесь наши фантазии ничем не ограничены.

Хочется достичь степени автоматизации такой величины, чтобы разработчики в принципе не были задействованы в настройке любого максимально сложного справочника.

Мы планируем сделать надежные мастера настроек, когда из кучи шаблонов можно выбрать свой вариант справочника. Сделать библиотеку бизнес‑правил, которые можно применять к любому объекту MDM, проверяя результаты. Хотим сделать графические библиотеки для удобства отображение, изменения и настроек связей, да и много чего в принципе полезного для пользователя и для администратора.

А вот как у нас получится — поговорим через год‑другой, когда мы снова захотим рассказать о своих успехах, или получим замечательные отзывы на Хабре.

Всем пока!

Статья подготовлена командой управления данными «Ростелеком»"'https://habrastorage.org/getpro/habr/upload_files/9a4/40c/68d/9a440c68d4a5f8f08a3fd37c19405132.png'"['https://habrastorage.org/r/w1560/getpro/habr/upload_files/967/e33/dd4/967e33dd40a881603bb2acdf8dd0191d.png', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/getpro/habr/upload_files/7eb/e22/73a/7ebe2273a04ec09cac850ff986c3ecc1.PNG', 'https://habrastorage.org/getpro/habr/company/46b/563/61c/46b56361cccfbaf7a353b5de3031b5f6.png', 'https://habrastorage.org/getpro/habr/upload_files/9a4/40c/68d/9a440c68d4a5f8f08a3fd37c19405132.png']"
14'719648'Алгоритмы быстрого умножения чисел: от столбика до Шенхаге-Штрассена'При написании высокоуровневого кода мы редко задумываемся о том, как реализованы те или иные инструменты, которые мы используем. Ради этого и строится каскад абстракций: находясь...'https://habr.com/ru/post/719648/'"При написании высокоуровневого кода мы редко задумываемся о том, как реализованы те или иные инструменты, которые мы используем. Ради этого и строится каскад абстракций: находясь на одном его уровне, мы можем уместить задачу в голове целиком и сконцентрироваться на её решении.



И уж конечно, никогда при написании a * b мы не задумываемся о том, как реализовано умножение чисел a и b в нашем языке. Какие вообще есть алгоритмы умножения? Это какая‑то нетривиальная задача?

В этой статье я разберу с нуля несколько основных алгоритмов быстрого умножения целых чисел вместе с математическими приёмами, делающими их возможными.

Оглавление

Зачем быстро умножать числа?

Программы постоянно перемножают числа. Перемножения 32-битных, 64-битных, а иногда и более длинных чисел встроены напрямую в арифметико‑логические устройства микропроцессоров; генерация оптимальных цепей для кремния — отдельная инженерная наука. Но не всегда встроенных возможностей хватает.

Например, для криптографии. Криптографические алгоритмы (вроде повсеместно используемого RSA ) оперируют числами длиной в тысячи бит. Если мы сводим операции над 4096-битными числами к операциям над 64-битными словами, разница в количестве операций между алгоритмами за и уже составляет десять раз!

Деление тоже сводится к умножению ; в некоторых процессорах даже нет инструкции для целочисленного деления.

Но сразу признаюсь: не все существующие алгоритмы быстрого умножения достаточно практичны для широкого применения — по крайней мере на сегодняшний день. Помимо практического здесь силён академический интерес. Как вообще математически устроена операция умножения? Насколько быстро её можно делать? Можем ли мы найти оптимальный алгоритм и чему научимся в процессе поиска?

Его величество столбик

Когда-то очень давно мне попалось на глаза видео с кричащим названием ""How to Multiply"", описывающее так называемый японский метод умножения. Что меня удивило — так это то, что метод этот подаётся как более простой и интуитивно понятный. Оказывается, если умножение в столбик делать не в столбик, а занимая половину листа бумаги, получается проще и понятнее!

Да-да, принципиально это тот же самый алгоритм умножения столбиком. Можем посмотреть на запись в столбик и сравнить её с картинкой:

92 — это две больших группы красных точек на нижне-правой диагонали. 23 — две маленьких группы на верхне-левой диагонали. Точно так же, как и в столбике, мы вынуждены перемножить попарно все разряды, потом сложить, и потом сделать перенос. Умножение в столбик — не что иное, как компактный на бумаге и относительно удобный для человеческого сознания способ проделать алгоритм, объединяющий в себе практически все придуманные до XX века способы умножения, за редким исключением вроде умножения египетских дробей .

Асимптотическая сложность умножения в столбик не зависит от того, в какой системе счисления мы производим умножение, и составляет операций, где и — количество разрядов в множителях. Каждый из разрядов одного множителя нужно умножить на каждый из разрядов второго множителя, после чего получившиеся маленьких чисел (в каждом не больше двух разрядов) сложить.

Почему асимптотика не зависит от системы счисления? В разных системах счисления у чисел разное количество разрядов, это верно. Количество десятичных разрядов в числе x равно в двоичной — (скобки-уголки означают округление вверх). Но мы знаем, что логарифмы по разному основанию связаны друг с другом константным множителем: А константные множители не имеют значения при анализе асимптотики.

Обычно при анализе сложности под и подразумевается количество двоичных разрядов, а числа предполагаются примерно одинаковой длины; тогда формула сложности упрощается до .

Что означает запись O(N²)? Многих программистов О-нотации учит улица — они сталкиваются с ней сразу в оценке сложности каких-то алгоритмов. Но О-формализм происходит из математического анализа, и у него есть строго определённый смысл, причём не очень хорошо согласующийся с остальными привычными для математики обозначениями. Если у нас есть функция — в наших примерах это, как правило, будет количество операций, нужных для обработки алгоритмом входных данных в размере бит — то запись означает, что существует некоторая константа C такая, что начиная с достаточно больших То есть функция растёт не быстрее, чем N^2. При этом сама запись означает класс функций, для которых выполнено это условие. В привычкой теоретико-множественной нотации это было бы правильно записать как — функция входит во множество функций, растущих не быстрее чего-то там. При этом ничего не сказано о том, может ли функция расти медленнее, чем . Например, в случае алгоритма умножения в столбик мы могли бы без зазрения совести записать — и формально всё ещё были бы правы. Действительно, операций нужно меньше, чем . Полезная ли это информация? Не очень. Соответственно, одна и та же функция может быть «равна» разным ; при этом между друг другом эти не становятся равны: Так что обращаться с в выражениях нужно осторожно. Помимо — наиболее, пожалуй, распространённого среди программистов — есть и другие классы функций с аналогичной записью. означает, что функция растёт медленее, чем ; да не просто медленнее, а настолько, что их частное становится с ростом всё ближе и ближе к нулю: Например, в матанализе постоянно используют запись , чтобы обозначить незначительную величину, стремящееся к нулю. Единица в скобках при этом не имеет какого-то существенного значения — там могла бы быть любая константа; можете написать и формально это будет верно. Иногда бывает важно указать, с какой именно скоростью величина стремится к нулю. Тогда пишут , и так далее. Другая встречающаяся нотация означает, что функция растёт точно со скоростью , то есть существуют константы и такие, что начиная с достаточно больших Помимо простого использования со знаком равенства, как в примерах выше, классы функций можно использовать в арифметических операциях. Например, запись означает, что функция равна плюс нечто маленькое, стремящееся к нулю при росте . В отличие от или , эта запись не допускает произвольных множителей при — ровно и всё тут. Работает (при некоторых ограничениях) и привычная арифметика в равенствах. Так, если , обе части равенства можно поделить, например, на константу: съедает любые константы, поэтому справа ничего не изменилось. А можно поделить на : Не-константу нельзя просто выкинуть, поэтому она ушла внутрь и сократилась с тем, что там было.

Разделяй и властвуй: алгоритм Карацубы

Первый шаг на пути ускорения умножения совершил в 1960-м году советский математик Анатолий Карацуба. Он заметил, что если длинные числа поделить на две части:

То можно обойтись тремя умножениями этих более коротких частей друг на друга, а не четырьмя, как можно было бы подумать. Вместо прямого подсчёта , требующего двух умножений, достаточно посчитать и вычесть из результата числа и , нужные нам в любом случае для получения младших и старших разрядов.

После этих расчётов остаётся лишь пробежаться по разрядом справа налево и провести суммирование:

По сравнению с умножениями это быстрая операция, не заслуживающая особого внимания — как и два лишних сложения в скобках.

Для построения эффективного алгоритма осталось превратить это наблюдение в рекурсивную процедуру. Половинки чисел тоже будем делить на половинки и так далее, пока не дойдём до достаточно коротких чисел, которые можно перемножить в столбик или, допустим, через lookup table.

Поскольку мы каждый раз делим задачу на три задачи с вдвое меньшими (по количеству бит) числами, для перемножения двух чисел длины нам потребуется рекурсия глубины и суммарно умножений чисел наименьшей длины; отсюда получаем оценку сложности в

Занятный факт — аналогичные фокусы с экономией за счёт одновременных умножений используются ещё в ряде мест. Так, два комплексных числа и также можно перемножить за три вещественных умножения вместо четырёх, вычислив , и . А алгоритм Пана для быстрого перемножения матриц основывается на том, что можно одновременно вычислить произведения двух пар матриц и за меньшее число умножений, чем по отдельности [1, 2]. Не говоря уж о том, что само по себе перемножение матриц быстрее, чем за — это быстрое одновременное умножение матрицы на векторов.

Числа vs многочлены: алгоритмы Тоома-Кука

При виде магического сокращения вычислительной сложности при разбиении множителей на две части как-то сам собой возникает вопрос: а можно разбить множители на бóльшее число частей и получить бóльшую экономию?

Ответ — да; и подход, позволяющий это сделать, включает в себя алгоритм Карацубы как частный случай. Но для его формулировки нам придётся проделать некий фокус.

Давайте попробуем разбить те же самые числа на три части:

Если мы внимательно посмотрим на коэффициенты при степенях десятки, которые возникают при перемножении этих скобок:

То (при наличии опыта в алгебре) заметим, что где-то мы такое уже видели. При перемножении многочленов!

Если взять части наших чисел a и b и объявить их коэффициентами многочленов и при соответствующих степенях, числа в таблице выше будут не чем иным, как коэффициентами многочлена :

Сами же числа получаются из многочленов путём вычисления значения в некоторой точке. Какой именно — зависит от системы счисления и размера частей:

Хорошо, свели одну задачу к другой. В чём преимущество многочленов? Помимо того, что это некоторые формальные конструкции с параметрами, это также функции; чтобы вычислить в произвольной точке, не нужно перемножать многочлены — достаточно вычислить оба значения в этой точке и перемножить их. Если бы я писал продакшн-код, в котором по какой-то причине нужно перемножать многочлены, я бы и вовсе сделал перемножение ленивым.

Но нам не нужно вычислять значение в точке. Нам нужны коэффициенты. А коэффициенты многочлена можно восстановить по значениям в точках, решив систему линейных уравнений:

Здесь — это точки, в которых нам известны значения многочлена, в правой части — сами эти значения, а — неизвестные нам коэффициенты многочлена. Количество неизвестных соответствует степени многочлена + 1; чтобы решение было единственным, нужно, соответственно, знать значения в таком же количестве точек. В нашем примере это пять точек, потому что у многочлена-произведения степень 4:

Если переписать эту систему уравнений в матричном виде, получим

Соответственно, для создания алгоритма быстрого умножения чисел нам достаточно:

выбрать, на сколько частей мы разбиваем числа (можно даже разбить и на разное количество частей); выбрать точки , в которых мы будем вычислять значения многочленов; построить по ним матрицу Вандермонда; вычислить её обратную матрицу.

В ходе алгоритма нам нужно будет два раза умножить на прямую матрицу (по разу для каждого из чисел, которые мы хотим перемножить), перемножить результаты алгоритмом умножения чисел меньшего размера, и один раз умножить получившийся вектор на обратную матрицу.

Давайте посмотрим на матрицу для точек :

from sympy import Rational from sympy.matrices import Matrix # Точки, в которых будем вычислять значения многочленов: x = [0, 1, -1, 2, -2] # Матрица Вандермонда, построенная по этим точкам: v = Matrix([ [ Rational(x_i ** j ) for j, _ in enumerate(x) ] for x_i in x ])

(Серым я отметил числа, не имеющие значения, поскольку соответствующие коэффициенты в многочленах-множителях заведомо равны нулю.)

И на её обратную:

За исключением некоторой проблемы с делением на 3, подавляющая часть вычислений здесь представляется битовыми сдвигами, сложениями и вычитаниями «коротких» чисел, а это операции «простые» — имеющие линейную сложность.

Как проанализировать итоговую сложность получившегося алгоритма? Давайте обозначим количество операций через , где — количество бит в наших множителях, и выведем рекуррентную формулу:

Что здесь написано: умножение двух чисел длиной бит мы умеем сводить к 5 умножениям чисел длиной бит и ещё какому-то количеству простых операций над числами длиной бит. Применяем основную теорему о рекуррентных соотношениях и получаем итоговую сложность

Таким образом мы ускорили умножение с до .

Алгоритмы, получаемые таким образом, называются алгоритмами Тоома-Кука. Они активно используются на практике; в одной только библиотеке GMP поддержано 13 разных вариантов разбиения чисел .

Закономерный следующий вопрос: что дальше? Если число бьётся на частей, сложность получается

Показатель степени при большом можно упростить:

Получается, мы можем построить алгоритм со сколь угодно близкой к 1 степенью в асимптотике? Увы, тут есть сложности.

Во-первых, это непрактично. Логарифм возрастает крайне медленно; асимптотика, соответственно, тоже будет падать медленно, а константа при этом будет быстро расти, потому что числа в матрицах будут всё больше и разнообразнее.

Во-вторых, это неинтересно. Да-да! Дальше мы будем обсуждать алгоритмы, сложность которых лучше , каким маленьким бы ни было .

Занятный факт — аналогичной методу Тоома-Кука техникой строятся быстрые алгоритмы перемножения матриц. Однако процедура перемножения матриц по своей математической природе оказалась намного сложнее перемножения многочленов; поэтому до сих пор нет уверенности, что можно перемножать матрицы за для сколь угодно малого . Лучшая асимптотика на сегодняшний день составляет примерно .

Многочлены vs преобразование Фурье: алгоритм Шенхаге-Штрассена

Раз рекуррентное деление на несколько частей нам не интересно, давайте попробуем сделать радикальный шаг. Что, если делить числа не на фиксированное количество частей, а на части фиксированной длины?

Например, на десятичные разряды. В таком случае нам нужно будет точек для -разрядного числа; в остальном подход как будто бы тот же самый, что в предыдущем разделе. Что ж, давайте возьмём и проведём численный эксперимент, чтобы убедиться, что всё работает!

import math import numpy as np # Числа, которые мы изначально собирались перемножить: a = 235739098113 b = 187129102983 m = len(str(a)) # Коэффициенты соответствующих многочленов в порядке # возрастания степени. Поскольку результирующий многочлен # будет степени 2*m-1, добиваем нулями до нужной ширины: a_coefs = [int(a_i) for a_i in str(a)[::-1]] + [0] * (m - 1) b_coefs = [int(b_i) for b_i in str(b)[::-1]] + [0] * (m - 1) n = len(a_coefs) # Точки, в которых будем вычислять значения многочленов: x = np.arange(n) # Матрица Вандермонда, построенная по этим точкам: v = np.vander(x, increasing=True) # Вычисление значения многочлена в точке — не что иное, как # умножение этой матрицы на вектор коэффициентов: a_y = v @ a_coefs b_y = v @ b_coefs # Поточечно перемножаем значения, чтобы получить # значения многочлена-произведения: c_y = a_y * b_y # Восстанавливаем коэффициенты многочлена-произведения: c_coefs = np.linalg.solve(v, c_y) # Для сверки считаем коэффициенты ""в лоб"": actual_c_coefs = [ sum(a_coefs[j] * b_coefs[i-j] for j in range(i+1)) for i in range(n) ] # Считаем длину вектора-разности и делим на длину настоящего, # чтобы получить относительную погрешность: print(np.linalg.norm(c_coefs - actual_c_coefs) / np.linalg.norm(actual_c_coefs))

Запускаем и…

2.777342817120168e+17

Хо-хо, да это не просто мимо, это фантастически мимо! Но почему?

Оказывается [3], у матриц Вандермонда есть неприятное свойство — решать системы с ними в подавляющим большинстве случаев очень плохая идея, потому что погрешность результата растёт экспоненциально с размером матрицы. Можно улучшить ситуацию, взяв вместо комплексные точки на единичной окружности:

x = np.exp(1j * np.random.uniform(0, math.pi, size=n)) ... 0.00015636299542432733

Но лучшим выбором оказывается взять точки, равномерно распределённые на единичной окружности и являющиеся корнями из единицы степени .

x = np.exp(-1j * np.linspace(0, 2*math.pi, n, endpoint=False))

Что ещё за корни из единицы? Хотя в привычной нам вещественной арифметике равенство выполнено только при , на комплексной плоскости всё гораздо веселее. У каждого многочлена степени есть ровно комплексных корней, и многочлена это правило (также известное как основная теорема алгебры ) тоже касается.



Корнями из единицы степени являются числа на комплексной плоскости, расположенные в вершинах правильного -угольника, вписанного в единичную окружность: Поскольку при умножении комплексных чисел их модули перемножаются (а у всех корней из единицы модуль равен единице — они же на единичной окружности), а фазы складываются, при возведении числа в последовательные степени мы получим по очереди все корни из единицы. За это свойство называется первообразным корнем из единицы.

Запускаем новый вариант кода и получаем

1.5964929527133826e-15

Отлично! Мы дошли до предела машинной точности.

Но самое изумительное — при таком выборе иксов матрица представляет собой не что иное, как матрицу дискретного преобразования Фурье ! А значит, мы можем умножать векторы на эту матрицу и решать систему уравнений с ней алгоритмом быстрого преобразования Фурье за операций сложения и умножения — вместо наивного алгоритма за .

Что такое дискретное преобразование Фурье? Преобразование Фурье досталось нам из высшей математики и волновой физики. В физике оно известно как способ разложить сигнал (например, аудио) какой-то произвольной формы на сумму элементарных сигналов — гармоник с длиной волны, кратной ширине отрезка: Одна гармоника соответствует постоянному звуку некой фиксированной частоты и громкости; сумма гармоник может дать любую мелодию. Сколь угодно сложный сигнал можно разложить на гармоники, если взять их достаточно много. Совокупность гармоник (частоты + амплитуды) называется спектром сигнала. Преобразование Фурье — построение в первую очередь теоретическое; Жозеф Фурье открыл его задолго до появления компьютеров. На практике мы не можем оперировать сигналами как функциями; у нас есть только дискретизации, замеры значения сигнала с каким-то шагом по времени. Согласно теореме Котельникова-Найквиста-Шеннона при такой ограниченной информации мы всё ещё можем восстановить гармоники (а с ними — и весь сигнал), если предположим, что сигнал был достаточно простым (в нём не было каких-то сверхвысоких частот). Этим и занимается дискретное преобразование Фурье — фактически это матрица, которую нужно умножить на вектор со значениями дискретизированного сигнала, чтобы получить вектор с амплитудами, соответствующими разным частотам гармоник. Так, дискретизация на картинке выше недостаточно частая, чтобы восстановить самую высокую частоту: А более частая, удовлетворяющая условию теоремы — достаточна: По роковому стечению обстоятельств матрица дискретного преобразования Фурье является матрицей Вандермонда, построенной по корням из единицы. В целом анализ Фурье — очень интересный раздел математики, связывающий воедино множество ранее разобщённых концепций. Его подробное описание, конечно, уходит совсем далеко за рамки статьи; можно начать со статей на Хабре « Простыми словами о преобразовании Фурье » и « Преобразование Фурье в действии: точное определение частоты сигнала и выделение нот ».

Что такое быстрое преобразование Фурье? Дискретное преобразование Фурье применяется повсеместно для обработки сигналов (например, шумоподавления), часто реализуется аппаратно и встречается с совершенно неожиданных устройствах (например, МРТ-сканерах [4]). Это создаёт потребность в создании настолько быстрого алгоритма, насколько возможно. Умножение на матрицу «в лоб» стоит — это считается довольно медленным в практических алгоритмах. Быстрое преобразование Фурье — название семейства алгоритмов, достигающих асимптотики за счёт сведения задачи к нескольким задачам меньшего размера с линейной стоимостью одного шага рекурсии. Самый простой вариант — алгоритм для , сводящий задачу к двум задачам размера ; рекурсия глубины приводит к общей сложности . Про него в интернете, конечно, написано много материалов разной степени читабельности. Но давайте я попробую очень быстро на пальцах показать, за счёт чего вычисление можно ускорить до . Дискретное преобразование Фурье и обратное дискретное преобразование Фурье — восстановление сигнала по спектру — очень похожи математически, и алгоритм почти идентичный; объяснить его будет проще на примере обратного преобразования. Обратное преобразование заключается в том, что нужно взять гармоник, у которых мы знаем частоту и амплитуду, посчитать их значения в точках отрезка и сложить, получив вектор из значений сигнала-суммы гармоник. На рисунке пример для : Поделив отрезок пополам, можно заметить, что гармоники делятся на два типа: В верхней части — кривые, половинки которых одинаковы в первой и второй половине отрезка; в нижней — выглядящие вертикально отражёнными, то есть одна половина получается из другой умножением на . А значит, можно сэкономить, вычисляя значения всех гармоник только на половине отрезка! При этом задача для произвольной гармоники на половине отрезка соответствует задаче для гармоники с вдвое меньшей частотой и точек: Получается, что для решения исходной задачи восстановления сигнала в точках по данным гармоникам нам достаточно: просуммировать гармоник первого типа (взяв вдвое меньшую частоту) в точках; просуммировать гармоник второго типа (также взяв вдвое меньшую частоту) в точках; первую сумму — вектор длины — повторить два раза, получив вектор длины ; вторую сумму — также вектор длины — тоже повторить два раза, но второй раз — со знаком минус; два получившихся вектора сложить. Поскольку мы свели задачу для к двум задачам для и дополнительным шагом обработки стоимостью , итоговая сложность получается равной . Так мы и получили предельно простой пересказ алгоритма Кули-Тьюки !

Делить числа на части по десятичным разрядам — это, конечно, не самый эффективный способ. Тут даже нет как таковой рекурсии — после первого разделения на части мы сразу приходим к числам от 0 до 9, которые можно перемножить по таблице умножения. Наилучшая асимптотика в таком алгоритме получается, если делить -битные числа на части длиной примерно бит.

Полностью алгоритм Шенхаге-Штрассена выглядит так.

Берём на вход два числа, которые хотим перемножить; числа эти длины бит. На практике это значит, что бóльшее из чисел имеет бит.





Делим двоичную запись чисел на фрагменты, каждый длиной примерно бит:







Эти фрагменты — целые числа с бит — объявляем коэффициентами многочленов, которые нужно перемножить:



Теперь у нас на руках два вектора коэффициентов многочленов. К этим векторам применяем дискретное преобразование Фурье:









Для этого нам потребуются вычисления с плавающей точкой, гарантирующие достаточно точный результат — на это потребуется порядка бит. Умножения делаем рекурсивно этим же алгоритмом. Полученные векторы перемножаем поэлементно. Для перемножения элементов также используем рекурсивно этот алгоритм (или простые алгоритмы, если числа уже достаточно маленькие). Рекурсия будет очень небольшой глубины, потому что на каждом шаге мы от входных данных размера переходим к ; например, для чисел, занимающих гигабайт (!) каждое, глубина рекурсии будет всего 6. К получившемуся вектору применяем обратное преобразование Фурье. Умножения делаем рекурсивно этим же алгоритмом.









Наконец, из получившегося вектора коэффициентов многочлена-произведения восстанавливаем число-результат умножения, суммируя в столбик справа налево.





Формула асимптотической сложности получившегося алгоритма довольно страшная, в целом асимптотика получается чуть-чуть хуже . Но можно оценить полёт мысли и количество математических конструкций, требующихся для достижения такого результата.

Модульная арифметика и второй алгоритм Шенхаге-Штрассена

Хотя первый алгоритм Шенхаге-Штрассена круто улучшает асимптотику по сравнению с ранее существовавшими методами, у него всё ещё есть зоны роста. Во-первых, на каждом шаге рекурсии происходит экспоненциальное уменьшение размеров чисел — с до . Из-за этого глубина рекурсии очень мала и воспользоваться ускорением получается не в полном объёме. Во-вторых, необходимость производить расчёты с плавающей точкой разной точности весьма непрактична — мы все привыкли к float и double, а реализация чисел с плавающей точкой настраиваемой ширины весьма нетривиальна. (Здесь читатель может возразить, что многое из вышеописанного было нетривиально. Могу только согласиться.)

Второй алгоритм Шенхаге-Штрассена лишён этих двух недостатков, более быстр и в теории, и в практике и наиболее широко используется — например, в библиотеке GMP .

Для решения первой проблемы давайте попробуем разбить числа на более крупные фрагменты — например, размера вместо . Здесь мы незамедлительно столкнёмся с проблемой: для дискретного преобразования Фурье в таком случае потребуется операций умножения чисел из бит; каждое такое умножение будет стоить в лучшем случае (напомню, все алгоритмы выше стоили ещё дороже), что даёт нам суммарную сложность не меньше , что уже хуже предыдущего алгоритма. Что-то здесь нужно ускорить.

Для решения второй проблемы можно вспомнить, что в модульной арифметике тоже можно делать быстрое преобразование Фурье. Тогда мы будем иметь дело только с целыми числами! А если подобрать в качестве элементов матрицы Фурье степени двойки, то на них можно будет умножать быстрее, чем за . В идеале вообще за , потому что умножение на степень двойки — это просто битовый сдвиг.

Что такое модульная арифметика? Арифметика по модулю — это ровно то, о чём можно подумать из названия. Привычные арифметические операции (сложение, вычитание, умножение) берутся с единственным изменением — после проведения операции надо взять остаток от деления результата на некое фиксированное число p. Так, в арифметике по модулю 7 имеем , , но , . Принято писать Арифметика по модулю нам, программистам, очень близка. Если вы оперируете 32-битными (или 64-битными) беззнаковыми целыми числами в своём коде, вы фактически делаете все операции в арифметике по модулю (или, соответственно, ). Примечательный факт в том, что при таком определении арифметических операций мы получаем полноценную арифметику, в которой сохраняется большинство свойств, к которым мы привыкли в обычной арифметике. Но, конечно, есть нюансы. Множество чисел в арифметике по модулю p называется кольцом вычетов по модулю и обозначается ; в Серьёзных Книгах также можно встретить запись . В нём содержатся числа Само число p в арифметике по модулю эквивалентно нулю (таков остаток от деления на само себя); эквивалентно 1 и так далее. Отрицательные числа работают по схеме, привычной программистам: эквивалентно , эквивалентно и так далее. Деление в модульной арифметике — это первый нюанс. В нет дробей; как определить частное двух чисел, не делящихся друг на друга? По определению деления — это такое число, что . Возвращаясь к примерам в арифметике по модулю 7, из равенства получаем Однако не всегда в модульной арифметике возможно поделить два числа друг на друга. Это второй нюанс — произведение двух ненулевых чисел в модульной арифметике может быть равно нулю! Так, в арифметике по модулю 6 имеем . Такие числа называются делителями нуля и делить на них не получится. Само существование и в арифметике по модулю 6 противоречило бы некоторым аксиомам; это всё равно, что делить на ноль. На практике мы можем легко проверить перебором, что подходящих на роль частного чисел не существует: Z_6 = range(6) [(x * 2) % 6 for x in Z_6] # [0, 2, 4, 0, 2, 4] — нет единицы [(x * 3) % 6 for x in Z_6] # [0, 3, 0, 3, 0, 3] — нет единицы Множество чисел, не являющихся делителями нуля, называется мультипликативной группой кольца вычетов по модулю p и обозначается . Например, в случае имеем — ведь как мы выяснили только что, 2 и 3 являются делителями нуля; кратная двойке четвёрка — тоже: . Примечательный факт про мультипликативную группу — любые два числа в ней можно умножать и делить друг на друга, и снова получать элементы из этой группы. Так, . Если основание арифметики — простое число, делителей нуля в ней не существует и можно делить друг на друга любые числа. Соответственно, в мультипликативной группе в этом случае содержатся все числа из , кроме нуля: Как находить частное двух чисел на практике, кроме как перебором? Занимательный факт из алгебры: если в мультипликативной группе элементов, то любой её элемент в степени равен единице. Давайте проверим на паре примеров: Z_7_mul = range(1, 7) [pow(x, 6, 7) for x in Z_7_mul] # [1, 1, 1, 1, 1, 1] Z_8_mul = [1, 3, 5, 7] [pow(x, 4, 8) for x in Z_8_mul] # [1, 1, 1, 1] А это значит, что и, соответственно, . Возвести число в -ю степень можно за умножений алгоритмом быстрого возведения в степень . Отсюда нюанс третий — в мультипликативной группе все числа являются корнями из единицы степени ! Эти корни при правильном обращении ведут себя аналогично корням из единицы в комплексной арифметике, и для них тоже можно построить алгоритм быстрого преобразования Фурье.

Наблюдение первое: самая удобная арифметика

Для того, чтобы быстро делать умножения во время быстрого преобразования Фурье, нам нужно, чтобы некие числа сочетали два свойства: были степенями двойки — чтобы можно было быстро на них умножать, и были корнями из единицы — чтобы быстрое преобразование Фурье в принципе работало. Значит, привычная всем программистам n-битная арифметика не подходит — потому что это фактически вычисления по модулю , а значит, любая степень двойки при возведении в достаточно большую степень обращается в ноль и никак не может быть корнем из единицы:

num_bits = 5 [pow(2, i, 2**num_bits) for i in range(2*num_bits)] # [1, 2, 4, 8, 16, 0, 0, 0, 0, 0]

Если же основание арифметики кратно двум, но не степени двойки, мы не получим ноль, но и никогда не получим единицу:

mod = 6 [pow(2, i, mod) for i in range(2*mod)] # [1, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2]

Потому что двойка является делителем нуля (в примере выше её можно умножить на три и получить 0 по модулю 6) и не является членом мультипликативной группы.

Гораздо лучше дела обстоят с основаниями, взаимно простыми с двойкой:

mod = 5 [pow(2, i, mod) for i in range(2*mod)] # [1, 2, 4, 3, 1, 2, 4, 3, 1, 2]

Поскольку в этом случае двойка состоит в мультипликативной группе, всегда есть степень, в которую её можно возвести, чтобы получить 1 — и это справедливо также для любой степени двойки. У нас есть неограниченный запас простых чисел, мы могли бы просчитать их наперёд с запасом и делать вычисления по модулю достаточно большого простого числа… Но умножать числа по произвольному модулю быстро не получится даже на степень двойки, потому что после битового сдвига нужно брать остаток от деления, а это медленно.

Время для первого наблюдения — идеально для наших нужд подходит арифметика по модулю . Это число гарантированно взаимно простое с двойкой (потому что нечётное), и по нему легко брать остаток от деления. Как?

Допустим, мы умножили некое число x на некую степень двойки , сделав битовый сдвиг. Если результат уместился в первые n бит, всё отлично. Если результат равен , тоже неплохо. Если больше — то есть случилось переполнение — все биты, начиная с -го, надо обнулить. И для этого есть простой алгоритм!

В вычислениях по модулю имеем . Домножая равенство на , получим . Соответственно, каждый лишний -й бит мы можем превратить в вычитание -го бита. Собираем по битам число, которое надо вычесть, и вычитаем по модулю — эта операция стоит . Et voilà!

И дополнительный приятный факт: . Двойка является корнем из единицы заведомо известной нам степени .

Что там с асимптотикой?

Окей, мы решили, что сводим задачу умножения длинных чисел к нескольким задачам умножения чисел по модулю посредством быстрого преобразования Фурье. Более формально, если на входе у нас были числа длиной бит, мы делим их на частей по бит, , по уже хорошо знакомой нам процедуре:

Дальше снова превращаем их в многочлены степени :

Коэффициенты этих многочленов рассматриваем в арифметике по модулю , где — количество бит, способное вместить сумму произведений двух чисел длины бит, чтобы не было переполнения. Именно таким может быть самый большой коэффициент в произведении этих двух многочленов:

Мы уже знаем, что можно свести умножение таких многочленов к умножению чисел в посредством быстрого преобразования Фурье; эти умножения поменьше легко можно провести этим же алгоритмом, а взять потом остаток от деления на , как мы уже выяснили, можно легко и быстро. Само сведение — быстрое преобразование Фурье в модульной арифметике с быстрыми корнями из единицы — обойдётся нам в сложений и умножений стоимости , то есть суммарно битовых операций. Итого сложность совершения умножения имеет вид

Насколько крутое ускорение мы можем получить? Сейчас я проведу сильно упрощённый анализ «на пальцах»; более строгий можно глянуть, например, в [5].

Если выбрать и учесть, что очень мало по сравнению с , имеем

Сделав замену , получим более простую для анализа формулу:

Так, рекуррентное соотношение. От бит переходим к , потом к , потом к и так далее. Раскрывая раз, получаем

убывает очень быстро, и как только мы дойдём до какого-то достаточно малого числа, рекурсия остановится. Какая будет глубина рекурсии? Можем заметить, что на -м шаге длина чисел, с которыми мы имеем дело, имеет вид

Соответственно, решая уравнение , получаем глубину рекурсии . Складывая степени двойки от нулевой до (в равенстве выше они умножаются на const), получаем и суммарную сложность

И это медленно! В первом алгоритме Шенхаге-Штрассена мы уже добились сложности чуть хуже . Нужно ускорить ещё.

Наблюдение второе: самые короткие многочлены

В выражении, оценивающем сложность

можно заметить, что основной вклад в слишком большой результат вносят множители-степени двойки. Они там потому, что разбивая число на частей, мы сводим задачу к умножений. Это нужно, потому что при умножении двух -битных чисел получается -битное число.

Но нам не нужно -битное число. Как только мы сделали первый шаг рекурсии, все вычисления у нас происходят по модулю . А при вычислениях по модулю длина чисел не может изменяться! Можно ли как-то вместо удвоения длины и взятия остатка от деления обойтись расчётами на битах?

Если мы хотим при этом сохранить преимущества быстрого преобразования Фурье, от перемножения многочленов мы отказаться не можем. Есть ли в мире многочленов что-то, похожее на арифметику по модулю? Есть!

Арифметика многочленов по модулю??? В жизни нужно довольно рано свернуть не туда, чтобы заработать опыт в арифметике многочленов. Но ничего страшного в ней нет; связь между многочленами и числами, которую мы используем для построения быстрых алгоритмов умножения, также делает арифметику многочленов довольно похожей на привычную. Складывать и умножать многочлены мы уже умеем — там всё очевидно. Менее очевидно, что многочлены также можно друг на друга делить с остатком — причём это можно делать вот прямо в столбик, как обычные целые числа. Можем быстро проверить в SymPy, что всё правильно: import sympy x = sympy.Symbol(""x"") f = 5*x**5 + 4*x**4 + 3*x**3 + 2*x**2 + x g = x**2 + 2*x + 3 sympy.div(f, g, domain=""Q"") # (5*x**3 - 6*x**2 + 20, -39*x - 60) Как только есть деление с остатком, можно ввести арифметику по модулю; основанием такой модульной арифметики, соответственно, будет уже не число , а многочлен . Подобно тому, как мы строим модульную арифметику, объявляя, что теперь число эквивалентно нулю, здесь мы объявляем, что многочлен эквивалентен нулю. Многочлен становится эквивалентен , — многочлену и так далее. Всё это продолжает работать, если мы меняем арифметику коэффициентов многочленов, заменяя привычные нам целые или вещественные числа на арифметику по модулю . Выстраивается каскад абстракций: многочлен — это сумма степеней икса с коэффициентами из некоторого множества; неважно, какого именно — главное, чтобы мы эти коэффициенты могли складывать, умножать и (иногда) делить. Этого достаточно, чтобы определить сложение, умножение и деление для самих многочленов, в том числе по модулю . Коэффициенты при этом живут своей независимой жизнью.

При обычном перемножении многочленов коэффициент при соответствует битам произведения чисел, начиная с -го. Если же мы делаем расчёты по модулю , коэффициент при становится эквивалентен нулевому коэффициенту (при ) со знаком минус:

А в задаче умножения по модулю -й бит… тоже соответствует нулевому биту со знаком минус!

Это и есть наше ключевое второе наблюдение: перемножение многочленов по модулю эквивалентно перемножению чисел по модулю .

Теперь у нашего многочлена-произведения есть только значащих коэффициентов. Но есть нюанс: как только мы начинаем рассматривать многочлены по модулю, фраза значение многочлена в точке теряет смысл. Многочлен в арифметике по модулю — это не конкретная функция , а совокупность функций вида

Коэффициенты могут быть произвольными, и могут изменять значения многочлена в разных точках.

Мы можем быстренько провести вычислительный эксперимент, чтобы проверить, насколько хорошо заработает наш проверенный подход с матрицей Вандермонда, если мы попытаемся перемножать многочлены по модулю, просто урезав длину вектора коэффициентов. Попробуем взять разные наборы точек и посмотрим, что будет.

# Будем делить числа на 4 куска по 2 бита. m = 4 n_ = 4 # n' с запасом # Основание арифметики коэффициентов: mod = 2**n_ + 1 # 17 # Два 8-битных множителя: a_coefs = [0b01, 0b01, 0b10, 0b01] # 101 b_coefs = [0b01, 0b11, 0b00, 0b01] # 77 def construct_vandermonde_matrix_and_inverse(xs: List[int]): # Строим матрицу Вандермонда ""в лоб"", # потому что нам нужна модульная арифметика: v = np.array([ [pow(xs[i], j, mod) for j in range(m)] for i in range(m) ]) # Дальше хитрый фокус, чтобы обратить матрицу # в модульной арифметике. Да, мне было лень писать # метод Гаусса или конвертировать матрицу из sympy. det = int(round(np.linalg.det(v))) det_inv = pow(det, mod - 2, mod) v_inv_real = np.linalg.inv(v) * det * det_inv v_inv = np.array(np.round(v_inv_real), dtype=int) % mod # Проверяем, что действительно получилась # обратная матрица в модульной арифметике: assert np.all((v @ v_inv) % mod == np.eye(m, dtype=int)) return v, v_inv # Перебираем разные наборы точек: for xs in [ [2, 8, 15, 9], [2, 4, 8, 16], [3, 5, 7, 11], [5, 7, 11, 13], ]: v, v_inv = construct_vandermonde_matrix_and_inverse(xs) a_y = (v @ a_coefs) % mod b_y = (v @ b_coefs) % mod c_y = (a_y * b_y) % mod c_coefs = (v_inv @ c_y) % mod print(c_coefs) # [14 2 4 8] # [ 2 10 4 16] # [ 4 4 0 8] # [ 0 6 4 13]

В зависимости от выбранных точек получаем разные коэффициенты произведения! Но, в отличие от прошлого раза, теперь дело заведомо не в вычислительной погрешности — уж перемножать целые числа мы умеем точно.

Дело как раз в том, что мы никак не учли здесь, что мы умножаем по модулю . Как это учесть?

Посмотрим ещё раз на многочлен по модулю:

На самом деле есть несколько точек, в которых фраза значение многочлена в точке не бессмысленна. Эти точки — корни многочлена ! В этих точках «произвольная» часть этой обобщённой функции всегда обращается в ноль, благодаря чему значение фиксируется.

Какие это точки в примере выше?

def xmp1(x): return (pow(x, m, mod) + 1) % mod {i: xmp1(i) for i in range(mod)} # { 0: 1, # 1: 2, # 2: 0, <-- # 3: 14, # 4: 2, # 5: 14, # 6: 5, # 7: 5, # 8: 0, <-- # 9: 0, <-- # 10: 5, # 11: 5, # 12: 14, # 13: 2, # 14: 14, # 15: 0, <-- # 16: 2}

А это — нечётные степени двойки, взятые по модулю:

[pow(2, i, mod) for i in range(1, mod, 2)] # [2, 8, 15, 9, 2, 8, 15, 9]

В более общем случае это нечётные степени числа .

Нечётные степени не очень удобны для быстрого преобразования Фурье. Тут остаётся последний шаг — факторизовать матрицу Вандермонда для чисел , превратив в произведение матрицы Фурье и диагональной (которая не мешает, потому что на неё можно быстро умножать):

Итак, с перемножением многочленов по модулю разобрались — вернёмся к анализу сложности алгоритма. Поскольку мы перешли от многочленов порядка к многочленам порядка , множитель 2 в формуле сложности алгоритма исчезает:

Глубина рекурсии остаётся порядка , но без накапливающегося множителя-двойки также становится порядка :

Суммарная сложность теперь имеет вид

Что наконец-то превосходит первый алгоритм Шенхаге-Штрассена!

Собираем алгоритм

Итак! Перейдём к полному описанию второго алгоритма.

Формулируем изначальную задачу как задачу умножения по модулю . Какие бы у нас ни были изначально числа, всегда можно взять достаточно большим, чтобы результат умножения влез в бит. Для удобства рекурсии выбираем в качестве степень двойки.



Выбираем числа и такие, что и . Есть хитрые формулы для наилучшего выбора, я их приводить не буду; можно подсмотреть в [5]. Делим входные числа, которые нужно перемножить, на частей по бит.



Превращаем в многочлены с коэффициентами, содержащими бит, то есть добавляем несколько нулевых бит, чтобы промежуточные вычисления помещались без переполнения.



Теперь у нас на руках два вектора коэффициентов многочленов. Векторы длины , числа в них длины бит. Эти векторы умножаем сперва на диагональную матрицу (в формулах выше) за , потом делаем быстрое преобразование Фурье за .



Полученные векторы перемножаем поэлементно. Для перемножения чисел по модулю используем рекурсивно этот же самый алгоритм (или простые алгоритмы, если числа уже достаточно маленькие). Здесь будет рекурсия глубины .



К получившемуся вектору применяем обратное преобразование Фурье за , потом умножаем на обратную диагональную матрицу за .







(Обратите внимание на слишком длинный элемент 1000000 в этом примере — это ровно , наибольшее число, разрешённое модульной арифметикой!) Из получившегося вектора коэффициентов многочлена-произведения восстанавливаем число-результат умножения, суммируя в столбик справа налево за .





Вот и всё! Все гениальные приёмы второго алгоритма Шенхаге-Штрассена лежат у нас перед глазами. Конечно, для реализации этого алгоритма, эффективной на практике, нужно учесть ещё много нюансов и применить много приёмов; но на уровне идейном мы освоили его целиком.

В совсем не таком уж далёком 1960 году Андрей Колмогоров, один из величайших математиков своего времени, выдвинул гипотезу, что невозможно умножать числа быстрее, чем за . И совершенно изумительно видеть, насколько быстрее оказалось возможно умножать числа, чем это изначально предполагалось. В этой статье мы рассмотрели четыре основополагающих алгоритма, перейдя от к ; для их понимания нам пришлось разобраться в теории Фурье, модульной арифметике и алгебре многочленов.



За рамками статьи остался алгоритм Фюрера и его варианты, а также опубликованный в 2020-м году [6] алгоритм с заявленной сложностью ; если эта статья окажется востребована, возможно, когда-нибудь мы разберём и их.



Спасибо за внимание!

P. S.

Эту статью я старался написать максимально популярно, избегая присущей учебникам математической строгости. Некоторые формулы намеренно упрощены, где-то вообще удалось обойти без них (мало где); в их оформлении там, где они остались, я сделал акцент на читаемость с ходу, без разбора с бумажкой и ручкой (выделение цветом, зачёркивание сокращённых величин); также я старался избегать математической терминологии, где это возможно («арифметика по модулю» вместо «в кольце вычетов по модулю»). Судьёй того, насколько моя задумка удалась, предстоит быть тебе, читатель; мне же остаётся лишь надеяться, что кто-то сможет почерпнуть из этого текста свежий взгляд на математику, обычно такую возвышенно-труднодоступную.

Литература

Pan, Victor. ""How can we speed up matrix multiplication?."" SIAM review 26.3 (1984): 393-415. PDF Pan, Victor. ""Strassen's algorithm is not optimal trilinear technique of aggregating, uniting and canceling for constructing fast algorithms for matrix operations."" 19th Annual Symposium on Foundations of Computer Science (sfcs 1978). IEEE, 1978. Pan, Victor. ""How bad are Vandermonde matrices?."" SIAM Journal on Matrix Analysis and Applications 37.2 (2016): 676-694. PDF Pharr, Matt, and Randima Fernando. GPU Gems 2: Programming techniques for high-performance graphics and general-purpose computation (gpu gems). Addison-Wesley Professional, 2005. HTML Kruppa, Alexander. ""A GMP-based implementation of Schonhage-Strassen’s large integer multiplication algorithm."" PDF Harvey, David, and Joris Van Der Hoeven. ""Integer multiplication in time O (n log n)."" Annals of Mathematics 193.2 (2021): 563-617. PDF

Библиотеки"'https://habrastorage.org/getpro/habr/upload_files/25e/ff8/ef9/25eff8ef9a9b8d57a06eab50dd502550.png'"['https://habrastorage.org/getpro/habr/upload_files/f10/fcd/d51/f10fcdd515599d3bfd17dd0aa589ab3c.svg', 'https://habrastorage.org/getpro/habr/upload_files/5d5/04c/01b/5d504c01b733914b364977725527c354.svg', 'https://habrastorage.org/getpro/habr/upload_files/790/9d6/413/7909d6413eb477756af95275133cac2a.svg', 'https://habrastorage.org/getpro/habr/upload_files/338/815/42b/33881542b5e72ea5de9ebb6c8d4e16e7.svg', 'https://habrastorage.org/getpro/habr/upload_files/537/971/f16/537971f1602ddb42f94a4470c9600052.svg', 'https://habrastorage.org/getpro/habr/upload_files/018/cd5/461/018cd5461be508f0a12a098da9eb60e3.svg', 'https://habrastorage.org/r/w32/getpro/habr/avatars/74d/d06/967/74dd06967a1076a76e308363cde1fc4e.jpg', 'https://habrastorage.org/getpro/habr/upload_files/258/c91/4b3/258c914b3f269945edede1f7103a7291.svg', 'https://habrastorage.org/getpro/habr/upload_files/aac/4e2/b90/aac4e2b90916f259d9ce35a0fd98a438.svg', 'https://habrastorage.org/getpro/habr/upload_files/d92/8e5/a02/d928e5a0278d00398cdf7dca16e0fe64.svg', 'https://habrastorage.org/getpro/habr/upload_files/74b/bbb/d07/74bbbbd07eaa38732b881cc91b7f7017.svg', 'https://habrastorage.org/getpro/habr/upload_files/932/dbc/fa7/932dbcfa764a21b0f75f6e14c296fc00.svg', 'https://habrastorage.org/getpro/habr/upload_files/a49/ab1/39c/a49ab139c8c2afb6b176c86636a6de3a.svg', 'https://habrastorage.org/getpro/habr/upload_files/4f8/e84/1ba/4f8e841ba02ce8dbd4840bc3a068d814.svg', 'https://habrastorage.org/getpro/habr/upload_files/dcb/fc2/46d/dcbfc246d15071ecff28f74ff72396fe.svg', 'https://habrastorage.org/getpro/habr/upload_files/853/490/26a/85349026a06f18ed2c3eb93b647dd0f5.svg', 'https://habrastorage.org/getpro/habr/upload_files/b80/ad3/a10/b80ad3a104a049a8752353b6f27ffa6f.svg', 'https://habrastorage.org/getpro/habr/upload_files/4f2/eb2/c71/4f2eb2c71f0466bc25ef99b39ec453dc.svg', 'https://habrastorage.org/getpro/habr/upload_files/3a0/6cc/bd7/3a06ccbd7d8702a173016b192a0c20ac.svg', 'https://habrastorage.org/getpro/habr/upload_files/6a3/876/f36/6a3876f36e29dadbfdea613951d34214.svg', 'https://habrastorage.org/getpro/habr/upload_files/813/c82/dc7/813c82dc7d63444cb41e00f893b5c09d.svg', 'https://habrastorage.org/getpro/habr/upload_files/d96/b4d/c63/d96b4dc630fead3d1e7435632fda355a.svg', 'https://habrastorage.org/getpro/habr/upload_files/3cd/0b1/8b7/3cd0b18b7354f192721af1b3017370b3.svg', 'https://habrastorage.org/getpro/habr/upload_files/475/585/74f/47558574fff7069592fe851a1d04d5d2.svg', 'https://habrastorage.org/getpro/habr/upload_files/050/001/f4b/050001f4b21986942c6f051469f075a8.svg', 'https://habrastorage.org/getpro/habr/upload_files/e0e/640/4b8/e0e6404b85d55f6780af6a589d11d22a.svg', 'https://habrastorage.org/getpro/habr/upload_files/5fb/09f/995/5fb09f9955ef2b9e542b10f677400aae.svg', 'https://habrastorage.org/getpro/habr/upload_files/0fb/263/ac1/0fb263ac17778256c5c9d72df048b310.svg', 'https://habrastorage.org/getpro/habr/upload_files/2ad/2a0/a8a/2ad2a0a8a802b5603e018a2dcba60a04.svg', 'https://habrastorage.org/getpro/habr/upload_files/a24/9f6/834/a249f68348677086f3b759706a1bedb1.svg', 'https://habrastorage.org/getpro/habr/upload_files/4c6/ce1/def/4c6ce1defa983ffd578bdbde9aefd5c1.svg', 'https://habrastorage.org/getpro/habr/upload_files/a35/e65/e38/a35e65e38ec8fe2df77950742548b029.svg', 'https://habrastorage.org/getpro/habr/upload_files/e4f/42b/4c3/e4f42b4c3fa3b4d72d9f2550411202d9.svg', 'https://habrastorage.org/getpro/habr/upload_files/138/a96/224/138a96224e2b2ad01252e2b9c15d718b.svg', 'https://habrastorage.org/getpro/habr/upload_files/605/441/ac9/605441ac9f8074d6fb6f37ba306d74d5.svg', 'https://habrastorage.org/getpro/habr/upload_files/fc9/93a/51d/fc993a51df9830a747fdf100f4c5de32.svg', 'https://habrastorage.org/getpro/habr/upload_files/e53/e44/ebf/e53e44ebfe129aa2a8579aab6635adf9.svg', 'https://habrastorage.org/getpro/habr/upload_files/e71/e1d/be6/e71e1dbe60ddd2cad13cdcf24548d22d.svg', 'https://habrastorage.org/getpro/habr/upload_files/2c0/772/bee/2c0772beeb1dbc4a6e90fa9d315a993b.svg', 'https://habrastorage.org/getpro/habr/upload_files/8a4/bf5/059/8a4bf5059cdbafbbf740a18fafca3e54.svg', 'https://habrastorage.org/getpro/habr/upload_files/0d4/cbd/11a/0d4cbd11a949344e5a309426112bbed7.svg', 'https://habrastorage.org/getpro/habr/upload_files/c40/4e1/80b/c404e180b0003cba052c3403ab337082.svg', 'https://habrastorage.org/getpro/habr/upload_files/c26/ef6/9bd/c26ef69bd492c168fcdca5651e24c5ed.svg', 'https://habrastorage.org/getpro/habr/upload_files/73e/ed6/927/73eed69279b99d0ea21afac7c3624ee1.svg', 'https://habrastorage.org/getpro/habr/upload_files/c6d/b85/5ca/c6db855cad1bc67fbdd420631d2cb70c.svg', 'https://habrastorage.org/getpro/habr/upload_files/b54/685/aba/b54685aba4b32063a11375c9f006585d.svg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/1a2/5cb/2d6/1a25cb2d6058982fa98ecfebd8d63b6f.png', 'https://habrastorage.org/getpro/habr/upload_files/263/d6d/cc7/263d6dcc7394957c007e4afe934cd9ef.svg', 'https://habrastorage.org/getpro/habr/upload_files/c93/667/300/c9366730041c5604afca54e643964c48.svg', 'https://habrastorage.org/getpro/habr/upload_files/6d5/bf9/a67/6d5bf9a67a815d639e4aeeec20eb8881.svg', 'https://habrastorage.org/getpro/habr/upload_files/9ce/bf5/f4a/9cebf5f4a38df60842eceabcf0aafbfd.svg', 'https://habrastorage.org/getpro/habr/upload_files/b72/e0a/856/b72e0a856ff341786d5854bcb99ae095.svg', 'https://habrastorage.org/getpro/habr/upload_files/212/cd9/09b/212cd909b9dd6ad8080e0a8edc198db9.svg', 'https://habrastorage.org/getpro/habr/upload_files/35c/181/d7f/35c181d7f9b79b9365bcf9f66ad8712c.svg', 'https://habrastorage.org/getpro/habr/upload_files/002/442/497/002442497747db08d715ce1d4d671650.svg', 'https://habrastorage.org/getpro/habr/upload_files/ae1/79c/26c/ae179c26c40720014eae5d28c5a78051.svg', 'https://habrastorage.org/getpro/habr/upload_files/118/4ae/350/1184ae350a10893eae6165e618f672a6.svg', 'https://habrastorage.org/getpro/habr/upload_files/343/a91/311/343a91311db735e865a1fbc17b0b2fd8.svg', 'https://habrastorage.org/getpro/habr/upload_files/b0c/881/385/b0c881385ec00373cf85affa31a9c800.svg', 'https://habrastorage.org/getpro/habr/upload_files/81b/36c/0f0/81b36c0f072237f1ccf086b6202bef28.svg', 'https://habrastorage.org/getpro/habr/upload_files/12e/286/218/12e28621885a8b779f980448c2d4bc97.svg', 'https://habrastorage.org/getpro/habr/upload_files/1e9/588/9e5/1e95889e5165fd58f87cbddf84ba1bf2.svg', 'https://habrastorage.org/getpro/habr/upload_files/b2a/8d1/af0/b2a8d1af02a6c4b42f92196c74aac024.svg', 'https://habrastorage.org/getpro/habr/upload_files/85a/0f4/a66/85a0f4a66c1b930fb581e3a2e23db135.svg', 'https://habrastorage.org/getpro/habr/upload_files/3fa/49b/095/3fa49b095d284ca28d608473b0dd29b7.svg', 'https://habrastorage.org/getpro/habr/upload_files/dca/fba/d77/dcafbad77b71c5bff9451f4c6a01965b.svg', 'https://habrastorage.org/getpro/habr/upload_files/3af/d24/dd2/3afd24dd2484a168fa172671096ad733.svg', 'https://habrastorage.org/getpro/habr/upload_files/399/593/ff9/399593ff913fd2c32ed13d3af2f31864.svg', 'https://habrastorage.org/getpro/habr/upload_files/e4d/f82/a8f/e4df82a8f32fcfe17166e4a7213b567c.svg', 'https://habrastorage.org/getpro/habr/upload_files/38b/e0a/0a6/38be0a0a63ac842a326eb6b32e5a3b63.svg', 'https://habrastorage.org/getpro/habr/upload_files/b0b/340/ce7/b0b340ce7a5a6f8170725bddf536565f.svg', 'https://habrastorage.org/getpro/habr/upload_files/672/d7a/1d4/672d7a1d48858390fbb338bf5feaa557.svg', 'https://habrastorage.org/getpro/habr/upload_files/843/32b/5b5/84332b5b5f95b95e774069673ac37344.svg', 'https://habrastorage.org/getpro/habr/upload_files/018/a2b/b43/018a2bb4319a2a3937cb9c4165e876d3.svg', 'https://habrastorage.org/getpro/habr/upload_files/b01/96e/c04/b0196ec04cb4a0679e05aba5c7e789b9.svg', 'https://habrastorage.org/getpro/habr/upload_files/761/3db/04d/7613db04d533c006932a85261ee520d4.svg', 'https://habrastorage.org/getpro/habr/upload_files/06a/78b/f40/06a78bf40434bb2ec006cc01f59a51f5.svg', 'https://habrastorage.org/getpro/habr/upload_files/ea5/67e/518/ea567e5181280cf954d226733f0d7c64.svg', 'https://habrastorage.org/getpro/habr/upload_files/267/238/4a4/2672384a441a677a9dc33b8373f2548d.svg', 'https://habrastorage.org/getpro/habr/upload_files/52c/957/284/52c9572843b57b13f4e792a161587cf0.svg', 'https://habrastorage.org/getpro/habr/upload_files/819/36d/f5a/81936df5a64e4b15927874d4efc5b495.svg', 'https://habrastorage.org/getpro/habr/upload_files/531/6e3/589/5316e358910c0690e5709c80b8da8a22.svg', 'https://habrastorage.org/getpro/habr/upload_files/83c/668/a1a/83c668a1a227173ac2363f8ad78c3469.svg', 'https://habrastorage.org/getpro/habr/upload_files/432/31a/a28/43231aa28e9947616c984895548bf272.svg', 'https://habrastorage.org/getpro/habr/upload_files/f93/eeb/a31/f93eeba314897cdd6976dae164099fa7.svg', 'https://habrastorage.org/getpro/habr/upload_files/a5f/784/8ec/a5f7848ec9c373de273a8ef5f93ef5d2.svg', 'https://habrastorage.org/getpro/habr/upload_files/3d2/662/beb/3d2662beb5749c86ba6de2124235c6d3.svg', 'https://habrastorage.org/getpro/habr/upload_files/892/cd4/8ea/892cd48eaa5323a10b7f77f96a215adc.svg', 'https://habrastorage.org/getpro/habr/upload_files/f07/312/e33/f07312e3361038541006e3d749c5750a.svg', 'https://habrastorage.org/getpro/habr/upload_files/278/ea6/9d4/278ea69d464abf81a8ebd1437adb9014.svg', 'https://habrastorage.org/getpro/habr/upload_files/3d4/09d/242/3d409d24299101cbfd2e8d92e6d6328b.svg', 'https://habrastorage.org/getpro/habr/upload_files/400/59f/8a3/40059f8a38246649884cf5add2b9d3ae.svg', 'https://habrastorage.org/getpro/habr/upload_files/817/338/5ea/8173385eaa91f7ffbd28cecbf7e00c86.svg', 'https://habrastorage.org/getpro/habr/upload_files/4f8/47f/866/4f847f8669b3799ce35529e7036277a0.svg', 'https://habrastorage.org/getpro/habr/upload_files/634/96a/c4c/63496ac4cfd2675f8fff6409e863dd32.svg', 'https://habrastorage.org/getpro/habr/upload_files/1e3/205/128/1e320512843ae98841ff980cf4011ed9.svg', 'https://habrastorage.org/getpro/habr/upload_files/b9e/915/104/b9e91510472f50f47150cd677cf060c1.svg', 'https://habrastorage.org/getpro/habr/upload_files/6df/b5a/972/6dfb5a97226e4f8d8566056e9eb27c5f.svg', 'https://habrastorage.org/getpro/habr/upload_files/690/0d2/119/6900d211928a192981c002a537636215.svg', 'https://habrastorage.org/getpro/habr/upload_files/399/1c8/a4f/3991c8a4f89e972ac984d4b497a5c856.svg', 'https://habrastorage.org/getpro/habr/upload_files/88e/9ce/e6f/88e9cee6f21af2c83921cf2194e941ac.svg', 'https://habrastorage.org/getpro/habr/upload_files/1d7/c09/069/1d7c0906951bbae390db2eec6f64be5d.svg', 'https://habrastorage.org/getpro/habr/upload_files/b4d/2f2/069/b4d2f2069746884ac36fb3873821463c.svg', 'https://habrastorage.org/getpro/habr/upload_files/7fb/1a8/f66/7fb1a8f663acd491fe7ec7b662d757e0.svg', 'https://habrastorage.org/getpro/habr/upload_files/b93/572/e9a/b93572e9a94dea42af03379a59e095a1.svg', 'https://habrastorage.org/getpro/habr/upload_files/eb0/798/ff7/eb0798ff7a21d4a38d2d9cf89d4dea5b.svg', 'https://habrastorage.org/getpro/habr/upload_files/28a/bad/97b/28abad97be36420c54c0005e281c47c5.svg', 'https://habrastorage.org/getpro/habr/upload_files/f4f/437/bf5/f4f437bf5f9f572786c6b96b6fd0768c.svg', 'https://habrastorage.org/getpro/habr/upload_files/0b3/ae9/45a/0b3ae945ab4cd8fcad3028e919a32178.svg', 'https://habrastorage.org/getpro/habr/avatars/74d/d06/967/74dd06967a1076a76e308363cde1fc4e.jpg', 'https://habrastorage.org/getpro/habr/upload_files/58e/2d6/df1/58e2d6df1a5a269286cc5cf163a8a66a.svg', 'https://habrastorage.org/getpro/habr/upload_files/bb4/534/b1f/bb4534b1f4decde1d9201db5a3ff83ab.svg', 'https://habrastorage.org/getpro/habr/upload_files/9cf/9f8/713/9cf9f87133e4f3bb4d5aceb58967276b.svg', 'https://habrastorage.org/getpro/habr/upload_files/119/9b3/705/1199b37057be227a6606754638206d81.svg', 'https://habrastorage.org/getpro/habr/upload_files/d46/59a/4b2/d4659a4b20386f983bd91aeffc685376.svg', 'https://habrastorage.org/getpro/habr/upload_files/2d3/233/068/2d32330683855f155365a4ec75885af3.svg', 'https://habrastorage.org/getpro/habr/upload_files/5f9/53f/545/5f953f54535716c99042399b5c8bc955.svg', 'https://habrastorage.org/getpro/habr/upload_files/dc1/5ea/30a/dc15ea30ae885d573f2cf292f838fb48.svg', 'https://habrastorage.org/getpro/habr/upload_files/a05/02f/75f/a0502f75fe348db295ad23dd6e3676fa.svg', 'https://habrastorage.org/getpro/habr/upload_files/dca/338/048/dca3380485b807a374a2fe788c8dd498.svg', 'https://habrastorage.org/getpro/habr/upload_files/931/c47/f42/931c47f4245b7478471415abb931eb21.svg', 'https://habrastorage.org/getpro/habr/upload_files/faf/b78/ee6/fafb78ee6103dc08070a8efbee973b46.svg', 'https://habrastorage.org/getpro/habr/upload_files/868/f01/a5e/868f01a5e40794c42680f22fe6b15185.svg', 'https://habrastorage.org/getpro/habr/upload_files/b87/0d7/9b1/b870d79b10388e34abac692050a91cbd.svg', 'https://habrastorage.org/getpro/habr/upload_files/e53/889/d3d/e53889d3d7fcccadc373a6380c5305e5.svg', 'https://habrastorage.org/getpro/habr/upload_files/637/6a7/b7a/6376a7b7a43d31489381672df255fb77.svg', 'https://habrastorage.org/getpro/habr/upload_files/004/995/59e/00499559e166e7a40e12271225bdd5a7.svg', 'https://habrastorage.org/getpro/habr/upload_files/f02/06b/632/f0206b632f1bb8001bed179783bde613.svg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/620/dc6/23f/620dc623fa2ac8b3f6872cb41f19bc06.png', 'https://habrastorage.org/getpro/habr/upload_files/866/071/690/8660716901e9081630efcdf750eb87a0.svg', 'https://habrastorage.org/getpro/habr/upload_files/cdc/3eb/216/cdc3eb2167284ebbac9851536d231cc4.svg', 'https://habrastorage.org/getpro/habr/upload_files/ccc/89b/c6a/ccc89bc6a7bd264af3a786711b809928.svg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/5e3/509/218/5e3509218990f4744a41c84a2a994c3c.png', 'https://habrastorage.org/getpro/habr/upload_files/5f2/b49/86b/5f2b4986b2e58773cef62fbb0163006a.svg', 'https://habrastorage.org/getpro/habr/upload_files/9db/658/97d/9db65897ddaf808ce401976b55d32bab.svg', 'https://habrastorage.org/getpro/habr/upload_files/eb6/410/932/eb641093200a3847e90b28e37b9cca64.svg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/cdb/3da/e54/cdb3dae54b9d13327fcc6f8849ce7fdd.png', 'https://habrastorage.org/getpro/habr/upload_files/b92/9be/c8c/b929bec8c588c8bfd759ae2d1f5106a6.svg', 'https://habrastorage.org/getpro/habr/upload_files/74a/80d/4db/74a80d4db156c0ce11fe94a82d2b032a.svg', 'https://habrastorage.org/getpro/habr/upload_files/915/6b5/12f/9156b512f0dc890fb5d3ebf6c9e5d920.svg', 'https://habrastorage.org/getpro/habr/upload_files/62f/44f/48a/62f44f48ae954bb7f53a817edcc8d1b9.svg', 'https://habrastorage.org/getpro/habr/upload_files/edb/b02/a94/edbb02a94e4b2ad25a672902c455f62c.svg', 'https://habrastorage.org/getpro/habr/upload_files/d57/f88/f3c/d57f88f3cc4bc85eea5e5970e343d4ca.svg', 'https://habrastorage.org/getpro/habr/upload_files/8d1/196/b51/8d1196b514bff069096045f96fc36fcc.svg', 'https://habrastorage.org/getpro/habr/upload_files/608/1e6/fd3/6081e6fd3cce5005faea1471d2c6e1ee.svg', 'https://habrastorage.org/getpro/habr/upload_files/3da/a63/bf1/3daa63bf1aa682935beee7b60cbb0274.svg', 'https://habrastorage.org/getpro/habr/upload_files/84d/232/fb6/84d232fb6bc986085421758ad3b76d00.svg', 'https://habrastorage.org/getpro/habr/upload_files/8e7/fda/e00/8e7fdae000a629877229fb7c47903592.svg', 'https://habrastorage.org/getpro/habr/upload_files/c22/fbd/06d/c22fbd06dd6c3c5ca1917b39610bb602.svg', 'https://habrastorage.org/getpro/habr/upload_files/d35/b16/66b/d35b1666b6e4ccc0c28b8dd3445ec8ce.svg', 'https://habrastorage.org/getpro/habr/upload_files/581/994/59e/58199459ed3e53a1df05480e8819a198.svg', 'https://habrastorage.org/getpro/habr/upload_files/6ab/40c/0d4/6ab40c0d49ca68ebd526733493a5261d.svg', 'https://habrastorage.org/getpro/habr/upload_files/c1d/eb8/2d4/c1deb82d4a2357360f1adeacb9b3d120.svg', 'https://habrastorage.org/getpro/habr/upload_files/05f/a2a/8cb/05fa2a8cbda22a3791003780eee87fa8.svg', 'https://habrastorage.org/getpro/habr/upload_files/e84/a87/770/e84a8777035ab6352f4c73bf75fa35c6.svg', 'https://habrastorage.org/getpro/habr/upload_files/78f/764/5a0/78f7645a01c39ee8229fe423a491c0a5.svg', 'https://habrastorage.org/getpro/habr/upload_files/056/2c4/153/0562c4153b301b16b7f36cdf45eab4de.svg', 'https://habrastorage.org/getpro/habr/upload_files/deb/c13/b91/debc13b91110614cf183a19cd626ddfd.svg', 'https://habrastorage.org/getpro/habr/upload_files/118/af8/533/118af85331cea970a4fac73343707d50.svg', 'https://habrastorage.org/getpro/habr/upload_files/34a/c41/d14/34ac41d14565470661dffaa68f6bfb7f.svg', 'https://habrastorage.org/getpro/habr/upload_files/9d1/da3/14b/9d1da314be0705b758c18df06ff21199.svg', 'https://habrastorage.org/getpro/habr/upload_files/98b/24c/6b1/98b24c6b195cb1e1a4d5450007e2a88f.svg', 'https://habrastorage.org/getpro/habr/upload_files/8e9/47e/d48/8e947ed48745d4b4441a5f47b45abc03.svg', 'https://habrastorage.org/getpro/habr/upload_files/05f/d32/327/05fd32327c094b8a0d1aef5eab247fce.svg', 'https://habrastorage.org/getpro/habr/upload_files/2d6/460/c7a/2d6460c7a1d39d7aa1d696b44fecc8cf.svg', 'https://habrastorage.org/getpro/habr/upload_files/ac4/394/14f/ac439414f66f51d40c8de630c67285b4.svg', 'https://habrastorage.org/getpro/habr/upload_files/256/100/097/256100097a81b978d68f4263f8df4da1.svg', 'https://habrastorage.org/getpro/habr/upload_files/d1d/1ca/e7d/d1d1cae7dc687df36c09b8fa61f3b8ba.svg', 'https://habrastorage.org/getpro/habr/upload_files/4c9/7b9/9c4/4c97b99c49524db0b36b1b348af55ec7.svg', 'https://habrastorage.org/getpro/habr/upload_files/0dc/4d1/7f0/0dc4d17f0860797708b47db7db4cd513.svg', 'https://habrastorage.org/getpro/habr/upload_files/812/677/475/81267747526adeb6be405945a8692ce0.svg', 'https://habrastorage.org/getpro/habr/upload_files/d7d/63e/dc3/d7d63edc393d0ef50d70d5bbcd6a30d2.svg', 'https://habrastorage.org/getpro/habr/upload_files/8ac/cde/5d0/8accde5d0a89307e9f274efdf148d407.svg', 'https://habrastorage.org/getpro/habr/upload_files/953/43e/be1/95343ebe1f7ee542ec71bfa54e0ecf09.svg', 'https://habrastorage.org/getpro/habr/upload_files/2cd/170/7ef/2cd1707efff0b44445269ea12ad98ff0.svg', 'https://habrastorage.org/getpro/habr/upload_files/322/dc8/792/322dc8792c16ff2400546d62764b3eac.svg', 'https://habrastorage.org/getpro/habr/upload_files/158/1ed/7af/1581ed7af9bef6873c313e23c77ae647.svg', 'https://habrastorage.org/getpro/habr/upload_files/755/a9e/772/755a9e7728a8c2e71f6913365d25c8d4.svg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/cd1/58d/fac/cd158dfacde7475bab5794689a1e3054.png', 'https://habrastorage.org/getpro/habr/upload_files/067/e14/e04/067e14e0441c469cf4eb7c983d058163.svg', 'https://habrastorage.org/getpro/habr/upload_files/b56/642/f39/b56642f3946dfda4abf92b30019e60a5.svg', 'https://habrastorage.org/getpro/habr/upload_files/043/198/9d1/0431989d1654100b6f29129e0b14106e.svg', 'https://habrastorage.org/getpro/habr/upload_files/66c/591/002/66c591002a14ba1afc59bfc977bedefe.svg', 'https://habrastorage.org/getpro/habr/upload_files/545/693/781/5456937819f4f78505668d99bc6beea0.svg', 'https://habrastorage.org/getpro/habr/upload_files/aba/60b/bed/aba60bbed3f616690ff9bba769f97c30.svg', 'https://habrastorage.org/getpro/habr/upload_files/812/5b8/555/8125b85553ad65144c02d0f9fe2dd91b.svg', 'https://habrastorage.org/getpro/habr/upload_files/f72/270/178/f72270178a49ba9cd7790b75e344e7c5.svg', 'https://habrastorage.org/getpro/habr/upload_files/70b/e2a/543/70be2a5435efce48540084dc395234ad.svg', 'https://habrastorage.org/getpro/habr/upload_files/481/29e/21d/48129e21d5f797b2436a58db87b3edae.svg', 'https://habrastorage.org/getpro/habr/upload_files/402/7d8/090/4027d80901a36bc0b38f98916b56c8c6.svg', 'https://habrastorage.org/getpro/habr/upload_files/75a/860/19c/75a86019c5eee772418d4aa12311421d.svg', 'https://habrastorage.org/getpro/habr/upload_files/286/a32/ca1/286a32ca1d7aaff17509d48361ca3daa.svg', 'https://habrastorage.org/getpro/habr/upload_files/10c/119/1d4/10c1191d45ad359014365ccb38a9b588.svg', 'https://habrastorage.org/getpro/habr/upload_files/aed/e22/90a/aede2290a3fecfb26994a7ba32c01d76.svg', 'https://habrastorage.org/getpro/habr/upload_files/88b/b0a/c14/88bb0ac14d521c4d0a6ae9bf6067d36f.svg', 'https://habrastorage.org/getpro/habr/upload_files/ae6/76c/f1d/ae676cf1d4858238285425da38706ec6.svg', 'https://habrastorage.org/getpro/habr/upload_files/b8b/436/34f/b8b43634f157353c4a947298b5d66a47.svg', 'https://habrastorage.org/getpro/habr/upload_files/651/4ae/bab/6514aebabd40b0f8bf9724fc625d383a.svg', 'https://habrastorage.org/getpro/habr/upload_files/8af/977/9d8/8af9779d8e610482c7517269d92944b0.svg', 'https://habrastorage.org/getpro/habr/upload_files/4d0/5c2/aaf/4d05c2aaf68d138234948a83d1114a08.svg', 'https://habrastorage.org/getpro/habr/upload_files/265/65a/363/26565a3633db36e4ae8d8ccccdc5c48c.svg', 'https://habrastorage.org/getpro/habr/upload_files/a82/37b/db5/a8237bdb557200c2d61e8ad9b49ba516.svg', 'https://habrastorage.org/getpro/habr/upload_files/1fe/b58/63a/1feb5863a2cfa6194016b1a19b22ec08.svg', 'https://habrastorage.org/getpro/habr/upload_files/273/ae4/479/273ae4479cc112f63f802c55da4978ad.svg', 'https://habrastorage.org/getpro/habr/upload_files/6f1/c0a/648/6f1c0a648977ca38b0d37c8bfcc5bea9.svg', 'https://habrastorage.org/getpro/habr/upload_files/d21/e59/ff3/d21e59ff3ad18cb3da07069154e41eb3.svg', 'https://habrastorage.org/getpro/habr/upload_files/53c/21a/2a3/53c21a2a3fdc1f48a746c0019b746e1f.svg', 'https://habrastorage.org/getpro/habr/upload_files/f95/ece/db5/f95ecedb54e6b6825907d599418b8185.svg', 'https://habrastorage.org/getpro/habr/upload_files/34d/c2d/8f1/34dc2d8f149af29b9790b49dd2d23965.svg', 'https://habrastorage.org/getpro/habr/upload_files/909/a0e/7e9/909a0e7e9168e6cc95c469800a9973e8.svg', 'https://habrastorage.org/getpro/habr/upload_files/acb/267/290/acb267290c252362e6a3e046aa22ba20.svg', 'https://habrastorage.org/getpro/habr/upload_files/53f/3a2/8d6/53f3a28d6c6ed3f2f190050815082346.svg', 'https://habrastorage.org/getpro/habr/upload_files/d90/893/7e5/d908937e5d83669bf3ee8f88e2d0e7fa.svg', 'https://habrastorage.org/getpro/habr/upload_files/ef6/3f5/5f0/ef63f55f0c3d7a9312548d5a87edce91.svg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/979/335/a8a/979335a8a93682157c91c8f3b03dcadf.png', 'https://habrastorage.org/getpro/habr/upload_files/fa3/275/24b/fa327524b6d8efe129eadedd17974429.svg', 'https://habrastorage.org/getpro/habr/upload_files/d08/bf8/152/d08bf81521c9f4f21285b060a185b665.svg', 'https://habrastorage.org/getpro/habr/upload_files/125/e04/4ed/125e044edf04eb8664f8c80940fcf39a.svg', 'https://habrastorage.org/getpro/habr/upload_files/e33/5ad/7ae/e335ad7aec3aecca059f735e8231628f.svg', 'https://habrastorage.org/getpro/habr/upload_files/9ee/6bf/485/9ee6bf4854feae7f7370ade43841ac41.svg', 'https://habrastorage.org/getpro/habr/upload_files/5aa/5d5/612/5aa5d5612055f3180fdd7e6f8d00bac8.svg', 'https://habrastorage.org/getpro/habr/upload_files/a07/7d9/118/a077d911823161e83341d26c7b5d7be4.svg', 'https://habrastorage.org/getpro/habr/upload_files/822/f2f/4fd/822f2f4fd619c9be328159410f7ff637.svg', 'https://habrastorage.org/getpro/habr/upload_files/744/c25/0a9/744c250a98a74eeb0e7b932a59fc0edd.svg', 'https://habrastorage.org/getpro/habr/upload_files/9ff/ad5/ec3/9ffad5ec34132c08d6970765266b4c22.svg', 'https://habrastorage.org/getpro/habr/upload_files/009/258/ed9/009258ed9b11d5597c3a3ee4f4905c4c.svg', 'https://habrastorage.org/getpro/habr/upload_files/0d1/0c3/28b/0d10c328bf6450c41f7c999d188006ae.svg', 'https://habrastorage.org/getpro/habr/upload_files/b1b/591/3b5/b1b5913b5ec5df07bbe3da723fa73d95.svg', 'https://habrastorage.org/getpro/habr/upload_files/894/a76/a5a/894a76a5ae5bd55d3bdef3794622ac90.svg', 'https://habrastorage.org/getpro/habr/upload_files/27b/0a7/524/27b0a7524327347a22cfe6fa8ee5144a.svg', 'https://habrastorage.org/getpro/habr/upload_files/3d9/c0b/857/3d9c0b857a9b570088245b7785f5fd2c.svg', 'https://habrastorage.org/getpro/habr/upload_files/bbc/dc7/1e9/bbcdc71e9b4433884addcba66a6bc9cb.svg', 'https://habrastorage.org/getpro/habr/upload_files/663/ed6/9a5/663ed69a583b76060773dab4131aab79.svg', 'https://habrastorage.org/getpro/habr/upload_files/501/ebf/91b/501ebf91b2ceb49c0b232f46ff71a96d.svg', 'https://habrastorage.org/getpro/habr/upload_files/413/54e/e00/41354ee004289307be0b32b44cecac5f.svg', 'https://habrastorage.org/getpro/habr/upload_files/0ab/7e7/5ce/0ab7e75ce971506f16213bc725bad686.svg', 'https://habrastorage.org/getpro/habr/upload_files/795/3e7/a4b/7953e7a4bfdf1de415db93c482d00c3b.svg', 'https://habrastorage.org/getpro/habr/upload_files/2b0/d7a/67c/2b0d7a67cb2049e6ca7fcb6b70425911.svg', 'https://habrastorage.org/getpro/habr/upload_files/420/7db/22c/4207db22ce9e7b50d66a6e85144d130b.svg', 'https://habrastorage.org/getpro/habr/upload_files/0a0/8a7/ec4/0a08a7ec44109e4cf08046a715cac224.svg', 'https://habrastorage.org/getpro/habr/upload_files/48d/bed/2a1/48dbed2a132103f9e215daa998f98b85.svg', 'https://habrastorage.org/getpro/habr/upload_files/25c/f12/bce/25cf12bcec0f4cf4de676edb28615e77.svg', 'https://habrastorage.org/getpro/habr/upload_files/4e5/433/00e/4e543300eb7ee0884f52ae9528d313e9.svg', 'https://habrastorage.org/getpro/habr/upload_files/634/14d/4f2/63414d4f2758c1fbe23a6bc4b9d7095d.svg', 'https://habrastorage.org/getpro/habr/upload_files/13c/19d/981/13c19d981ca37081663fa2dfc582884e.svg', 'https://habrastorage.org/getpro/habr/upload_files/54e/1a1/268/54e1a1268445e0b90b39fdc464817e0e.svg', 'https://habrastorage.org/getpro/habr/upload_files/427/fa7/3f8/427fa73f82ab585494e714b63a2d8804.svg', 'https://habrastorage.org/getpro/habr/upload_files/623/099/414/6230994144e18ca3ad344d005886899b.svg', 'https://habrastorage.org/getpro/habr/upload_files/6e6/9b8/0e0/6e69b80e0620e2efd9f65a1280c39690.svg', 'https://habrastorage.org/getpro/habr/upload_files/a20/361/5d6/a203615d605cfdc910d5709754ff062d.svg', 'https://habrastorage.org/getpro/habr/upload_files/e70/3f2/54f/e703f254ff2339a8cac2c8de86e63981.svg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/eba/1b6/178/eba1b617838ee0e67872a5f2f18564db.png', 'https://habrastorage.org/getpro/habr/upload_files/211/774/7c6/2117747c63b0fb455ee2f009562238ff.svg', 'https://habrastorage.org/getpro/habr/upload_files/f57/3b8/f42/f573b8f420a20c769910c0e101859bdb.svg', 'https://habrastorage.org/getpro/habr/upload_files/d50/013/39c/d5001339c7400878930c26784c6d56d0.svg', 'https://habrastorage.org/getpro/habr/upload_files/2c8/11c/427/2c811c427240093fe561cf2e2a4c4e9d.svg', 'https://habrastorage.org/getpro/habr/upload_files/ad1/e1a/333/ad1e1a3335c0d8c1d57084821849c5fb.svg', 'https://habrastorage.org/getpro/habr/upload_files/805/c03/dd8/805c03dd86831318a48084039f58bb3f.svg', 'https://habrastorage.org/getpro/habr/upload_files/04b/c77/355/04bc773556ce7799209a854c7432fb18.svg', 'https://habrastorage.org/getpro/habr/upload_files/7dd/ff1/1a9/7ddff11a935b7ad2bc10b8b2e283e883.svg', 'https://habrastorage.org/getpro/habr/upload_files/2fe/295/348/2fe295348aef79b071bbe488572ffe36.svg', 'https://habrastorage.org/getpro/habr/upload_files/3c5/632/7d9/3c56327d9544a00bd6531d14020db51c.svg', 'https://habrastorage.org/getpro/habr/upload_files/b4a/14b/019/b4a14b0197dcd0570b8cfb838fb5a209.svg', 'https://habrastorage.org/getpro/habr/upload_files/8af/4ac/186/8af4ac186f9760e61b0e90356d6da38a.svg', 'https://habrastorage.org/getpro/habr/upload_files/4c7/b5f/e8b/4c7b5fe8bed26efb952a500965c20afa.svg', 'https://habrastorage.org/getpro/habr/upload_files/094/882/a30/094882a306f0c45fd192addeb6e418bc.svg', 'https://habrastorage.org/getpro/habr/upload_files/225/0d3/487/2250d3487aee78837b27b6fe663dbf85.svg', 'https://habrastorage.org/getpro/habr/upload_files/cc8/895/e4e/cc8895e4ed5f78e406a843c4c0ab691f.svg', 'https://habrastorage.org/getpro/habr/upload_files/331/78e/770/33178e770bce9d7c885e58a83593689f.svg', 'https://habrastorage.org/getpro/habr/upload_files/144/b33/32e/144b3332e74097d39f32c39426fbcaa7.svg', 'https://habrastorage.org/getpro/habr/upload_files/704/50a/be2/70450abe2d83d8ebd45eb88159c7083c.svg', 'https://habrastorage.org/getpro/habr/upload_files/e92/ba6/480/e92ba6480040ceec0129feb02083a822.svg', 'https://habrastorage.org/getpro/habr/upload_files/fdf/faf/b18/fdffafb186e9ad8433835043522feeae.svg', 'https://habrastorage.org/getpro/habr/upload_files/3ef/edd/fb2/3efeddfb2ecdf2874b27a0971dc6b658.svg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/564/981/401/56498140124e64f6049938219116868f.png', 'https://habrastorage.org/getpro/habr/upload_files/03e/e12/7cb/03ee127cb635d16db4d6ba53b5327459.svg', 'https://habrastorage.org/getpro/habr/upload_files/c36/34e/f57/c3634ef57bfab5f47991cae221fbf1ad.svg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/76f/a2b/92a/76fa2b92afd9b5aec142ddbfb900eba7.png', 'https://habrastorage.org/getpro/habr/upload_files/4d7/4fd/2a4/4d74fd2a4248f6e9026a352ef9285ce7.svg', 'https://habrastorage.org/getpro/habr/upload_files/189/e7c/062/189e7c062dc2d2025af320b2a56660b0.svg', 'https://habrastorage.org/getpro/habr/upload_files/6c8/6ab/169/6c86ab169b6034e5ad574d5d7f33f62d.svg', 'https://habrastorage.org/getpro/habr/upload_files/81c/034/557/81c03455720f8ee995bbc5313f8b68a2.svg', 'https://habrastorage.org/getpro/habr/upload_files/c87/b67/0be/c87b670be38b7d2f45d9aaf418a5a157.svg', 'https://habrastorage.org/getpro/habr/upload_files/ba8/8b9/d50/ba88b9d50a4feafd64c18ab8ab6066f4.svg', 'https://habrastorage.org/getpro/habr/upload_files/f32/fcc/ddf/f32fccddf6d12bb5cf82cd8cfde20a7a.svg', 'https://habrastorage.org/getpro/habr/upload_files/e5f/974/2ca/e5f9742caca5d691ed1e3d108e4b3553.svg', 'https://habrastorage.org/getpro/habr/upload_files/07c/5a6/19b/07c5a619b93f9913a519bb2ef40fa963.svg', 'https://habrastorage.org/getpro/habr/upload_files/30f/cd3/207/30fcd3207beba6a699412c8536d1eaf9.svg', 'https://habrastorage.org/getpro/habr/upload_files/820/90c/529/82090c529a0538a874ccb1f060c125c4.svg', 'https://habrastorage.org/getpro/habr/upload_files/e56/10a/b95/e5610ab95d21d98f0ec6f61c9afb9f1f.svg', 'https://habrastorage.org/getpro/habr/upload_files/748/f20/bab/748f20bab389890ed35a98d11785a89d.svg', 'https://habrastorage.org/getpro/habr/upload_files/fe3/9c0/d63/fe39c0d63d9f0933687cae23200904bf.svg', 'https://habrastorage.org/getpro/habr/upload_files/455/ba1/4fd/455ba14fd31af6fa1e8fac9c61d45a9e.svg', 'https://habrastorage.org/getpro/habr/upload_files/10f/61e/f86/10f61ef86bae1cac130e54f7e5c9ceef.svg', 'https://habrastorage.org/getpro/habr/upload_files/6c1/be8/cdb/6c1be8cdbe210d9cc4bca40288abaae8.svg', 'https://habrastorage.org/getpro/habr/upload_files/a0f/d86/277/a0fd86277c18ac003b12046bac75327b.svg', 'https://habrastorage.org/getpro/habr/upload_files/911/690/b81/911690b8100bd19cf2e6a6c8a80cdb4f.svg', 'https://habrastorage.org/getpro/habr/upload_files/4fb/d69/2aa/4fbd692aa8a6ef71f867effe52167d92.svg', 'https://habrastorage.org/getpro/habr/upload_files/046/d8a/6f7/046d8a6f7d684d29ec85eb5866cd7568.svg', 'https://habrastorage.org/getpro/habr/upload_files/29b/24c/59d/29b24c59d626e4e69d621880d4f3a950.svg', 'https://habrastorage.org/getpro/habr/upload_files/dd3/9e9/938/dd39e9938e28c370234319ecb8131aa8.svg', 'https://habrastorage.org/getpro/habr/upload_files/a92/a0e/80b/a92a0e80b29ca2dc40b8b0b4ca862ca9.svg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/737/9b0/420/7379b0420c926ed91a9002b59f19959a.png', 'https://habrastorage.org/getpro/habr/upload_files/87b/66a/2fc/87b66a2fc448ce8c940d8e1a78869b91.svg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/b01/2a8/9fd/b012a89fd6b9af5f872cd21fa098e78f.png', 'https://habrastorage.org/getpro/habr/upload_files/b69/14b/229/b6914b229031d95111117ad598c460a4.svg', 'https://habrastorage.org/getpro/habr/upload_files/0c0/9de/a5e/0c09dea5e1d7359928cf45643277706b.svg', 'https://habrastorage.org/getpro/habr/upload_files/78f/95e/75d/78f95e75d77bd18b4bc221e2a36c7b39.svg', 'https://habrastorage.org/getpro/habr/upload_files/069/b0c/f0d/069b0cf0de89e6fe152707651368e701.svg', 'https://habrastorage.org/getpro/habr/upload_files/101/e96/a99/101e96a99ae8231c96c03e5d6574d1d5.svg', 'https://habrastorage.org/getpro/habr/upload_files/9a3/7cc/b1d/9a37ccb1d256f5eb3b3d2bcacc32d54a.svg', 'https://habrastorage.org/getpro/habr/upload_files/159/d5a/7cf/159d5a7cf52c56dc020b9429afb5262c.svg', 'https://habrastorage.org/getpro/habr/upload_files/45b/bed/d66/45bbedd66184490d63471c313df7b6f5.svg', 'https://habrastorage.org/getpro/habr/upload_files/222/000/931/22200093181f6debc09c3c65a8e95869.svg', 'https://habrastorage.org/getpro/habr/upload_files/ce1/1e1/93f/ce11e193fc0ecccb50d0bcaed02fc56d.svg', 'https://habrastorage.org/getpro/habr/upload_files/c8c/537/7d7/c8c5377d78aaf99377299d199effab6b.svg', 'https://habrastorage.org/getpro/habr/upload_files/8e6/b7c/a3e/8e6b7ca3e44b61b3f8633fc22d394406.svg', 'https://habrastorage.org/getpro/habr/upload_files/eff/ef8/c2b/effef8c2b0583506eed77d7aa6ee1a3d.svg', 'https://habrastorage.org/getpro/habr/upload_files/b12/d6c/96c/b12d6c96c7e2fdd65e0a3ca0023643ab.svg', 'https://habrastorage.org/getpro/habr/upload_files/922/32a/119/92232a11966906cfe26ac27ec9393d29.svg', 'https://habrastorage.org/getpro/habr/upload_files/564/588/098/5645880981828d93feaffcc67eb3ec60.svg', 'https://habrastorage.org/getpro/habr/upload_files/667/c47/22a/667c4722aea8924cd8a4fed1d4c699c1.svg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/fcf/e29/792/fcfe2979223daf63f05c4a641cbf0552.png', 'https://habrastorage.org/getpro/habr/upload_files/b9b/83c/675/b9b83c675600e606f0ac09779312b6b7.svg', 'https://habrastorage.org/getpro/habr/upload_files/158/a30/d38/158a30d383cf2190489ae06c4e739d8d.svg', 'https://habrastorage.org/getpro/habr/upload_files/907/7c3/944/9077c3944e5aaed5c974adbddff39c13.svg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/fe5/5d3/9df/fe55d39dfcad25188974fab1399221ca.png', 'https://habrastorage.org/getpro/habr/upload_files/25e/ff8/ef9/25eff8ef9a9b8d57a06eab50dd502550.png', 'https://habrastorage.org/getpro/habr/upload_files/959/19f/db0/95919fdb026482dcd7e23f527e9c9729.svg', 'https://habrastorage.org/getpro/habr/upload_files/3e1/39f/3fe/3e139f3fe711c7d1512378f717bd9058.svg', 'https://habrastorage.org/getpro/habr/upload_files/84c/d94/a7f/84cd94a7f9d2310eefdc9793a4903267.svg', 'https://habrastorage.org/getpro/habr/upload_files/111/ef5/4df/111ef54df3c192be66aedd27f0bf2a30.svg', 'https://habrastorage.org/getpro/habr/upload_files/fa9/842/34a/fa984234a02745f9a04ea673deae1c8d.svg', 'https://habrastorage.org/getpro/habr/upload_files/1b5/bfa/665/1b5bfa6653a64717949c37cd4b3f9494.svg', 'https://habrastorage.org/getpro/habr/upload_files/144/02e/2f8/14402e2f83a17b1b3964eb2c6fcccda9.svg', 'https://habrastorage.org/getpro/habr/upload_files/efd/981/c4c/efd981c4c16e3173b54b9cf466ec80da.svg', 'https://habrastorage.org/getpro/habr/upload_files/e46/d6b/11d/e46d6b11d5bc00ece71456e5b334af54.svg', 'https://habrastorage.org/getpro/habr/upload_files/634/27d/e3f/63427de3f061c210007311ca45a4ea2a.svg', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/getpro/habr/upload_files/a38/d73/6cd/a38d736cd6a39943914c5d62351ef89f.svg', 'https://habrastorage.org/getpro/habr/upload_files/f0d/1ba/4b4/f0d1ba4b4033ec08300eed8a6068e5d4.svg', 'https://habrastorage.org/getpro/habr/upload_files/c96/cac/7f8/c96cac7f83d0a791b3bfcecced7a75a7.svg', 'https://habrastorage.org/getpro/habr/upload_files/9f8/ef8/a00/9f8ef8a007e77772b6d4a8445cadda4c.svg', 'https://habrastorage.org/getpro/habr/upload_files/c40/03c/902/c4003c902019830680fcdd5593265c60.svg', 'https://habrastorage.org/getpro/habr/upload_files/2b3/1ff/9bd/2b31ff9bd0e5844b35d2ea9ed73996f4.svg', 'https://habrastorage.org/getpro/habr/upload_files/af8/ad4/e8d/af8ad4e8df0b4afd6abaa1dd0244ad30.svg', 'https://habrastorage.org/getpro/habr/upload_files/27e/66d/be7/27e66dbe7e2f901b200b3b2b91653eab.svg', 'https://habrastorage.org/getpro/habr/upload_files/132/600/8fc/1326008fcd8ed7b13eb2b64426f30eb2.svg', 'https://habrastorage.org/getpro/habr/upload_files/f67/d17/caa/f67d17caa583b31592c750c83c4897d1.svg', 'https://habrastorage.org/getpro/habr/upload_files/5aa/d6f/dec/5aad6fdecdd77f22586c9842d234a29e.svg', 'https://habrastorage.org/getpro/habr/upload_files/373/252/293/373252293beaf6fad3025464d00a4919.svg', 'https://habrastorage.org/getpro/habr/upload_files/20a/e21/cc2/20ae21cc29f5be6caaec6c83b010bbe5.svg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/8bf/f53/e1c/8bff53e1cdf116d25a3030e84be6b550.jpg', 'https://habrastorage.org/getpro/habr/upload_files/b39/4f3/232/b394f32327c45cf808c61db259ad5c82.svg', 'https://habrastorage.org/getpro/habr/upload_files/bef/dd5/848/befdd58480c51d8df49d1fecb55d4114.svg', 'https://habrastorage.org/getpro/habr/upload_files/388/e79/e75/388e79e755fa82afb0a1872683e29ca0.svg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/16d/c27/301/16dc27301e1549e5ef05c712705e958c.png', 'https://habrastorage.org/getpro/habr/upload_files/159/b95/ac7/159b95ac7c988f0e185baa22c3afa50b.svg', 'https://habrastorage.org/getpro/habr/upload_files/665/aea/076/665aea0767de2b359f50db41130432d7.svg', 'https://habrastorage.org/getpro/habr/upload_files/ece/fed/dbf/ecefeddbfa5543f55207abba378f9ca2.svg', 'https://habrastorage.org/getpro/habr/upload_files/9d0/dd7/428/9d0dd7428a494a23ea3ae826c5195741.svg', 'https://habrastorage.org/getpro/habr/upload_files/8ec/141/168/8ec141168b455870b1d55f82d27594e9.svg', 'https://habrastorage.org/getpro/habr/upload_files/b64/4fe/508/b644fe508b0518a91887fdd33187ae86.svg', 'https://habrastorage.org/getpro/habr/upload_files/5e5/394/18b/5e539418bd0b18165703d6864eacd77e.svg', 'https://habrastorage.org/getpro/habr/upload_files/426/ef2/1de/426ef21de7bb35f372b7cef4bf258b3a.svg', 'https://habrastorage.org/getpro/habr/upload_files/8de/1c8/a10/8de1c8a109761798236b97f930c6ceed.svg', 'https://habrastorage.org/getpro/habr/upload_files/719/3fc/e88/7193fce8802a5a55f744be910650a25a.svg', 'https://habrastorage.org/getpro/habr/upload_files/bae/bb5/9ec/baebb59ecd0a3c5948e69acf325403b2.svg', 'https://habrastorage.org/getpro/habr/upload_files/338/1bc/4b7/3381bc4b74f74e6676f64ebe6608a9ee.svg', 'https://habrastorage.org/getpro/habr/upload_files/d16/85d/6d0/d1685d6d03bdbd7ceb03ad38d2bb2475.svg', 'https://habrastorage.org/getpro/habr/upload_files/49f/80e/e0c/49f80ee0c58a0ee7dd8e8bba1a472094.svg', 'https://habrastorage.org/getpro/habr/upload_files/f0a/a7b/5d4/f0aa7b5d4f22f0dff1ea0b5b08402426.svg', 'https://habrastorage.org/getpro/habr/upload_files/213/aac/ffc/213aacffc85d43bb108f1b2e1dff4b68.svg', 'https://habrastorage.org/getpro/habr/upload_files/842/c85/967/842c85967383345b74a96915b8f79f06.svg', 'https://habrastorage.org/getpro/habr/upload_files/24c/8df/e62/24c8dfe62bccc17ceee3c952d5fc5b02.svg', 'https://habrastorage.org/getpro/habr/upload_files/ac2/930/c1f/ac2930c1f7d45793911e3f824a61b978.svg', 'https://habrastorage.org/getpro/habr/upload_files/b21/3d7/e39/b213d7e393e2833cabc3243c531646e7.svg', 'https://habrastorage.org/getpro/habr/upload_files/3ef/182/325/3ef182325feebd930bddb6f7a8176120.svg', 'https://habrastorage.org/getpro/habr/upload_files/e3c/586/801/e3c586801a84ebc97f03393273a92db3.svg', 'https://habrastorage.org/getpro/habr/upload_files/c2a/fc0/9cc/c2afc09ccbb68e2e556aff18c24c34d1.svg']"
15'720228'"Как без денег и знаний в AI повторил Copilot'а"'"Сразу скажу, это не кликбейт, но до конца эту идею я финансового(как и скорее всего вы) довести не смог. Для начала давайте рассмотрим Copilot'а со всех сторон! Его разрабатывали совместно Github (от..."'https://habr.com/ru/post/720228/'"Сразу скажу, это не кликбейт, но до конца эту идею я финансового(как и скорее всего вы) довести не смог.

Для начала давайте рассмотрим Copilot'а со всех сторон!

Его разрабатывали совместно Github(от них датасет) и OpenAI(от них Codex) Его резко закрыли в России из-за санкций Он продолжает код пытаясь понять вашу мысль

Согласитесь, очень интересно!

Теперь посмотрим что у нас есть, и как можно меньше потратить денег...

Датасет кода достать не проблематично, он уже давно есть в отрытом доступе.

Codex дорого, так что я решил найти Open Source конкурента, и что меня удивило, я нашёл!

CodeGen is an open-source model for program synthesis. Trained on TPU-v4. Competitive with OpenAI Codex. ------- CodeGen - это модель с открытым исходным кодом для синтеза программ. Обучался на TPU-v4. Конкурирует с OpenAI Codex.

Разработчики некого CodeGen заявляют что их продукт конкурирует с Codex, но верить на слово - одно, а проверить на деле - другое. Так что уже через 5 минут я собрал Google Colab, и начал проверять.

Ссылка на Colab https://colab.research.google.com/drive/1ouZ2uyJC0ZNSYoThCBuRl35BBmYQZiLK#scrollTo=UUq-rqNGOa0L

Кстати интересный момент заметил, когда изучал документацию:

Есть несколько вариаций натренированных моделей, которые делятся по размеру и обученных данных, что очень меня обрадовало. Почему? А к этому ещё вернёмся!

Для тестов я решил взять среднюю по размеру модель со всеми опциями, весит эта модель в итоге почти 6GB:

И тут возникает(как минимум у меня) несколько вопросов:

Копилот же генерирует ответ за секунду, будет ли CodeGen так же хорош? А какие языки поддерживает CodeGen?

С первым вопрос всё не очень однозначно, я пишу как никак с минимальными знаниями в подобной сфере, но машина Colab с 16GB видеопамяти генерирует на модели Salesforce/codegen-2B-mono ответ с длиной до 24х символов практически за секунду.

А ответ на второе я нашёл на сайте модели, C, C++, Go, Java, JavaScript, и Python.

Интересный факт кстати самая мощная модель весит 32GB

Продолжаем, теперь пора и потестить что мы имеем:

Из картинки выше можно сделать несколько выводов, средняя модель уже легко понимает что от неё хотят, но генерирует ответ за 1.44 секунды...

Да, печально, в этом и загвоздка, по финансам такой проект содержать дорого, ибо цены на сервер с видеокартами начинаются с 11 тысяч, и то такие нам не пойдут что бы запилить полноценный Copilot, но вот для себя поднять на своём ПК или Colab можно легко.

На самом деле большого продолжения проекту я дать не могу, но я показал что всё можно заменить альтернативами если приложить усилия, удачи!"'https://habr.com/share/publication/720228/8b3504d2b6b77f620e4ad9c68fa9d28c/'"['https://habrastorage.org/getpro/habr/avatars/935/188/3dc/9351883dcc73371a3dfaf05eed1a29f1.jpg', 'https://habr.com/share/publication/720228/8b3504d2b6b77f620e4ad9c68fa9d28c/', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/ce4/c18/d9a/ce4c18d9adfc6abf8a9b53ed594656f3.png', 'https://habrastorage.org/r/w32/getpro/habr/avatars/935/188/3dc/9351883dcc73371a3dfaf05eed1a29f1.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/d22/11a/16e/d2211a16e50ce1c0663c14c4eef0fcb7.png', 'https://habrastorage.org/getpro/habr/upload_files/086/6de/337/0866de3375d2838b110018cfc88b0067.gif', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/23d/443/48d/23d44348da75b0e18af5331a44d36154.png', 'https://mc.yandex.ru/watch/24049213']"
16'720218'[Перевод] 9 баз данных NoSQL, актуальных на 2023 год'Базы данных NoSQL можно использовать для хранения данных довольно гибко. Они отличаются от традиционной базы данных SQL, которая является более жесткой и структурированной. Эта таблица...'https://habr.com/ru/post/720218/'"Базы данных NoSQL можно использовать для хранения данных довольно гибко. Они отличаются от традиционной базы данных SQL, которая является более жесткой и структурированной.

Эта таблица показывает динамику развития баз данных NoSQL в сравнении с SQL:

Google Trends объясняет рост частоты употребления термина NoSQL по сравнению с SQL

В случае использования баз данных NoSQL можно хранить и извлекать данные без необходимости предварительно определять схему БД. Они также позволяют одновременно хранить различные типы данных, а не разделять их по разным таблицам в зависимости от их типа, как это часто происходит при работе с базами данных SQL.

Какой спрос на базы данных NoSQL?

NoSQL представляет собой широкий класс разнородных систем управления БД, которые не используют реляционную модель для хранения и поиска данных. Базы данных NoSQL предназначены для обработки больших объемов данных и часто используются в приложениях для работы с Big Data.

Потребность в базах данных NoSQL продолжает расти, поскольку с их помощью компаниям удается хранить больше данных, чем с традиционными реляционными БД. Также с NoSQL пользователи получают доступ к информации быстрее и проще по сравнению с реляционными базами данных.

Это становится возможным благодаря тому, что они отличаются более простой структурой. К ним можно сделать запрос, используя различные типы запросов. Базы данных NoSQL также имеют более низкие аппаратные требования, поскольку они потребляют меньше вычислительной мощности. Это делает их более дешевыми в обслуживании.

В каких случаях использовать NoSQL?

Базы данных NoSQL не являются заменой базам данных SQL. Скажем, NoSQL — это альтернатива, и у них есть свой набор преимуществ.

Базы данных NoSQL созданы для работы с нереляционными данными, в то время как SQL создан для работы с реляционными данными. Это означает, что БД NoSQL больше подходит для хранения неструктурированных данных, таких как текст или изображения; в то время как БД SQL лучше подходит для хранения структурированных данных, таких как числа и даты.

Базы данных NoSQL также имеют более широкий спектр типов хранения данных по сравнению с SQL. Это значит, что данные можно хранить в различных форматах, что может быть весьма полезным в некоторых случаях.

Наконец, БД NoSQL имеют гораздо более высокую доступность, чем БД SQL, поскольку им не нужно работать с теми же общими ресурсами, с которыми приходится работать базе данных SQL.

Преимущества использования баз данных NoSQL

В сравнении с реляционными базами данных, базы данных NoSQL обладают следующими преимуществами:

Гибкость

БД NoSQL не ограничены жесткой структурой, которая накладывается на них соответствующей схемой. Это обеспечивает большую гибкость и лучшую масштабируемость.

Простота разработки

Разработчикам не придется изучать новый язык или язык запросов, как в случае с другими типами баз данных. Они также могут использовать языки программирования, которыми уже владеют, что является приятными бонусом для разработчиков, которые хотят использовать свои навыки в работе.

Масштабирование

С помощью NoSQL лучше проводится масштабирование, поскольку они способны обрабатывать большие объемы данных без снижения производительности.

Какие базы данных NoSQL лучше всего использовать сейчас?

Давайте рассмотрим поближе некоторые базы данных NoSQL, которые можно использовать в рамках большого проекта в 2023 году.

RavenDB

RavenDB — одна из самых популярных NoSQL баз данных с открытым исходным кодом, которая обладает некоторыми функциями реляционной базы данных. Она проста в использовании и может применяться как для малых, так и для крупных проектов.

Она позволяет пользователям иметь точный контроль хранения данных, что облегчает масштабирование системы. Эта БД также предлагает высокую доступность и репликацию, что означает, что данные не будут потеряны в случае отказа оборудования или стихийного бедствия.

RavenDB — одна из лучших баз данных NoSQL. Она разработана как масштабируемая, многомодельная база данных, которая обеспечивает широкую поддержку сложных запросов и эволюцию схемы.

Couchbase

База данных Couchbase — это распределенная база данных документов NoSQL, которая может работать как локально, так и в облаке. Она предназначена для работы с приложениями, которым необходим быстрый доступ к структурированным и неструктурированным данным.

Couchbase Server предлагает следующие возможности:

multi‑master кластеризация для обеспечения высокой доступности и масштабируемости;

гибкий язык запросов (N1QL) для специальных запросов;

поддержка JSON для интеграции с современными веб‑ и мобильными приложениями;

встроенные возможности поиска;

автоматическое индексирование данных для обеспечения их высокой доступности.

Couchbase Mobile поставляется с собственным SDK. Он позволяет создавать приложения, которые работают в автономном режиме и с мгновенной синхронизацией в режиме онлайн. SDK предоставляет доступ к следующим функциям Couchbase Server:

запросы N1QL,

хранение документов,

уведомления в реальном времени,

оффлайн‑синхронизация,

push‑уведомления,

архитектура, ориентированная на работу в автономном режиме, и многое другое.

OrientDB

OrientDB — одна из первых многомодельных баз данных NoSQL с открытым исходным кодом, которая позволяет наилучшим образом использовать графы. С помощью OrientDB данные можно хранить, управлять ими и запрашивать их быстро и эффективно.

Проект OrientDB с открытым исходным кодом был создан Алессандро Франчески (Alessandro Franceschi) в 2009 году. Проект был основан Франчески, Федерико Чератто (Federico Ceratto) и Лукой Гарулли (Luca Garulli) с целью создания нового типа БД, оптимизированной для хранения графов и других сложных типов данных.

ArangoDB

ArangoDB — это документо‑ориентированная база данных, которая способна хранить данные для графов, документов и поиска. Она дает мощные возможности обхода графов и разработана для масштабирования с высокой производительностью.

ArangoDB — распределенная многомодельная база данных. Она предназначена для хранения и запроса как больших, так и малых наборов данных. ArangoDB предоставляет одинаковый знакомый интерфейс SQL независимо от размера набора данных. С ее помощью можно создавать высокопроизводительные приложения с использованием различных языков программирования.

Neo4j

Neo4j — это база данных NoSQL, ориентированная на хранение графовых данных. Она может оказаться жизнеспособным решением для аналитики, поскольку способна хранить и быстро обрабатывать большие массивы данных.

Neo4j также можно использовать не только в качестве инструмента аналитики, но и для других целей, таких как разработка веб‑приложений, управление корпоративными данными и даже разработка мобильных приложений.

Apache Cassandra

Apache Cassandra может использоваться как для операций чтения, так и для операций записи; но благодаря своей высокой доступности в основном она используется для операций записи. Cassandra обладает одноранговой архитектурой, что отличает ее от других баз данных с клиент‑серверной архитектурой.

База данных Cassandra изначально была разработана для организации данных на нескольких узлах в кластере. Поэтому она более эффективна, чем другие БД, которым приходится перемещать данные по сети, чтобы найти узел, на котором нужно хранить данные.

MongoDB

MongoDB — платформа, которая завоевывает все большую популярность на рынке. Она существует уже много лет, и многие компании используют ее для хранения своих данных.

MongoDB — это система управления базами данных NoSQL для хранения сложных, слабоструктурированных данных. Она выделяется среди других баз данных, например, своей способностью масштабироваться по требованию.

Наиболее важной особенностью MongoDB является масштабируемость, которая позволяет ей расти вместе с бизнесом без простоев и вмешательства в работу приложений.

MongoDB можно масштабировать по требованию без простоев и вмешательства в работу приложений, что делает ее идеальным вариантом для организаций, которые расширяют бизнес.

Amazon DynamoDB

Amazon DynamoDB — база данных NoSQL, которая обеспечивает быструю и предсказуемую производительность при плавном масштабировании. Это полностью управляемый, высокодоступный и масштабируемый сервис БД для приложений, которым требуется постоянная задержка в миллисекунды. Amazon DynamoDB помогает разгрузить административную работу по эксплуатации и масштабированию распределенной реляционной базы данных, что позволяет сосредоточиться на приложениях и бизнесе.

Azure Cosmos DB

Azure Cosmos DB — база данных NoSQL, которая предоставляет глобально распределенную базу данных для хранения и запроса данных в любом масштабе. У нее есть SQL‑подобный язык запросов, что позволяет разработчикам использовать знакомые инструменты и техники для доступа к данным в CosmosDB.

Заключение

Базы данных NoSQL полезны в случаях, когда нужно хранить большой объем данных, которые постоянно меняются и не имеют определенной структуры. Мы надеемся, что эта статья помогла вам лучше понять базы данных NoSQL. В заключение приглашаем всех желающих на открытый урок, посвященный знакомству с InterSystems IRIS. На этом уроке рассмотрим основы работы с InterSystems IRIS, уникальную архитектуру данных и поддерживаемые модели: SQL, объектно‑ориентированную, документную, ключ‑значение. Записаться можно на странице курса «NoSQL».

А уже сегодня вечером состоится урок «Установка монго+компас». Присоединяйтесь, если интересно."'https://habrastorage.org/getpro/habr/upload_files/3e4/5c6/abc/3e45c6abc3f5263c59399d5deee8deb6.png'"['https://habrastorage.org/getpro/habr/company/2d5/0ed/b57/2d50edb57cf45fa07cc4f39f53b78395.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/7f7/4d3/d65/7f74d3d65bf675b53f66c094eedd6245.png', 'https://habrastorage.org/getpro/habr/upload_files/3e4/5c6/abc/3e45c6abc3f5263c59399d5deee8deb6.png', 'https://mc.yandex.ru/watch/24049213']"
17'720214'[Перевод] Сегментация LULC спутникового изображения RGB с использованием FCN-8'В рамках решения своих задач мне понадобилось перевести несколько статей по сегментации спутниковых снимков. Некоторые из них я решил выложить сюда. Возможно, их перевод поможет вам...'https://habr.com/ru/post/720214/'"В рамках решения своих задач мне понадобилось перевести несколько статей по сегментации спутниковых снимков. Некоторые из них я решил выложить сюда. Возможно, их перевод поможет вам в решении своих задач.

Положение нескольких иллюстрацийи и таблиц и описаний к ним было немного изменено ради лучшей удобочитаемости. Перевод также имеет свои специальные обозначения:

курсивом выделены переведенные наименования архитектур нейросетей, метрик и т. п. (напр. Fully Convolutional Network → Полная сверточная сеть);

подчеркиванием выделены вольно переведенные слова или словосочетания, точного перевода которых мне не удалось определить.

Аннотация

В данной работе представлено использование Полной сверточной сети (FCN-8) для семантической сегментации спутниковых изображений земной поверхности высокого разрешения в формате RGB на категории землепользования (в ориг. — land use land cover, LULC). В частности, мы предлагаем подход на основе сетки для обучения Полной сверточной сети (FCN-8) с весами VGG-16 для сегментации спутниковых изображений на четыре класса (лес, застройка, сельхозугодья и вода). FCN-8 семантически проецирует дискриминационные признаки в более низком разрешении, полученные кодером, на пространство пикселей в более высоком разрешении для получения плотной классификации. Мы проверили предложенную систему на датасете изображений Gaofen-2, который содержит 150 изображений более 60 различных городов Китая. Для сравнения мы использовали соответствующие им истинные бинарные маски (в ориг. — ground truth), а также изображения, сегментированные с помощью широко используемого коммерческого программного обеспечения ГИС под названием eCognition. С помощью предложенного подхода, основанного на сетке, FCN-8 достигает значительно более высокой производительности, чем eCognition. Наша модель достигает средней точности 91,0% и среднего показателя пересечения над объединением (IoU) 0,84. В отличие от этого, средняя точность eCognition составляет 74,0%, а IoU — 0,60. В данной работе также приводится подробный анализ ошибок, возникающих на границах LULC.

Ключевые слова: датасет изображений Gaofen-2 (GID), землепользование (LULC), сегментация, глубокая нейросеть, FCN-8.

1. Введение

Эффективное решение задач управления земельными ресурсами, таких как обнаружение изменений, городское планирование, мониторинг возобновляемых ресурсов, охрана окружающей среды, сельское хозяйство, создание дорожных карт, планирование социально‑экономического развития и т. д. [4], [3], [2], [6] зависит от правильной идентификации LULC. Обычно классификация LULC выполняется вручную на картографических изображениях с использованием программного обеспечения географической информационной системы (ГИС) (например, eCognition [13]), что является трудоемким и неэффективным подходом. Некоторые исследователи предлагают методы машинного обучения для автоматической классификации LULC на различные семантические классы (т. е. лес, сельхозугодья, вода, застроенная территория, луга) по спутниковым изображениям. Спутниковые изображения имеют ряд каналов, т. е. R, G, B, ближний инфракрасный (NIR), инфракрасный (IR) и др.

Из этих каналов географические исследователи пытаются рассчитать нормализованный разностный индекс растительности (NDVI) и нормализованный разностный индекс влажности (NDMI) для сегментации лесов и сельхозугодий. Они также вывели индекс реактивности (RI), индекс яркости (BI) и некоторые другие индексы для идентификации других классов. Эти индексы рассчитываются по специальным формулам, выведенным для каждого класса/индекса для различных комбинаций растровых каналов. Диапазоны, представляющие NIR (ближний инфракрасный) и RED, варьируются от спутника к спутнику. Часто спутник может давать только те диапазоны, которые необходимы для расчетов индекса, а не давать точный спектр. В этом случае для расчетов используется диапазон, наиболее близкий к требуемому. Для автоматической идентификации растительности на спутниковых изображениях Ченг и др. [4] использовали гистограмму ориентированных градиентов (HOG), масштабно‑инвариантное преобразование характеристик (SIFT) и локальный бинарный шаблон (LBP) для извлечения признаков и машину опорных векторов в качестве классификатора. При тестировании на данных изображений дистанционного зондирования, предоставленных консорциумом Multi‑resolution land‑cover characteristics (MRLC) [9], их система показала общую точность 79,6%.

В последних исследованиях для классификации и сегментации почвенного покрова с большим успехом используются различные методы глубокого обучения [5], [10], [7], [12]. Бен Хамида и др. [5] используют DenseNet [14] и SegNet [1] для сегментации и грубой сегментации соответственно на многоспектральных изображениях Sentinel-2. Они сообщают об общей точности 51,4% при использовании DenseNet и 83,9% при использовании SegNet на данных GlobeCover. Пираманаягам и др. [10] представили раннее и позднее объединение признаков в нейронной архитектуре (Полной сверточной сети [8], FCN) для применения в классификации мультисенсорных воздушных/спутниковых изображений. Они достигли общей точности 59,87% и средний балл F1 0,51 на RGB‑изображениях со спутников. Шэнцзе Лю и др. [7] используют объектно‑ориентированный анализ изображений (OBIA) для картографирования землепользования с использованием оптических и радиолокационных изображений с синтезированной апертурой (SAR). Для получения объектно‑ориентированных тематических карт они разработали новый метод, объединяющий объектно‑ориентированное уточнение постклассификации (OBPR) и CNNs для картографирования LULC с использованием оптических и SAR‑данных Sentinel. Они достигли точности 77,64% для набора данных LCZ Zhuhai‑Macau с пространственным разрешением 100 метров. Вышеуказанные показатели не являются удовлетворительными для автоматической классификации LULC из‑за некоторых ограничений. К ограничениям относятся нехватка данных в истинных бинарных масках , неоднозначность граничных пикселей, невозможность моделирования пространственных характеристик классов LULC и т. д.

Чтобы улучшить карту сегментации, Тонг и др. [12] использовали ансамбль классификаторов с иерархическим методом сегментации. Позже они использовали селективный поиск для оценки границ. Однако системы на основе патчей имеют ряд недостатков для спутниковых изображений. Во‑первых, техника на основе патчей ограничивает процесс сегментации объектов, которые могут иметь широкий диапазон формы, размера и плотности. Во‑вторых, ошибка в обнаружении пятен будет распространяться на следующий уровень, где пятна объединяются вместе для создания окончательной сегментации. В‑третьих, системы на основе патчей имеют очень низкую обобщающую способность. Для преодоления вышеупомянутых ограничений мы используем метод семантической сегментации на основе глубокого обучения, который выделяет леса, застройку, сельхозугодья и водные территории непосредственно на спутниковых RGB‑изображениях. Поскольку RGB‑изображения легко объяснимы и наблюдаемы для классов LULC, мы сосредоточили нашу сегментацию только на RGB‑изображении.

В частности, мы используем предобученную сверточную нейросеть с весами VGG-16 в качестве кодера, чтобы получить Полную сверточную сеть (FCN-8) [8]. На рис. 1 показана блок‑схема сегментации леса, где в верхней части изображен процесс обучения, а в нижней — этап прогнозирования. Во время обучения мы подаем RGB‑изображения с соответствующими им истинными бинарными масками для обучения модели FCN-8 для леса. На этапе предсказания мы сегментируем входное изображение на лесной массив, используя полученную модель. Аналогичный подход применяется и для других классов LULC. В первых экспериментах мы уменьшили размер спутникового изображения 7200×6800 до 224×224. Сильное уменьшение масштаба приводит к неожиданным ошибкам в границах. Чтобы улучшить производительность, мы разделили полноразмерное спутниковое изображение на неперекрывающиеся подизображения размером 224×224. Таким образом, разрешение входного изображения сохраняется при подаче на FCN-8. Этот подход достигает большого успеха со средней точностью 91% и средним значением пересечения над объединением (IoU) 0,84 при сегментировании RGB‑изображений из датасета изображений Gaofen-2 (GID) [12]. Более того, модель FCN-8 превосходит модель eCognition [13]. Подробное сравнение производительности проводится в главе 4. Таким образом, предложенный автоматизированный процесс LULC с использованием FCN-8, описанный в данной статье, может помочь извлечь жизненно важную информацию для лучшего понимания нашей планеты. Однако иногда FCN-8 допускает ошибки в определении границ, особенно для сельхозугодий, которые отличаются большим разнообразием цвета и формы. Мы провели детальный анализ ошибок, в котором описали возможные источники этих ошибок.

2. Датасет и методология

В этом разделе описывается набор данных и часть предварительной обработки. Кроме того, мы описываем подход и методологию, которые мы используем в данной работе.

2.1. Описание датасета

Набор данных GID содержит в общей сложности 150 изображений в формате tif с разрешением 7168×6720. Каждый пиксель охватывает разрешение до 4 метров. GID обеспечивает спектральный диапазон: синий (0,45–0,52 мкм), зеленый (0,52–0,59 мкм), красный (0,63–0,69 мкм) и ближний инфракрасный (0,77–0,89 мкм); и пространственный размер 7168×6720 пикселей, охватывающий географическую область 506 км^2.

В наборе данных также содержатся метки истинных бинарных масок для этих 150 изображений. Истинные бинарные маски содержат различные цветные пиксели, чтобы показать четыре различных класса LULC. Рис. 2a и 2b являются примерами входного изображения и соответствующих им истинных бинарных масок , предоставленных датасетом GID. Однако черные пиксели представляют собой нераспознанную область по мнению авторов [12]. В наших экспериментах нет никаких нераспознанных областей.

Предварительная обработка. Мы предварительно обрабатываем исходные изображения, чтобы получить бинарное изображение для каждого класса. Для каждого класса мы выделяем пиксели в целевом классе синим цветом, а в остальных классах — красным. Таким образом, для каждого входного изображения мы получаем четыре бинарных изображения. Бинарные изображения для классов лес, сельхозугодья, застройка и вода показаны на рис. 2c—2f.

Расширение данных. Для расширения данных мы использовали девять (9) методов расширения. Таким образом, каждое из изображений было увеличено до 10 различных изображений, включая исходное изображение. Мы отразили изображения по вертикали, горизонтали, повернули их против часовой стрелки на 90, 180 и 270 градусов. Затем мы использовали растяжение контраста, гаммы и оттенка.

2.2. LULC с семантической сегментацией

LULC на очень высоком уровне является задачей классификации. Она требует максимально точной классификации. Необходима семантическая сегментация, которая классифицирует изображение на уровне пикселей, то есть каждый пиксель на изображении принадлежит к определенному классу. В парадигме дистанционного зондирования семантическая сегментация означает сегментирование/обнаружение области, состоящей из одного вида почвенно‑растительного покрова. Например, семантическая сегментация для леса даст нам все лесные участки, независимо от их размера, формы и текстуры.

2.3. Архитектура VGG-16 и Полный сверточный слой

Архитектура сети VGG, представляющая собой сверточную нейросеть (CNN), была представлена Симоняном и Зиссерманом с соавторами [11]. Используя сверточный слой в качестве последнего слоя VGG-16, полученная Полная сверточная сеть (FCN-8 [8]) сегментирует изображение вместо того, чтобы классифицировать его. Пикселям, принадлежащим к одному классу, присваивается одинаковая цветовая метка. В целом, CNN представляет собой сеть, состоящую из сверточного слоя и слоя объединения, где сверточные слои используются для кодирования более низкого уровня признаков в более высокий уровень семантической абстракции. Слои пула используются для уменьшения размерности более высоких уровней. Уменьшение размера объема происходит за счет максимального объединения. Для CNN входным сигналом является изображение X размерности m, n, d (например, 3 цветовых канала (R, G, B). Нейроны также расположены в 3 измерениях. Каждый нейрон подключен к нескольким входам предыдущего слоя.

Полученные признаки проходят через несколько слоев свертки, ReLU и подвыборки или объединения. За этими слоями следует Полный сверточный слой. Это преобразование позволяет сети генерировать грубые карты с пространственной поддержкой. Затем используется слой транспонирования свертки [8] для приведения грубой карты к исходному разрешению изображения.

3. Экспериментальная установка и результаты

В этом разделе мы обсудим нашу экспериментальную установку, разделение на обучающую и тестовую выборки, процессы обучения и тестирования, а также метрики оценки.

3.1. Разделение на обучающую и тестовую выборки

Всего в наборе данных содержится 150 изображений. Все они являются изображениями формата RGB. Однако каждый из классов LULC присутствует не на каждом изображении. Чтобы хорошо представить классы LULC в обучающем и тестовом выборках для наших экспериментов, мы рассматривали изображения, в которых не менее 5% пикселей принадлежат одному классу, для обучения и тестирования бинарной модели для этого конкретного класса. Мы обучили наши бинарные модели FCN-8 отдельно для каждого из классов. В таблице 1 показано, что на 31 изображении лес присутствовал как минимум на 5% площади. Аналогично, сельхозугодья, застройка и вода присутствуют на 131, 60 и 72 изображениях соответственно. Мы разделили наши обучающие и тестовые выборки.

3.2. Обучение и тестирование

Мы обучаем отдельную бинарную модель для каждого из четырех классов LULC, т. е. лес, вода, сельхозугодья, застройка. На этом этапе обучения каждое изображение дополняется для увеличения размера датасета. Датасет был дополнен 9 способами, как описано в подразделе Расширение данных. Затем мы тестируем модели на тестовой выборке.

3.3. Матрица оценки

Вычисление матрицы смешения (в ориг. — diffusion matrix) дает нам представление о производительности нашей модели классификации — правильно ли она работает и какие ошибки допускает. В нашей модели сегментации выходом является бинарное изображение, содержащее целевой или нецелевой класс. Мы сравниваем это выходное изображение с истинной бинарной маской . В этом случае мы используем попиксельную точность, Recall, Precision, F1-score и пересечение над объединением (IoU). Здесь IoU рассчитывается путем деления площади перекрытия на площадь объединения.

Мы измеряем эти показатели для 4 классов: лес, застройка, сельхозугодья и вода.

4. Результаты

В этом разделе мы обсуждаем производительность наших моделей и показываем сравнение с eCognition.

4.1. Процесс обучения

Процесс обучения FCN-8 включает 100 эпох с коэффициентом обучения 0,01. Во время обучения мы уменьшаем размер исходных изображений с 7168×6720×3 до 224×224×3. Мы также выполняем аугментацию уменьшенных изображений, чтобы получить девять версий исходного уменьшенного изображения. Затем мы подаем уменьшенные изображения и их дополненные изображения на предварительно обученный FCN-8. Мы также предоставляем соответствующую истинную бинарную маску размером 224×224×3 для конкретной модели двоичной сегментации FCN-8. В случае обучения без разбиения на сетку, когда мы уменьшаем дискретизацию изображений, аугментация используется для увеличения размера набора данных. Но при обучении с разбиением на сетку увеличение не используется, так как набор данных становится очень большим даже без увеличения. Итак, 25*10 = 250 входных изображений вместе с их истинными бинарными масками пропускаются через сеть для обучения с уменьшенной дискретизацией. Таким образом, при разбиении на сетку мы подаем 960*25 = 24 000 входных изображений вместе с 24 000 соответствующими истинными бинарными масками для модели леса FCN-8.

4.2. Процесс тестирования

После обучения мы подаем тестовую выборку на ненастроенную индивидуальную модель FCN-8 для каждого бинарного класса. Аналогично процессу обучения, тестовый набор данных проходит через разбиение на сетку, где каждое изображение с исходным разрешением разбивается на 960 изображений с разрешением 224×224. Однако во время тестирования мы не проводили никакого дополнения тестового набора. Следовательно, 6 входных изображений тестируются с моделью Лес FCN-8 для расчета производительности этой модели. Мы подаем 12, 8 и 9 тестовых изображений на модель Сельхозугодья, на модель Застройка и на модель Вода соответственно, как показано в таблице 1. Затем мы сравниваем сегментированный результат с соответствующими бинарными данными, чтобы рассчитать матрицы смешения (в ориг. — diffusion matrix) для каждой из моделей. Показатели эффективности, рассчитанные по матрицам смешения, представлены в таблице 2.

Для тестовой выборки наша модель достигает хорошей точности по всем классам, как видно из таблицы 2. IoU для леса с FCN-8 ниже, чем IoU с eCognition. Тем не менее, показатели отзыва для FCN-8 очень низкие для всех классов, кроме воды. Это означает, что чувствительность модели FCN-8 низкая. Несмотря на то, что показатели точности хороши для классов лес и вода, низкий показатель Recall привел к более низкому результату F1. Метрики производительности для eCognition показаны в правой части таблицы 2. Хотя модели FCN-8 превосходят eCognition, точность, IoU и F1 недостаточно высоки.

4.3. Обучение и тестирование с разбиением на сетку

В этом разделе мы проводим эксперименты со спутниковыми изображениями, сохраняя неизменным пространственное разрешение. Однако размер FCN-8 составляет 224×224, в то время как размер входного изображения составляет 7168×6720. Поэтому, чтобы сохранить текстуру изображения неизменной, мы разделили каждое полноразмерное входное изображение на неперекрывающиеся подизображения. Каждое из подизображений имеет размер 224×224. Подизображения создаются путем деления полного изображения по неперекрывающейся сетке, чтобы мы могли сшить их вместе после сегментации всех подизображений. После сегментации всех этих подизображений мы объединяем их, чтобы получить конечный сегментированный результат размером 7168×6720.

В таблице 3 показана производительность детализации при тестировании изображений с помощью модели FCN-8, которая была обучена с разбиением на сетку. Область воды сегментируется более точно, чем другие классы. По нашим наблюдениям, вода присутствует в более плотной форме с небольшим количеством или полным отсутствием мелких деталей, разбросанных по всему изображению, где вода вообще присутствует. У других классов мелкие детали разбросаны по всему изображению, если они присутствуют, т. е. они не такие плотные, как вода. Это приводит к несколько менее удовлетворительному результату для других классов. Однако сельхозугодья больше всего страдают от этой характеристики пространственного распределения, что приводит к худшим результатам по сравнению с другими классами.

После завершения обучения мы также создаем подизображения из тестовых изображений и затем передаем их в ненастроенный FCN-8. Затем мы сшиваем сегментированный результат.

Точность и IoU для подхода с использованием подизображений сетки значительно улучшились. Среди них показатели точности для лесов, застроек, сельхозугодий и воды увеличились на 26,07%, 34,79% и 31,95% соответственно по сравнению с eCognition.

4.4. Анализ ошибок

В этом разделе мы попытаемся исследовать, где CNN не удается сегментировать и почему. На рисунке 6a показан выход модели FCN-8, где голубым цветом показан правильно сегментированный лес, где в качестве входных данных мы используем уменьшенное изображение. Анализируя производительность, мы внимательно смотрим на изображение 6a и увеличенную версию 6b, где сегментация не удалась. Мы сделали несколько наблюдений, чтобы определить, почему предварительно обученный FCN-8 не смог точно сегментировать лес. В прямоугольнике присутствуют очень маленькие области с резкими границами. К сожалению, VGG-16 не может смоделировать их, если только маленькая область не достаточно велика (6b синяя область). Мы также заметили, что если область меньше 10 метров, то FCN-8 не может захватить ее. Мы уменьшаем исходное изображение размером 7168×6720 до 224×224 входных изображений для FCN-8. Таким образом, мы уменьшаем масштаб примерно в 960 раз. В результате маленькие области, содержащие мало пикселей, значительно теряют текстуру. Во‑вторых, они теряют свои пространственные свойства GSD и LULC. Таким образом, этот лесной регион (на входном изображении) уже потерял свою достоверность наземного региона леса. В результате, FCN-8 не распознал его как лес. Более того, при уменьшении масштаба изображения пограничные пиксели имеют менее информативную текстуру. Уменьшение масштаба исходного изображения значительно снижает дискриминационные характеристики пограничных пикселей.

Эти ошибки можно устранить, сохраняя одинаковое разрешение изображений при подаче их в сеть. Однако не все ошибки устраняются при использовании подизображений сетки. Мы видим, что сельхозугодья имеют более низкие показатели точности и IoU по сравнению с другими классами, хотя мы используем подизображения сетки. На рисунках 7a и 7b мы обнаружили сельхозугодья с очень резкими границами. Резкие границы не улавливаются моделью FCN-8. Как правило, FCN8 всегда ищет гладкую периферию. Модель FCN-8 предварительно обучена с помощью ImageNet. А в ImageNet нет объектов с такими четкими границами. Это может быть причиной неудачи FCN-8.

5. Заключение

В данной работе мы предлагаем структуру семантической сегментации с использованием Полной сверточной сети (FCN-8) для сегментации классов земного покрова по спутниковым изображениям в формате RGB. Мы использовали подход на основе неперекрывающейся сетки с FCN-8, который значительно улучшил производительность по сравнению с программным обеспечением ГИС — eCognition. Средняя точность составляет 91,0%, а средний показатель пересечения над объединением (IoU) составляет 0,84. Однако eCognition получает среднюю точность 74,0% и средний IoU 0,60. Наша будущая работа включает разработку новой глубокой архитектуры для лучшей сегментации границ.

Библиография"'https://habrastorage.org/getpro/habr/upload_files/240/dd9/273/240dd9273bde321d23b04f6f7ca5ea9d.png'"['https://habrastorage.org/r/w1560/getpro/habr/upload_files/11a/ac9/ed9/11aac9ed9985a568201d750d6c1467ff.png', 'https://habrastorage.org/r/w32/getpro/habr/avatars/ea8/78f/484/ea878f48416e3027841076223b0796b2.png', 'https://habrastorage.org/getpro/habr/avatars/ea8/78f/484/ea878f48416e3027841076223b0796b2.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/27d/311/13a/27d31113a9706b142960789d3eebd819.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/c9c/9c0/0dc/c9c9c00dccf57c84dddae3e7adf68c6b.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/7f3/c3e/715/7f3c3e715942d17d1a9ea475976567b6.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/152/e50/754/152e507544e3c807db99e92b2bdf67ff.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/4da/177/0fc/4da1770fc4cdb4d2bc9cb2e25cb2ae75.png', 'https://habrastorage.org/getpro/habr/upload_files/240/dd9/273/240dd9273bde321d23b04f6f7ca5ea9d.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/353/5cb/753/3535cb753e514ea66b321e0c37603a32.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/995/e6a/a1a/995e6aa1a4a430dccd8cfd61cb860f3e.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/be1/1ac/b2e/be11acb2e766bb39c53c78da84f4fc4b.png', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/53b/f9d/0a4/53bf9d0a45ffe5dcfdba18feaf571b1f.png']"
18'718354'Про микросервисы на примерах'Решили сделать статью без воды и картинок про микросервисы, чтобы любой начинающий аналитик мог понять, а что же это такое на самом деле. И конечно такая статья...'https://habr.com/ru/post/718354/'"Решили сделать статью без воды и картинок про микросервисы, чтобы любой начинающий аналитик мог понять, а что же это такое на самом деле. И конечно такая статья должны быть с практикой, а не копипастой из разных книг и статей, которую все друг другу рассказывают на собеседованиях.

Итак, эта статья не для разработчиков и опытных архитекторов, а для аналитиков, которые хотят понять, а что же такое микросервисы на самом деле. Пример здесь максимально простой и не претендует на хороший стиль написания кода. Чтобы его запустить не нужно обладать вообще никаким ИТ‑бэкграундом и не нужно настраивать никакие IDE.

Примечание. Если хотите сразу попробовать и не читать, как устроен сервис, переходите по ссылке — там исходники и инструкция. Также эту ссылку продублировал в конце, если захотите попробовать тренажёр уже после прочтения.

Немного теории о программах

Микросервис — это программа.

А в современных реалиях программа — это набор классов. Таким образом, микросервис в самом простом случае — это один класс, хоть это и грубое приближение.

Если не вдаваться в теорию, то класс — это описание данных и функций, которые работают с этими данными.

Функции называются методами класса, а данные — полями класса.

Можно принять такое приближение: класс — это набор полей(данных) и методов (функций).

Когда программа скомпилирована (переведена из исходного кода в некий исполняемый файл, который запускается на компьютере) и начинает выполняться, то компьютер размещает у себя в памяти объекты (копии) каких-то классов. Поля (данные) и методы (функции) хранятся в оперативной памяти в момент выполнения программы. Поля заполняются реальными значениями.

Ну и, соответственно, работа программы заключается в вызове каких-то методов класса, с передачей им на вход дополнительных данных (методы работают с внешними данными, которые поступают им на вход, а не только с полями).

Это очень примитивное описание, тем не менее, достаточное для базового понимания процесса работы кода.

Таким образом, микросервис можно описать так: это входные данные, затем внутренняя логика по работе с этими данными, и результат этой работы: выходные данные (ответ сервиса).

Получается, что микросервис принимает на вход какие-то параметры, что-то с ними делает (он также может сам сходить за дополнительными данными в какую-то внешнюю систему), а потом возвращает результат в ту систему, которая его вызвала.

Теория закончена. Приступим к описанию работы тренажёра.

Как тренажёр работает?

Есть два микросервиса на Flask.

Примечание. Это Python-фрэймворк, про который можно почитать в материале « Разработка web-приложения на Flask »

Первый микросервис ходит в HH.ru и по шаблону достает оттуда вакансии — осуществляет вызов во внешнюю систему, другими словами. Второй микросервис берёт эти полученные данные и записывает их в файл.

Сейчас поговорим про первый микросервис. Он простой. Собственно, вот его код.

#Создали объект класса Flask (микросервис) app = flask.Flask(__name__) #Прописали функцию и путь, по которой ее можно вызвать @app.route(‘/api/1.0/getVacsByName/’ , methods=[‘GET’ , ‘POST’] ) def getVacsByName(): #Загрузили параметры запроса из конфигурационного файла dct = request.json config_dir = dct[‘config_dir’] file = open(config_dir , ‘r’ , encoding=”utf-8”) content = file.readlines() pars = {} url = content[0].split(‘

’)[0] storage = content[1].split(‘:’)[1].split(‘

’)[0] for i in range(2, len(content)): st = content[i] value = st.split(‘:’)[1].split(‘

’)[0] key = st.split(‘:’)[0] #print(key, “ “ , value) if(value.isdigit()): pars[key] = int(value) else: pars[key] = (value) # Посылаем запрос к API сайта req = requests.get(url, pars) # Декодируем его ответ, чтобы кириллица отображалась корректно data = req.content.decode() req.close() #Вернули ответ наружу return data

Второй микросервис ещё проще.

#Создали объект класса (микросервис) app = flask.Flask(__name__) #Прописали функцию и путь, по которой ее можно вызвать @app.route(‘/api/1.0/StoreToFile/’ , method=[‘POST’] ) def StoreToFile(): #Получили данные в формате json из запроса Frame = request.json#словарь dr = Frame[‘dir’] #Считали директорию для сохранения ответа и перечень данных, которые надо #сохранить with open(dr) as f: lines = f.read().splitlines() dr_tosave = lines[0] lines.remove(dr_tosave) cols = lines #Записали результат в DataFrame res = pd.DataFrame(Frame[‘items’])[cols] #Сохранили результат res.to_excel(dr_tosave) print(dr_tosave) return Frame

Управление сервисами мы (Андрей Эндерс, я, и мой коллега Александр Кочин), и сделали простым, чтобы было два конфигурационных файла. В одном файле задаются параметры того, что мы хотим из HH.ru получить. Во втором указываем куда и как это добро сохранять.

Ещё немного о том, как он работает

Вот я указал конфигурационный файл, в котором прописаны параметры запроса.

dr = { “config_dir”: ‘C:/Users/Selecty/Desktop/project/cin/config.txt’ }

Что в нём находится? Вот это:

https://api.hh.ru/vacancies text:системный аналитик area:2 page:0 per_page:100

Здесь указан сайт, к которому мы будем обращаться. Остальные строки — параметры того, что мы ищем (все это входные параметры микросервиса). Например, здесь мы ищем системного аналитика в Питере (код города 2), с первой страницы по 100 вакансий.

Что теперь происходит?

Подгружаем разные полезные библиотеки, конфиг, вызываем первый микросервис…

req = requests.post(‘http://127.0.0.1:5000/api/1.0/getVacsByName’, json = dr) Frame = json.loads(req.text)

…и получаем ответ.

Здесь полный ответ, много системной информации, потому что мы хотим получить полезные данные.

Что делаем дальше?

Превращаем ответ в JSON, который удобен программной среде. В этот же JSON добавим директорию конфига, где лежат параметры для сохранения.

Frame = json.loads(req.text) Frame[‘dir’] = ‘C:Users/Selecty|Desktop/project/cout/config.txt’

Здесь у нас прописан путь в тот файл, куда мы хотим сохранить результаты, какие столбцы вакансий мы хотим отбирать, задаём параметры фильтрации: id, name, area, salary и прочее.

Дёргаем второй микросервис.

req = requests.post( ‘http://127.0.0.1:5001/api/1.0/StoreToFile’ , json = Frame ) Frame = req.json()

И заходим туда, куда хотим сохранить. Вот он нам сохранил результат.

Выглядит, конечно, некрасиво, но видно и название вакансии, и ID города, и контактную информацию и прочее.

Зачем это всё?

По умолчанию, микросервисы системный аналитик должен знать. Но как знания появятся, если только в книжке или на Хабре прочитал? Поэтому я и решил, что лучше сделать реальный микросервис, чтобы каждый мог получить представление.

Идея тренажера в том, чтобы без громоздкой логики было понятно, как эта теория работает на практике: как один микросервис ходит, а другой записывает, что такое API и тому подобные вещи.

Если хотите попробовать

Это учебный проект, он никакой логики за собой не несет.

Не нужно Swagger‘а, нет спецификации, но зато можно видеть как все работает.

Не нужно никакой среды, в этом плюс Jupiter и Python, мы просто запускаем всё через браузер. Дальше можно модифицировать код и смотреть, как это работает .

➡️ ➡️ ➡️ Исходники доступны по ссылке: заходите, читайте инструкцию, пользуйтесь.

А ещё, был бы интересен ваш опыт использования. Если напишете в комментариях об этом — будет интересно.

Рекомендуем почитать [подборка от редактора]"'https://habrastorage.org/getpro/habr/upload_files/d05/9f0/fb3/d059f0fb3395443dab184c0f1fce994b.jpg'"['https://habrastorage.org/getpro/habr/company/623/4a7/52a/6234a752af61e1eb6b220f90db54aadc.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/a6a/952/86e/a6a95286ef93b6b7b8ee8e6aea36c5d6.png', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/9af/563/657/9af563657c4e1752fad4e027a37b6867.jpg', 'https://habrastorage.org/getpro/habr/upload_files/d05/9f0/fb3/d059f0fb3395443dab184c0f1fce994b.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/751/8c8/827/7518c8827b090f14f341c2423a5e420b.png', 'https://habrastorage.org/getpro/habr/branding/49a/ebd/afc/49aebdafcb8f26e394d3170ffeaa6eb7.png', 'https://mc.yandex.ru/watch/24049213']"
19'716404'Как «яжепрограммист» построил всю свою родню'Всем привет. Разумеется, это шутка — я своих родственников очень люблю, уважаю и никоим образом их не притеснял и не планирую. Более точная формулировка — отсортировал в целях построения...'https://habr.com/ru/post/716404/'"▍ Подглядываем за конкурентами. Неудачные попытки промышленного шпионажа.

▍ Приступаем к собственной реализации

▍ Сортировка персон

▍ Рисуем красивое

network.on(""beforeDrawing"", function (ctx) { ctx.strokeStyle = ""#ff3333""; ctx.lineWidth = 1; ctx.beginPath(); ctx.moveTo(0, 0); for(const Node1 of nodes.get()) { var Pos1 = network.getPositions([Node1.id])[Node1.id]; for(const Node2 of network.getConnectedNodes(Node1.id, ""to"")) { var Pos2 = network.getPositions([Node2])[Node2]; ctx.moveTo(Pos1.x, Pos1.y); ctx.lineTo(Pos1.x, Pos1.y + 50); ctx.lineTo(Pos2.x, Pos1.y + 50); ctx.lineTo(Pos2.x, Pos2.y); } } ctx.moveTo(0, 0); ctx.closePath(); ctx.stroke(); });

▍ Опять сортируем

Т. к. сортируем начиная с предков, то уровни выше уже отсортированы. Доступ к объектам верхнего уровня мы имеем через связь с объектом типа семья. Через эту связь мы можем разместить детей под родителями. Новые люди (без родителей) появляются максимально справа. Это хорошо на первом этапе, но есть планы переделать. Объект семья сортируется крайне просто — сортируем в порядке следования глав (отцов) семейств. Супругов размещаем рядышком. Это значит, что мужчину придвигаем на ближайший к семье женщины край, а женщина покидает семью и становится рядом с мужем, связи с семьёй не разрываем. Такова её женская доля :) Всё это доступно через связь с семьёй (семьями) нижнего уровня. Если супруг без родителей, то рисуется рядом со второй половинкой.

▍ Демо

загружать и визуализировать собственное древо в формате GEDCOM;

скрывать/отображать связи между родителями и детьми;

отключать/включать «физику». При отключении удобно двигать людей вручную в пределах уровня, а затем опять автоматически выравнивать их относительно друг друга;

дважды кликнув по персоне перестроить древо для этой персоны.

▍ Разглядываем сторонние деревья

Древо английской короны

Древо Kennedy

Royal92.ged

Shakespeare

Bronte

Pres2020

http://176.119.159.132/gtree2/index.php?root=@I0006@

▍ Финал

Всем привет. Разумеется, это шутка — я своих родственников очень люблю, уважаю и никоим образом их не притеснял и не планирую. Более точная формулировка — отсортировал в целях построения генеалогического древа. Об алгоритме построения, сортировки, визуализации фамильного древа и будет эта статья. Собственно, с чего всё началось. Мой папа и я имели огромное желание создать генеалогическое древо рода. Меня, конечно, больше влекла визуальная составляющая — знаете, все эти средневековые полотна с некрасивыми мужчинами, бледными дамами в париках, золотые рамки, даты жизни римскими цифрами, деревья с узловатыми ветвями и зелёными листьями и т. д.? Вот это вот всё. Папа кропотливо собирал какие-то бумаги, обзванивал родных, вёл записи.Однажды я пообещал ему нарисовать древо на компьютере, т. к. попытки набросать его вручную на куске ватмана не увенчались успехом — в этот момент я понял, что герольды, живущие при дворе, не зря кушали свой хлебушек. Было несколько подходов: попытки освоить специализированный софт, потом что-то написать своё, но всё время результат был недостижим. Время шло — папу унёс ковид, а обещание так и осталось висеть на моей совести.Всё изменилось, когда пришла пора моей дочке писать диплом. Мы сразу отмели все темы из ассортимента вуза и заявили собственную — построение генеалогического древа. Отступать стало некуда.Для начала немного погрузимся в специфику задачи — рекомендую несколько местных статей:краткий обзор софта «Программы для генеалогического дерева» и пара реализаций «Bonsai: фамильный вики-движок» Интерфейсная часть с реализацией ведения персон в базе данных вещь, на мой взгляд, довольно тривиальная и была реализована весьма быстро, демонстрировать здесь не вижу смысла.Алгоритм визуализации древа — вот что самое интересное и заставляет серьёзно загрузить голову. Про него и буду рассказывать. Для нетерпеливых сразу скажу, что исходники пока не выкладываем, но есть демонстрационный сайт, куда можно загрузить своё древо в формате GEDCOM — ссылка ближе к концу статьи.Принципы построения древа неплохо описаны в статье «Как я древо семьи строил» , мы приняли их почти все, за исключением различных вариантов имбридинга — наше фамильное древо пока этим не отягощено.И хочу сразу уведомить — генеалогия это в чистом виде биология с наложением различных видов семейных связей: официальный (государственный), церковный, гражданский браки. И именно биология жёстко указывает, что дети рождаются только у мальчика и девочки, а также не существует других гендеров кроме «М» и «Ж».Как говорила одна моя хорошая знакомая: главное в решении задачи — это найти её полный аналог. План следующий: ищем в интернетах и интегрируем в проект готовый компонент, а сэкономленное время посвящаем просмотру сериальчиков.Посмотрели источник «Bonsai: фамильный вики-движок» — описание толковое, в конце есть ссылка на демосайт с практически нулевой ценностью. Я серьёзно — расписать суперкрутой алгоритм, но не дать возможности проверить его работу на более-менее реальном объёме данных? Импорт из GEDCOM реализовать несложно, а вводить вручную своё древо (почти 300 персон) мы не решились.Источник «Как я древо семьи строил» . Хорошо описаны принципы построения и алгоритм. Есть демка с довольно большим объёмом данных. Но! В визуализации месиво и реализация отходит от описанных правил построения. Видимо, сам алгоритм некорректный или не полностью реализован. Для очистки совести сгенерировали и загрузили свои данные, итог — твёрдое нет. Древо получилось не планарное, навигация неудобная, часть родственников потеряли связи, часть и вовсе испарилась. Вдобавок можно двигать людей по вертикали.Вспомнил я, что когда-то пробовал вести древо на сайте genway.ru и он даже понравился своим интерактивным методом построения древа. Сразу проблема — хоть сайт и живой, но всё реализовано на флеше. Достал свой древний «атомный» ноут с виндой XP и прорвался-таки туда! Стащил с него все флешевские файлы, пихнул в декомпилятор ныне уже мёртвого языка. Результат весьма недурственный — в наличии имена переменных, названия функций, даже комментарии. Попытались погрузиться, но в итоге отодвинули в сторону. Некромансеры из нас так себе.Есть ещё один сайт , свеженький, на JavaScript, и ввод совсем как на генвее. Терзают смутные сомнения, что автор генвея рецидивист и взялся за старое. Но, помимо отсутствия импорта GEDCOM, у него есть фатальный недостаток — абсолютно всё там реализовано на JavaScript. Объём большой, мы к этому не готовы. В общем, тут тоже тупик.Параллельно отсмотрели ещё много всяких библиотек, но уже не помню причин, по которым их не приняли «в производство». Но причины были весомые.«Лайтовенькие» на первый взгляд варианты отвалились, придётся делать всё самим. Сразу прикинули, что без JavaScript не обойтись, посему будем привлекать библиотеку vis.js . Выбор был обусловлен наличием положительного опыта её использования в одном pet-проекте. Не исключено, что если бы выбрали другую, аналогичную библиотеку, статья получилась бы значительно короче :). Как пользоваться vis.js я решил тут не показывать — на сайте есть огромное количество демонстрационных примеров.Vis.js очень хорошо умеет рисовать графы, и самое главное — иерархические. Прикинули быстренько: чтобы получить нашу эталонную картинку, потребуется завести ещё одну ноду — «семья». Эта концепция позволяет не потерять родственников, не имеющих детей (прямых кровных связей). Выглядит это примерно вот так:Как решили, так и сделали. Пока без программирования, просто в html вставили персоны, граф настроен на иерархию. На одной семье результат отличный (картинка выше), только линии связей «из коробки» не совсем то, что нам хочется, но подобрали более-менее приемлемые варианты, тюнинг на потом отложим.Шустро написали на PHP скрипт, генерирующий страничку на весь объём базы — это примерно 300 человек. Не забываем создавать парную безымянную персону для матерей/отцов-одиночек.Результат удручающий — система пытается построить дерево, где из одной вершины идут ветви, а нам надо, чтобы вершин было две (термин «генеалогическое древо» вводит в заблуждение, т. к. реально это «генеалогический граф»). Но зато древо получилось с прикольным «желейным» поведением при перемещении нод.Пробуем поиграть со штатными методами сортировки — sortMethod и shakeTowards — вроде как добились того, что родителей двое, всё ещё не то. Системе просто невозможно объяснить, что между родителем и ребёнком должно быть ровно два уровня (с учётом семьи). Пытается выровнять по верхнему или нижнему краю — внуки оказываются на одном уровне с прапрадедушкой и наоборот, плюс неоптимальные перекрёстные связи.Это просто кошмар — не фамильное древо благопристойной семьи, а карта преступных связей на стене детектива.Ладно, у vis.js есть возможность вручную прописать уровни, и мы ей воспользуемся.Мы манипулируем двумя видами объектов: персона и семья. Объект персона имеет связь с семьёй, где она родилась, и связи с семьями, где она является одним из родителей. Соответственно, объект семья имеет связь «папа» к персоне отцу и связь «мама» к матери. Также объект семья может иметь связи к каждому ребёнку, рождённому в данной семье. Написал может, т. к. мы отображаем и просто супружеские пары, без детей.Алгоритм несложный, рекурсивный — всем персонам устанавливаем поколение (далее для простоты — уровень) 0, а семьям 1. Выбираем одного человека и присваиваем ему уровень 1. От этого человека рекурсивно движемся по семейным связям — ушли в родительскую связь и данной семье присвоили уровень на единицу меньше (0), ушли в связи, где он родитель — в данных семьях уровень +1 относительно этого человека. Аналогично с семьями — уходим к маме или папе — им уровень на 1 меньше, чем уровень данной семьи, провалились к детям — уровень повышается.Чтобы рекурсия завершилась, не заглядываем туда, откуда пришли. Кроме того, учитываем, что непросмотренные люди имеют уровень 0, а семьи 1. В итоге у нас получится, что люди разместились на нечётных уровнях, а семьи на чётных.Уже намного лучше. Только вот в этом месиве по-прежнему не разобрать где свои, а где другие свои.Начнём зачистку. Навскидку сразу можно убрать со схемы объект семья. Ставим атрибут невидимости и снова генерируем древо. Вроде и стало чище, а на самом деле кошмар — мы можем двигать персоны, а семьи остаются на месте. Они невидимы во всех смыслах, их и мышкой не захватить. Ок, сделаем их видимыми, но размером 1 или 2 или 3. Вроде чище, но тоже нехорошо, а всё потому, что у нас осталась штатная сортировка в пределах уровня. Вернее отсутствие сортировки. Автоматом ничего не распутывается.Дело в том, что в vis.js реализован движок hierarchicalRepulsion, который работает примерно так (утрированно) — каждая нода имеет некоторую гравитацию, которая притягивает их всех в центр друг к другу, но вместе с тем они имеют одинаковый заряд, который не даёт им сближаться слишком близко (они как бы отталкиваются). На определённом расстоянии гравитация и силы отталкивания уравновешивают друг друга, и положение нод стабилизируется.Также имеются связи между некоторыми нодами, которые представляют собой своего рода пружинки. Поведение аналогичное, как между несвязанными нодами, только более сильное и притяжение с расстоянием увеличивается. Всё это считается итеративно, позволяя получать шикарный желейный эффект при различных манипуляциях с древом.Ну и есть ещё некоторые нюансы — например, это ноды, которые не участвуют в симуляции. Они либо имеют атрибут с запретом на физическую симуляцию, либо являются невидимыми объектами.Всё это худо-бедно работает на плоскости, в двумерном пространстве, но когда ноды находятся на прямой, разойтись они не могут. Подкрутка коэффициентов ничего не даст — пробовали. Также ничего не даст добавление дополнительных связей между родителями, между родителем и ребёнком. Всё потому, что в иерархическом графе ноды могут двигаться только по горизонтали. И сила отталкивания одноимённых зарядов между нодами довольно сильная, даже пружинка не может её преодолеть. И даже две, три пружинки :) Вот и получается, что если vis.js поставил между мамой и папой условного троюродного дядю, то им не быть больше вместе. Это печально. Воссоединить их может только пользователь, приложив значительные усилия к движению мыши (если можно так выразиться), захватив ноду и резко перемещая её вправо или влево.Ладно, оставим пока всё как есть, переключимся на визуализацию. У нас есть объекты родители, дети и семья, которых мы хотим видеть так, а пока штатно можно получить вот так, и навскидку надеемся сделать вот так (нарисовано вручную в графическом редакторе):Для наглядности связь между двумя нодами (семья и сын) изобразил зелёным цветом. Все остальные связи идентичны.Т. е. нам надо добавить один незамысловатый вид связи между нодами. Скачиваем с гитхаба исходники vis.js, смотрим. Первая мысль — надо закачать обратно. Не готовы мы лопатить такие объёмы!В который раз изучаем возможности vis.js. И тут в примерах глаз цепляется за обработчики beforeDrawing/afterDrawing. Суть идеи — штатные связи-пружинки оставляем, но только не показываем. Необходимые видимые связи отрисуем в функции beforeDrawing. Читаем, как добраться до нод и их атрибутов через api DataSet, и в итоге рожаем такую функцию:И результат её применения к тестовой семье (оставил прямые связи между нодами для наглядности) и ко всему древу.Вроде всё как хотели, но на полном объёме результат ещё хуже. Раньше хоть по плавным изгибам можно было предположить направление связи, а сейчас стало намного запутаннее — все горизонтальные связи слились в одну линию, вертикальные заходят под прямым углом.И вот примерно на этом этапе нам пришло одно очень важное понимание. Древо должно строиться не по всему объёму людей в базе, а только по тем персонам, которые имеют «кровные связи» с конкретным человеком. Это логично и соответствует биологическому понятию родства, но почему-то в источниках по построению деревьев мне данная мысль в чистом виде не встречалась. Возможно, тривиальные вещи просто считается стыдным разжёвывать?Реализация простая до безобразия. Вспоминаем рекурсивный алгоритм распределения людей по уровням: когда мы зашли в семью со стороны одного из родителей, то его супругу мы присваиваем уровень и отобразим на схеме, но дальше к его родительской семье не идём и все они остаются на 0-м уровне. Затем, при генерации данных для vis.js мы пропустим персоны с уровнем 0. Однако пользователю необходимо показать, что за этим человеком есть ещё родители/семья/клан, поэтому здесь можно добавить на картинку какой-нибудь атрибут, например веточку (стрелку, звёздочку).В данном случае древо было построено для человека, который был выбран самым первым узлом при расчёте уровня. Несложно в готовом графе vis.js сделать выбор мышкой произвольного узла (персоны) и произвести перестроение древа для данного человека. Сделали.Вернёмся опять к визуализации (если обратили внимание — пишу в порядке хронологии, выглядит сумбурно и бессистемно, придётся потерпеть :) Типичная ситуация — родители слева, семья справа, дети слева. У другой семьи может быть аналогичная, но зеркальная раскладка.Как мы уже понимаем, семьи автоматически между собой не поменяются местами, а ведь они у нас являются ключевым объектом при построении связей. А что, если отойти от концепции рисования связей между нодами, а отрисовывать связи в пределах семьи? Для ключевой точки «А» высчитываем координату х между родителями, координата у берётся от объекта семья. Немного отступов туда, сюда и вот финальный результат (функцию не привожу, только картинка):Для наглядности оставлено отображение связей с семьёй, справа они скрыты атрибутом hidden.Ещё разок посмотрим на схему – явно лишний объект «семья». Теперь он не имеет визуальных связей и вообще может находиться в неизвестных местах. Возникла мысль — а может ну её нафиг, эту семью? Я имею в виду не свободу нравов, а ноду, через которую идёт связь детей с родителями.Вот взять и сделать таким образом:Налицо сплошные плюсы — связи между супругами явные, детишки тянут свои ручонки прямо к папе и маме, а полосочки мы и так мимо семьи рисуем.Посмотрели код, прикинули, откуда что берётся — вот и не получится от семьи избавиться. Нужна семья как источник данных, но как узел древа лишняя. И мы подобный подход отметили как недостаток при рассмотрении алгоритма статьи «Как я древо семьи строил» Значит будем информацию по семьям отдавать отдельно от данных vis.js. После очередной переделки всё стало даже быстрее бегать — это вызовы DataSet отбирали изрядное количество ресурсов. Из дополнительных плюшек — бездетные семьи отображаем прямыми линками без спуска на уровень ниже.С визуализацией закончили (ну почти — есть замечания, но об этом позже), пора опять возвращаться к сортировке людей на уровне. Мы уже внутренне смирились, что придётся делать её самостоятельно. И тут возникает очередной вопрос — нафига нам этот vis.js? Ах да, это клёвое желе %)Итак, делаем простейшую сортировку вручную и наслаждаемся результатом. Это мы сначала так думали. На самом деле хоть засортируйся — узлы будут идти в случайном порядке. И только путём невероятных поисков на форумах удалось выяснить (не одни мы по этим граблям прошлись) – надо использовать версию vis.js 4.8.1. Дескать, работает по-человечески, отображает узлы в порядке появления слева направо. Нашли, скачали, вставили. Всё нормально — порядок наш сохранён, прочая функциональность на месте.Далее пишем функцию сортировки. Опять некорректное название — это функция сравнения двух объектов, которую использует штатная библиотечная функция сортировки. Сортировка осуществляется на нашем бэкенде, поэтому пишем на PHP.Кратенько внутреннюю модель данных я упоминал. Что нам надо знать, чтобы сделать эту функцию сравнения:Вот коротенько все критерии сортировки, которые умещаются на один экранчик кода.Финал близко, на несложных схемах выглядит шикарно. Осталась одна проблема — горизонтальная полоса на насыщенных уровнях. Скриншот не привожу, т. к. эти артефакты отлично видно на скриншоте, где впервые применён собственный метод отрисовки связей. Лечится довольно просто — где мы формируем псевдообъект «семья» для нашего фронтенда, нам в каждую семью необходимо добавить небольшой атрибут — смещение. Это небольшое смещение по оси ординат, которое мы будем добавлять, когда рисуем горизонтальные линии связей в семьях.Мы у себя считаем его следующим образом — после сортировки уровня с семьями делается ещё один проход, и семье добавляется смещение, равное количеству детей, умноженное на 3 (пикселя). Если смещение предыдущей семьи такое-же, то накидываем ещё 3. Визуально семьи расходятся по уровню, становится очень симпатично.Сортировка есть, она работает, но не идеально. По прежнему есть места, которые после ручной оптимизации выглядят намного лучше. Основной источник проблем — критерий сортировки номер 2. Тут я вижу только формирование оценки упорядоченности, например, количество внутренних пересечений связей между семьями, и далее перебором мест размещения новой персоны искать минимальное значение этого показателя.Демонстрационную версию, вырванную из диплома, я разместил на серверочке от RUVDS . Находится оно здесь — gtree2 . Можно глянуть наше обезличенное древо либо загрузить своё в формате GEDCOM. Загруженные файлы хранятся сутки, потом крон их удаляет. Хост слабенький, но буду иногда заглядывать и поднимать.Что там можно с этим уже делать:У кого нет собственных деревьев в формате GEDCOM, могут поискать их в интернете. Ниже привожу ссылки. Здесь можно скачать древо «The English and British Kings and Queens» и древо «The Kennedy Family of the United States».ужасно. Большое в плане глубины поколений. Почему-то в некоторых записях FAM неполных семей, мужчины обозначены как WIFE, а женщины как HUSB. Кривое древо потребовало для себя корявый код :(— ничего примечательного. Персон немного, требует минимум ручного вмешательства.Вот ещё один ресурс с некоторым количеством доступных GEDCOM файлов.европейские монархи — у меня строится очень долго. Само древо большое — вероятно, восходит к неандертальцам. Тут наши алгоритмы сдаются, т. к. царствующих особ невероятно много и у них были весьма популярны близкородственные связи.— простенькое древо. Здесь я узнал, что Вильям был женат и у него было трое детей.— древо писательниц Бронте. Тут мне потребовалось беглое обращение к Википедии. Само древо скромное.— «An excellent collection of the presidents of the US, with their ancestors and descendants». Ещё одно гадкое древо. Вернее не древо, а набор не связанных между собой деревьев. Чтобы добраться до какого-либо президента, нужно заглянуть в GED-файл и узнать его идентификатор. Далее вбиваем в URL в таком виде. Ну и для пробы Кеннеди — @I1509@ (можно сравнить с предыдущим ресурсом), Рузвельт — @I1466@, Обама — @I2194@, Трамп — @I2185@. А вот Байден, ака «самоходный дед», пока отсутствует — не ищите.Скриншоты приводить не стал — проще скачать самостоятельно и смотреть на сайте.Дочка диплом защитила на «отлично» и у нашего рода появилось полноценное фамильное древо. Возможно, мы созреем и соберём общедоступный релиз для самостоятельного развёртывания на персональных ресурсах, но это не точно :)"'https://habrastorage.org/webt/hw/le/bd/hwlebd1kwhjrlfuovt45xvjwoye.jpeg'"['https://habrastorage.org/r/w1560/webt/tl/pu/cp/tlpucp8fibe6ugcclx7bdetehni.png', 'https://habrastorage.org/r/w1560/webt/hq/wq/ns/hqwqns_cyukswrrxukjd_jy6o8a.png', 'https://habrastorage.org/r/w780q1/webt/xx/qt/ju/xxqtjusof6bfowd8de3pkpauntq.jpeg', 'https://habrastorage.org/r/w780q1/webt/d7/d6/ez/d7d6ezrwvjierpf3vpwx7xspcci.jpeg', 'https://habrastorage.org/r/w1560/webt/ck/81/ys/ck81ysn0tnrewoiqrohfr4nlgqm.png', 'https://habrastorage.org/getpro/habr/company/027/b19/cea/027b19cea984722a8d806edcc56c2c00.png', 'https://habrastorage.org/r/w1560/webt/pr/kq/ft/prkqfthohhfxu4w9x9mgyppxfdo.png', 'https://habrastorage.org/r/w1560/webt/jl/ka/82/jlka82gfc-o25q1iev1oqkuigny.png', 'https://habrastorage.org/r/w1560/webt/-t/tz/k8/-ttzk8flijcql2e3598eyupag28.png', 'https://habrastorage.org/r/w1560/webt/fz/qi/qp/fzqiqp68mfa5psionpr8077guqc.png', 'https://habrastorage.org/webt/hw/le/bd/hwlebd1kwhjrlfuovt45xvjwoye.jpeg', 'https://habrastorage.org/r/w1560/webt/9q/tl/9y/9qtl9yfv3t3h7sj2idnwxzb2plo.png', 'https://habrastorage.org/r/w1560/webt/gs/dv/lx/gsdvlx8kjxc2-petferqytvundw.png', 'https://habrastorage.org/getpro/habr/branding/ea2/32a/1c4/ea232a1c4d3c4f31e800a2221c764b84.jpg', 'https://habrastorage.org/r/w1560/webt/cr/dy/4t/crdy4tlmreeitgtqepun6rwl5ho.png', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/r/w1560/webt/xf/w8/pu/xfw8puuah8v65xrtr3tb2mkp7a0.png', 'https://habrastorage.org/r/w1560/webt/sz/7j/pf/sz7jpfj8i1pa6ocj-eia09dev4q.png']"
